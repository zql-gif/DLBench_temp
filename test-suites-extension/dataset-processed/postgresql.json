[
    {
        "sql_id": "postgresql_1_6",
        "database_name": "postgresql_1_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT * FROM t0 WHERE (a, b) IN (ROW(1, 10)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) IN (ROW(1, 10));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_1_7",
        "database_name": "postgresql_1_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT * FROM t0 WHERE (a, b) IN (VALUES ROW(1, 10), ROW(2, 20)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) IN (ROW(1, 10), ROW(2, 20));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_1_8",
        "database_name": "postgresql_1_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (VALUES ROW(1, 10)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (ROW(1, 10));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_1_9",
        "database_name": "postgresql_1_9",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (VALUES ROW(1, 10), ROW(2, 20)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (ROW(1, 10), ROW(2, 20));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t0`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t0`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_100_2",
        "database_name": "postgresql_100_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 01:00')); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (ts) VALUES (EXTRACT(EPOCH FROM TIMESTAMP '2002-10-27 01:00:00'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp)",
                "description": "Extracts the number of seconds since the Unix epoch from a timestamp using the EPOCH keyword.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM current_timestamp);",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59+02:00');",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_100_3",
        "database_name": "postgresql_100_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 02:00')); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (ts) VALUES (EXTRACT(EPOCH FROM TIMESTAMP '2002-10-27 02:00:00'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp)",
                "description": "Extracts the number of seconds since the Unix epoch from a timestamp using the EPOCH keyword.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM current_timestamp);",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59+02:00');",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_100_4",
        "database_name": "postgresql_100_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 03:00')); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (ts) VALUES (EXTRACT(EPOCH FROM TIMESTAMP '2002-10-27 03:00:00'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp)",
                "description": "Extracts the number of seconds since the Unix epoch from a timestamp using the EPOCH keyword.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM current_timestamp);",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59+02:00');",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_100_5",
        "database_name": "postgresql_100_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ts,from_unixtime(ts) FROM t1; -- FROM_UNIXTIME",
        "target_query": "SELECT ts, TO_TIMESTAMP(ts) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_TIMESTAMP(unix_timestamp)",
                "description": "Converts a Unix timestamp (number of seconds since 1970-01-01 UTC) to a timestamp with time zone.",
                "examples": [
                    "SELECT TO_TIMESTAMP(1672531200);",
                    "SELECT TO_TIMESTAMP(1672531200.456);",
                    "SELECT id, TO_CHAR(TO_TIMESTAMP(created_at), 'YYYY-MM-DD') AS created_date FROM events;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(ts, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_100_7",
        "database_name": "postgresql_100_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP",
        "target_query": "SELECT TO_TIMESTAMP('2001-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SSOF');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_TIMESTAMP('2023-06-15 10:30:45', 'YYYY-MM-DD HH24:MI:SS')",
                "description": "In PostgreSQL, TO_TIMESTAMP is used to convert a date-time string to a TIMESTAMP value, supporting both with and without timezone.",
                "examples": [
                    "SELECT TO_TIMESTAMP('2023-06-15 10:30:45', 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT TO_TIMESTAMP('2023-06-15 10:30:45+02:00', 'YYYY-MM-DD HH24:MI:SSOF');",
                    "SELECT TO_TIMESTAMP('2023-06-15 10:30:45', 'YYYY-MM-DD HH24:MI:SS') > TO_TIMESTAMP('2023-06-14 10:30:45', 'YYYY-MM-DD HH24:MI:SS');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_100_8",
        "database_name": "postgresql_100_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT TO_DAYS( '2001-01-01 00:00:00' ); -- TO_DAYS",
        "target_query": "SELECT (DATE '2001-01-01' - DATE '1970-01-01')::int + 719528;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TO_DAYS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_DAYS(date)",
                "description": "Returns the number of days since 0000-01-01 for a given date.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "(date - DATE '1970-01-01')::int + 719528",
                "description": "Computes the number of days since 0000-01-01 by offsetting from 1970-01-01.",
                "examples": [
                    "SELECT (DATE '2024-05-07' - DATE '1970-01-01')::int + 719528;",
                    "SELECT (CURRENT_DATE - DATE '1970-01-01')::int + 719528;",
                    "SELECT (DATE '1999-12-31' - DATE '1970-01-01')::int + 719528;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_100_9",
        "database_name": "postgresql_100_9",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT TO_DAYS( '2001-01-01 00:00:00' ); -- TO_DAYS",
        "target_query": "SELECT (DATE '2001-01-01' - DATE '1970-01-01')::int + 719528;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TO_DAYS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_DAYS(date)",
                "description": "Returns the number of days since 0000-01-01 for a given date.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "(date - DATE '1970-01-01')::int + 719528",
                "description": "Computes the number of days since 0000-01-01 by offsetting from 1970-01-01.",
                "examples": [
                    "SELECT (DATE '2024-05-07' - DATE '1970-01-01')::int + 719528;",
                    "SELECT (CURRENT_DATE - DATE '1970-01-01')::int + 719528;",
                    "SELECT (DATE '1999-12-31' - DATE '1970-01-01')::int + 719528;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_100_10",
        "database_name": "postgresql_100_10",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' ); -- DATEDIFF",
        "target_query": "SELECT EXTRACT(DAY FROM AGE('2007-12-31 23:59:59', '2007-12-30 00:00:00'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATEDIFF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATEDIFF(date1, date2)",
                "description": "Returns the number of days between two date or datetime expressions (date1 - date2), ignoring time part.",
                "examples": [
                    "SELECT DATEDIFF('2025-12-31', '2025-12-01');",
                    "SELECT DATEDIFF('2025-01-01', '2024-12-31');",
                    "SELECT DATEDIFF(NULL, '2025-01-01');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(DAY FROM DATE date1) - EXTRACT(DAY FROM DATE date2)",
                "description": "Calculates the number of days between two date. This is achieved by extracting the day component from the dates and subtracting the results.",
                "examples": [
                    "SELECT EXTRACT(DAY FROM DATE '2025-12-31') - EXTRACT(DAY FROM DATE '2025-12-01');",
                    "SELECT EXTRACT(DAY FROM DATE '2025-01-01') - EXTRACT(DAY FROM DATE '2024-12-31');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_100_11",
        "database_name": "postgresql_100_11",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' ); -- TIMEDIFF",
        "target_query": "SELECT (TIMESTAMP '2000-01-01 00:00:00' - TIMESTAMP '2000-01-01 00:00:00')::TIME;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMEDIFF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "(timestamp '2023-06-15 12:00:00' - timestamp '2023-06-15 10:00:00')::TIME",
                "description": "PostgreSQL does not have a direct TIMEDIFF function, but time differences can be calculated by subtracting one timestamp from another and casting the result to a TIME.",
                "examples": [
                    "SELECT (timestamp '2023-06-15 12:00:00' - timestamp '2023-06-15 10:00:00')::TIME;",
                    "SELECT (NOW() - timestamp '2023-06-15 10:00:00')::INTERVAL;",
                    "SELECT (timestamp '2023-06-15 12:00:00' - timestamp '2023-06-15 10:00:00')::INTERVAL;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_100_12",
        "database_name": "postgresql_100_12",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT DATE_FORMAT( '2009-10-10 23:59:59', '%W %M %Y' ); -- DATE_FORMAT",
        "target_query": "SELECT TO_CHAR(TIMESTAMP '2009-10-10 23:59:59', 'FMDay FMMonth YYYY');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_CHAR(date_expr, format_str)",
                "description": "Formats a date/time value according to a format string using PostgreSQL-style specifiers.",
                "examples": [
                    "SELECT TO_CHAR(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT TO_CHAR(DATE '2023-01-15', 'DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_100_13",
        "database_name": "postgresql_100_13",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT TIME( '2003-12-31 23:59:59' ); -- TIME",
        "target_query": "SELECT TO_CHAR(TIMESTAMP '2003-12-31 23:59:59', 'HH24:MI:SS');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_CHAR(time_expr, 'HH24:MI:SS')",
                "description": "In PostgreSQL, the time() function does not support SQLite-style modifiers directly within a function call. To modify time values, PostgreSQL uses the INTERVAL type for time adjustments, and the TO_CHAR function for formatting. The time expression returns the time formatted as 'HH:MI:SS'. Milliseconds can be included using 'SS.US' in the format string.",
                "examples": [
                    "SELECT TO_CHAR(NOW()::time, 'HH24:MI:SS'); -- Returns the current time formatted as 'HH:MM:SS'.",
                    "SELECT TO_CHAR(NOW()::time + INTERVAL '1 hour', 'HH24:MI:SS'); -- Returns the time one hour after the current time.",
                    "SELECT TO_CHAR('14:16:00'::time + INTERVAL '0.123 second', 'HH24:MI:SS.US'); -- Returns '14:16:00.123' with milliseconds."
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_100_14",
        "database_name": "postgresql_100_14",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT TIMESTAMP( '2003-12-31 23:59:59', '12:00:00' ); -- TIMESTAMP",
        "target_query": "SELECT TO_TIMESTAMP('2003-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS') + INTERVAL '12 hours';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_TIMESTAMP('2023-06-15 10:30:45', 'YYYY-MM-DD HH24:MI:SS')",
                "description": "In PostgreSQL, TO_TIMESTAMP is used to convert a date-time string to a TIMESTAMP value, supporting both with and without timezone.",
                "examples": [
                    "SELECT TO_TIMESTAMP('2023-06-15 10:30:45', 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT TO_TIMESTAMP('2023-06-15 10:30:45+02:00', 'YYYY-MM-DD HH24:MI:SSOF');",
                    "SELECT TO_TIMESTAMP('2023-06-15 10:30:45', 'YYYY-MM-DD HH24:MI:SS') > TO_TIMESTAMP('2023-06-14 10:30:45', 'YYYY-MM-DD HH24:MI:SS');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_100_15",
        "database_name": "postgresql_100_15",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:59:59' ); -- TIMESTAMPADD",
        "target_query": "SELECT TIMESTAMP '2003-01-02 23:59:59' + INTERVAL '1 minute';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMESTAMPADD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMPADD(unit, interval, datetime_expr)",
                "description": "Adds a time interval to a date or timestamp expression using the specified unit.",
                "examples": [
                    "SELECT TIMESTAMPADD(DAY, 2, '2023-01-01');",
                    "SELECT TIMESTAMPADD(MINUTE, -5, '2023-05-10 12:00:00');",
                    "SELECT TIMESTAMPADD(YEAR, 1, '2020-06-15');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "datetime_expr + INTERVAL 'n unit'",
                "description": "Adds a time interval to a timestamp or date using SQL standard INTERVAL syntax.",
                "examples": [
                    "SELECT DATE '2023-01-01' + INTERVAL '2 day';",
                    "SELECT TIMESTAMP '2023-05-10 12:00:00' + INTERVAL '-5 minute';",
                    "SELECT DATE '2020-06-15' + INTERVAL '1 year';"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_100_16",
        "database_name": "postgresql_100_16",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT TIMESTAMPDIFF(MONTH, '2003-02-01 23:59:59', '2003-05-01' ); -- TIMESTAMPDIFF",
        "target_query": "SELECT EXTRACT(MONTH FROM AGE('2003-05-01', '2003-02-01 23:59:59'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMESTAMPDIFF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMPDIFF(unit, datetime1, datetime2)",
                "description": "Returns the difference between two datetime values in the specified unit.",
                "examples": [
                    "SELECT TIMESTAMPDIFF(YEAR, '2001-01-01', '2005-01-01');  -- 4",
                    "SELECT TIMESTAMPDIFF(MONTH, '2020-01-01', '2020-03-01');  -- 2",
                    "SELECT TIMESTAMPDIFF(DAY, '2020-01-01', '2020-01-31');    -- 30"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(unit FROM AGE(datetime2, datetime1))",
                "description": "The AGE function in PostgreSQL returns the interval between two dates or timestamps. The order of arguments is reversed compared to other DBMSs, meaning the earlier date comes second in the AGE function. You can extract the difference in years, months, days, etc. from the interval.",
                "examples": [
                    "SELECT EXTRACT(YEAR FROM AGE('2005-01-01', '2001-01-01'));  -- 4",
                    "SELECT EXTRACT(MONTH FROM AGE('2020-03-01', '2020-01-01'));  -- 2",
                    "SELECT EXTRACT(DAY FROM AGE('2020-01-31', '2020-01-01'));    -- 30"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_100_17",
        "database_name": "postgresql_100_17",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT TO_SECONDS( '2009-11-29 23:59:59' ); -- TO_SECONDS",
        "target_query": "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2009-11-29 23:59:59') + 62167219200;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TO_SECONDS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the given datetime.",
                "examples": [
                    "SELECT TO_SECONDS('2000-01-01 00:00:00');",
                    "SELECT TO_SECONDS(NOW());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM ts) + 62167219200",
                "description": "Adds the number of seconds since year 1970 to the seconds between year 0 and 1970 to simulate TO_SECONDS.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2020-12-31 12:00:00') + 62167219200;",
                    "SELECT EXTRACT(EPOCH FROM NOW()) + 62167219200;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_100_18",
        "database_name": "postgresql_100_18",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT UNIX_TIMESTAMP( '2015-11-13 23:59:59' ); -- UNIX_TIMESTAMP",
        "target_query": "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp)",
                "description": "Extracts the number of seconds since the Unix epoch from a timestamp using the EPOCH keyword.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM current_timestamp);",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59+02:00');",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_101_3",
        "database_name": "postgresql_101_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select hex(s1) from t1; -- HEX",
        "target_query": "select encode(s1, 'hex') from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, bytea, )\n"
        ]
    },
    {
        "sql_id": "postgresql_101_7",
        "database_name": "postgresql_101_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select length(concat('*',s1,'*',s2,'*')) from t1; -- LENGTH, CONCAT",
        "target_query": "select octet_length('*' || s1 || '*' || s2 || '*') from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH",
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            },
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates multiple strings using either the || operator or the built-in CONCAT() function (from version 9.1 onwards). Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT name || '_' || id FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n(s2, blob, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, bytea, )\n(s2, bytea, )\n"
        ]
    },
    {
        "sql_id": "postgresql_101_11",
        "database_name": "postgresql_101_11",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select hex(s1),s2 from t1 order by s1,s2; -- HEX",
        "target_query": "select encode(s1, 'hex'), s2 from t1 order by s1, s2;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n(s2, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, bytea, )\n(s2, character varying(1), )\n"
        ]
    },
    {
        "sql_id": "postgresql_101_12",
        "database_name": "postgresql_101_12",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select convert(123456789,unsigned); -- CONVERT",
        "target_query": "select CAST(123456789 AS bigint);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONVERT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CAST(expression AS target_type)",
                "description": "PostgreSQL uses CAST for type conversion. No direct equivalent for CONVERT TO CHARACTER SET.",
                "examples": [
                    "SELECT CAST('Hello World' AS TEXT);",
                    "SELECT CAST(1234 AS TEXT);",
                    "SELECT column_name::TEXT FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, blob, )\n(s2, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, bytea, )\n(s2, character varying(1), )\n"
        ]
    },
    {
        "sql_id": "postgresql_102_2",
        "database_name": "postgresql_102_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW",
        "target_query": "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP::DATE, 1);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CAST()",
                "description": "In PostgreSQL, the DATE type can be cast directly from a DATETIME or TIMESTAMP using CAST.",
                "examples": [
                    "SELECT '2023-05-01 12:34:56'::DATE AS result;",
                    "SELECT CURRENT_DATE AS current_date_result;",
                    "SELECT CAST('2023-05-01' AS DATE) AS date_from_datetime;"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "In PostgreSQL, CURRENT_TIMESTAMP is used to retrieve the current date and time, equivalent to NOW() in MySQL and MariaDB.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_102_3",
        "database_name": "postgresql_102_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COUNT",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "In PostgreSQL, CURRENT_TIMESTAMP is used to retrieve the current date and time, equivalent to NOW() in MySQL and MariaDB.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_102_4",
        "database_name": "postgresql_102_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 VALUES (DATE(NOW()), 2); -- DATE, NOW",
        "target_query": "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP::DATE, 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CAST()",
                "description": "In PostgreSQL, the DATE type can be cast directly from a DATETIME or TIMESTAMP using CAST.",
                "examples": [
                    "SELECT '2023-05-01 12:34:56'::DATE AS result;",
                    "SELECT CURRENT_DATE AS current_date_result;",
                    "SELECT CAST('2023-05-01' AS DATE) AS date_from_datetime;"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "In PostgreSQL, CURRENT_TIMESTAMP is used to retrieve the current date and time, equivalent to NOW() in MySQL and MariaDB.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_102_5",
        "database_name": "postgresql_102_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COUNT",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "In PostgreSQL, CURRENT_TIMESTAMP is used to retrieve the current date and time, equivalent to NOW() in MySQL and MariaDB.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_102_6",
        "database_name": "postgresql_102_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW() AND b = 1; -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP AND b = 1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COUNT",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "In PostgreSQL, CURRENT_TIMESTAMP is used to retrieve the current date and time, equivalent to NOW() in MySQL and MariaDB.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_102_8",
        "database_name": "postgresql_102_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "CREATE TABLE t1 SELECT curdate() AS f1; -- CURDATE",
        "target_query": "CREATE TABLE t1 AS SELECT CURRENT_DATE AS f1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CURDATE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CURDATE()",
                "description": "Returns the current date without the time component.",
                "examples": [
                    "SELECT CURDATE();",
                    "SELECT CONCAT('Today\\'s date is: ', CURDATE());",
                    "SELECT 1 WHERE CURDATE() = CURDATE();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CURRENT_DATE",
                "description": "Returns the current date without the time component, equivalent to MySQL's CURDATE().",
                "examples": [
                    "SELECT CURRENT_DATE;",
                    "SELECT CONCAT('Today''s date is: ', CURRENT_DATE);",
                    "SELECT 1 WHERE CURRENT_DATE = CURRENT_DATE;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, date, )\n"
        ]
    },
    {
        "sql_id": "postgresql_102_18",
        "database_name": "postgresql_102_18",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT 1 FROM (SELECT MAKEDATE(2011,0)) a; -- MAKEDATE",
        "target_query": "SELECT 1 FROM (SELECT make_date(2011, 1, 1) + (0 - 1) * INTERVAL '1 day') a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "MAKEDATE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "make_date(year, 1, 1) + (day_of_year - 1) * INTERVAL '1 day'",
                "description": "Returns a date from the given year and day of the year, created by adding intervals.",
                "examples": [
                    "SELECT make_date(2009, 1, 1) + (1 - 1) * INTERVAL '1 day' AS first_day_of_year;",
                    "SELECT make_date(2025, 1, 1) + (100 - 1) * INTERVAL '1 day' AS specific_date;",
                    "SELECT make_date(2020, 1, 1) + (366 - 1) * INTERVAL '1 day' AS last_day_of_year;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_2_2",
        "database_name": "postgresql_2_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "WITH recursive qn as (select 1 as n, cast('x' as char(100)) as un union all select 1+n, concat(un,'x') from qn where n<10) select * from qn; -- CONCAT",
        "target_query": "WITH RECURSIVE qn AS (SELECT 1 AS n, CAST('x' AS varchar(100)) AS un UNION ALL SELECT 1 + n, (un || 'x')::varchar(100) FROM qn WHERE n < 10) SELECT * FROM qn;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates multiple strings using either the || operator or the built-in CONCAT() function (from version 9.1 onwards). Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT name || '_' || id FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(c, char(3), )\n(vc, varchar(3), )\n(b, binary(3), )\n(vb, varbinary(3), )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(c, character(3), )\n(vc, character varying(3), )\n(b, bytea, )\n(vb, bytea, )\n"
        ]
    },
    {
        "sql_id": "postgresql_3_2",
        "database_name": "postgresql_3_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT IF (COUNT(*) > 0, \"YES\", \"NO\") AS \"IMPLICIT COMMIT\" FROM trans; -- IF",
        "target_query": "SELECT CASE WHEN COUNT(*) > 0 THEN 'YES' ELSE 'NO' END AS \"IMPLICIT COMMIT\" FROM trans;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `trans`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `trans`\nColumns:\n(a, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_39_3",
        "database_name": "postgresql_39_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT IF( a = 1, a, a ) AS b FROM t1 ORDER BY field( b + 1, 1 ); -- IF, FIELD",
        "target_query": "SELECT * FROM (SELECT CASE WHEN a = 1 THEN a ELSE a END AS b FROM t1) AS sub ORDER BY COALESCE(array_position(ARRAY[1], b + 1), 0);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "FIELD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            },
            {
                "expression": "COALESCE(array_position(ARRAY[val1, val2, ..., valN], val), 0)",
                "description": "Returns the index (1-based) of 'val' in the array. Returns 0 if not found, to match MySQL FIELD() behavior.",
                "examples": [
                    "SELECT COALESCE(array_position(ARRAY['a', 'b', 'c'], 'c'), 0) AS result;",
                    "SELECT COALESCE(array_position(ARRAY['a', 'b', 'c'], 'x'), 0) AS result;",
                    "SELECT COALESCE(array_position(ARRAY['b', 'b', 'b'], 'b'), 0) AS result;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_39_4",
        "database_name": "postgresql_39_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT IF( a = 1, a, a ) AS b FROM t1 ORDER BY field( b, 1 ); -- IF, FIELD",
        "target_query": "SELECT * FROM (SELECT CASE WHEN a = 1 THEN a ELSE a END AS b FROM t1) AS sub ORDER BY COALESCE(array_position(ARRAY[1], b), 0);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "FIELD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            },
            {
                "expression": "COALESCE(array_position(ARRAY[val1, val2, ..., valN], val), 0)",
                "description": "Returns the index (1-based) of 'val' in the array. Returns 0 if not found, to match MySQL FIELD() behavior.",
                "examples": [
                    "SELECT COALESCE(array_position(ARRAY['a', 'b', 'c'], 'c'), 0) AS result;",
                    "SELECT COALESCE(array_position(ARRAY['a', 'b', 'c'], 'x'), 0) AS result;",
                    "SELECT COALESCE(array_position(ARRAY['b', 'b', 'b'], 'b'), 0) AS result;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_4_4",
        "database_name": "postgresql_4_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a::TEXT) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function works in the same way as MySQL, removing unwanted characters from the string. If no character is specified, spaces are removed by default.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, bigint unsigned, )\n(b, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, integer, PRI)\n(a, numeric(20,0), )\n(b, character varying(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_4_5",
        "database_name": "postgresql_4_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a::TEXT) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function works in the same way as MySQL, removing unwanted characters from the string. If no character is specified, spaces are removed by default.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, bigint unsigned, )\n(b, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, integer, PRI)\n(a, numeric(20,0), )\n(b, character varying(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_4_6",
        "database_name": "postgresql_4_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a::TEXT) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function works in the same way as MySQL, removing unwanted characters from the string. If no character is specified, spaces are removed by default.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, bigint unsigned, )\n(b, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, integer, PRI)\n(a, numeric(20,0), )\n(b, character varying(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_4_7",
        "database_name": "postgresql_4_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a::TEXT) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function works in the same way as MySQL, removing unwanted characters from the string. If no character is specified, spaces are removed by default.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, bigint unsigned, )\n(b, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, integer, PRI)\n(a, numeric(20,0), )\n(b, character varying(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_4_11",
        "database_name": "postgresql_4_11",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a) BETWEEN 0 and 0.9; -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE COALESCE(a) BETWEEN 0 AND 0.9;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function for NULL-handling.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ]
    },
    {
        "sql_id": "postgresql_4_12",
        "database_name": "postgresql_4_12",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a)=0.9; -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE COALESCE(a) = 0.9;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function for NULL-handling.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ]
    },
    {
        "sql_id": "postgresql_4_13",
        "database_name": "postgresql_4_13",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a) in (0.8,0.9); -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE COALESCE(a) IN (0.8, 0.9);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function for NULL-handling.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ]
    },
    {
        "sql_id": "postgresql_5_6",
        "database_name": "postgresql_5_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT USER(); -- USER",
        "target_query": "SELECT CURRENT_USER; -- USER",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "USER"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MySQL user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CURRENT_USER",
                "description": "Returns the current user executing the query. Similar to MySQL's USER().",
                "examples": [
                    "SELECT CURRENT_USER;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_6_3",
        "database_name": "postgresql_6_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT HEX(c1) FROM t1; -- HEX",
        "target_query": "SELECT encode(c1::bytea, 'hex') FROM t1; -- HEX",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, char(4), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, bytea, )\n"
        ]
    },
    {
        "sql_id": "postgresql_6_5",
        "database_name": "postgresql_6_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT",
        "target_query": "CREATE TABLE t1 AS SELECT repeat('a', 4000) a; -- REPEAT",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_6_12",
        "database_name": "postgresql_6_12",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT",
        "target_query": "CREATE TABLE head AS SELECT b1.b || b2.b AS head FROM t1 b1, t1 b2; -- CONCAT",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates multiple strings using either the || operator or the built-in CONCAT() function (from version 9.1 onwards). Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT name || '_' || id FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `head`\nColumns:\n(head, varchar(4), )\n",
            "Table: `t1`\nColumns:\n(b, varchar(2), )\n"
        ],
        "target_related_schemas": [
            "Table: `head`\nColumns:\n(head, text, )\n",
            "Table: `t1`\nColumns:\n(b, character varying(2), )\n"
        ]
    },
    {
        "sql_id": "postgresql_6_13",
        "database_name": "postgresql_6_13",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT",
        "target_query": "CREATE TABLE tail AS SELECT b1.b || b2.b AS tail FROM t1 b1, t1 b2; -- CONCAT",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates multiple strings using either the || operator or the built-in CONCAT() function (from version 9.1 onwards). Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT name || '_' || id FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `head`\nColumns:\n(head, varchar(4), )\n",
            "Table: `t1`\nColumns:\n(b, varchar(2), )\n",
            "Table: `tail`\nColumns:\n(tail, varchar(4), )\n"
        ],
        "target_related_schemas": [
            "Table: `head`\nColumns:\n(head, text, )\n",
            "Table: `t1`\nColumns:\n(b, character varying(2), )\n",
            "Table: `tail`\nColumns:\n(tail, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_6_18",
        "database_name": "postgresql_6_18",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "UPDATE IGNORE t1 SET a=unhex(code); -- UNHEX",
        "target_query": "UPDATE t1 SET a = decode(code, 'hex') WHERE a <> ''; -- UNHEX",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNHEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "decode(str, 'hex')",
                "description": "Decodes a hexadecimal string into binary (bytea) using the decode function.",
                "examples": [
                    "SELECT encode(decode('4D7953514C', 'hex'), 'hex');",
                    "SELECT decode('48656C6C6F', 'hex');",
                    "SELECT decode(NULL, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(code, text, )\n(a, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_6_19",
        "database_name": "postgresql_6_19",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=2; -- OCTET_LENGTH",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a <> '' AND OCTET_LENGTH(a) = 2; -- OCTET_LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "OCTET_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(code, text, )\n(a, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_6_20",
        "database_name": "postgresql_6_20",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT * FROM t1 WHERE CHAR_LENGTH(a)=2; -- CHAR_LENGTH",
        "target_query": "SELECT * FROM t1 WHERE CHAR_LENGTH(a) = 2; -- CHAR_LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CHAR_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in the string, not bytes.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in a string.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(code, text, )\n(a, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_6_21",
        "database_name": "postgresql_6_21",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=3; -- OCTET_LENGTH",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a <> '' AND OCTET_LENGTH(a) = 3; -- OCTET_LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "OCTET_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(code, varchar(6), )\n(a, varchar(1), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(code, text, )\n(a, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_7_4",
        "database_name": "postgresql_7_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT c1, LENGTH(c1) FROM h; -- LENGTH",
        "target_query": "SELECT c1, octet_length(c1) FROM h; -- LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, character(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_7_5",
        "database_name": "postgresql_7_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD",
        "target_query": "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, character(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_7_6",
        "database_name": "postgresql_7_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD",
        "target_query": "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, character(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_7_9",
        "database_name": "postgresql_7_9",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT INSTR(c1, 'h') FROM h; -- INSTR",
        "target_query": "SELECT POSITION('h' in c1) FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "POSITION(substr IN str)",
                "description": "Returns the 1-based index of substr in str. Returns 0 if not found. NULL if either argument is NULL.",
                "examples": [
                    "SELECT POSITION('bar' IN 'foobar');   -- Returns 4",
                    "SELECT POSITION('x' IN 'abc');        -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, character(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_7_10",
        "database_name": "postgresql_7_10",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT INSTR(c1, '') FROM h; -- INSTR",
        "target_query": "SELECT POSITION('' in c1) FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "POSITION(substr IN str)",
                "description": "Returns the 1-based index of substr in str. Returns 0 if not found. NULL if either argument is NULL.",
                "examples": [
                    "SELECT POSITION('bar' IN 'foobar');   -- Returns 4",
                    "SELECT POSITION('x' IN 'abc');        -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, character(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_7_11",
        "database_name": "postgresql_7_11",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT INSTR(c1, '52') FROM h; -- INSTR",
        "target_query": "SELECT POSITION('52' in c1) FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "POSITION(substr IN str)",
                "description": "Returns the 1-based index of substr in str. Returns 0 if not found. NULL if either argument is NULL.",
                "examples": [
                    "SELECT POSITION('bar' IN 'foobar');   -- Returns 4",
                    "SELECT POSITION('x' IN 'abc');        -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, character(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_7_12",
        "database_name": "postgresql_7_12",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT INSTR(c1, '54') FROM h; -- INSTR",
        "target_query": "SELECT POSITION('54' in c1) FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "POSITION(substr IN str)",
                "description": "Returns the 1-based index of substr in str. Returns 0 if not found. NULL if either argument is NULL.",
                "examples": [
                    "SELECT POSITION('bar' IN 'foobar');   -- Returns 4",
                    "SELECT POSITION('x' IN 'abc');        -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, character(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_7_13",
        "database_name": "postgresql_7_13",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT INSTR(c1, '31') FROM h; -- INSTR",
        "target_query": "SELECT POSITION('31' in c1) FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "POSITION(substr IN str)",
                "description": "Returns the 1-based index of substr in str. Returns 0 if not found. NULL if either argument is NULL.",
                "examples": [
                    "SELECT POSITION('bar' IN 'foobar');   -- Returns 4",
                    "SELECT POSITION('x' IN 'abc');        -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, character(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_7_23",
        "database_name": "postgresql_7_23",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT c1, TRIM(c1) FROM h; -- TRIM",
        "target_query": "SELECT c1, TRIM(c1) FROM h; -- TRIM",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function works in the same way as MySQL, removing unwanted characters from the string. If no character is specified, spaces are removed by default.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `h`\nColumns:\n(c1, char(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `h`\nColumns:\n(c1, character(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_71_0",
        "database_name": "postgresql_71_0",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select from_unixtime(123456789); -- FROM_UNIXTIME",
        "target_query": "SELECT TO_TIMESTAMP(123456789);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_TIMESTAMP(unix_timestamp)",
                "description": "Converts a Unix timestamp (number of seconds since 1970-01-01 UTC) to a timestamp with time zone.",
                "examples": [
                    "SELECT TO_TIMESTAMP(1672531200);",
                    "SELECT TO_TIMESTAMP(1672531200.456);",
                    "SELECT id, TO_CHAR(TO_TIMESTAMP(created_at), 'YYYY-MM-DD') AS created_date FROM events;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_71_1",
        "database_name": "postgresql_71_1",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select from_unixtime(234567890); -- FROM_UNIXTIME",
        "target_query": "SELECT TO_TIMESTAMP(234567890);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_TIMESTAMP(unix_timestamp)",
                "description": "Converts a Unix timestamp (number of seconds since 1970-01-01 UTC) to a timestamp with time zone.",
                "examples": [
                    "SELECT TO_TIMESTAMP(1672531200);",
                    "SELECT TO_TIMESTAMP(1672531200.456);",
                    "SELECT id, TO_CHAR(TO_TIMESTAMP(created_at), 'YYYY-MM-DD') AS created_date FROM events;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_71_2",
        "database_name": "postgresql_71_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select from_unixtime(1); -- FROM_UNIXTIME",
        "target_query": "SELECT TO_TIMESTAMP(1);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_TIMESTAMP(unix_timestamp)",
                "description": "Converts a Unix timestamp (number of seconds since 1970-01-01 UTC) to a timestamp with time zone.",
                "examples": [
                    "SELECT TO_TIMESTAMP(1672531200);",
                    "SELECT TO_TIMESTAMP(1672531200.456);",
                    "SELECT id, TO_CHAR(TO_TIMESTAMP(created_at), 'YYYY-MM-DD') AS created_date FROM events;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_71_3",
        "database_name": "postgresql_71_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select unix_timestamp(from_unixtime(123456789)); -- UNIX_TIMESTAMP, FROM_UNIXTIME",
        "target_query": "SELECT EXTRACT(EPOCH FROM TO_TIMESTAMP(123456789));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP",
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp)",
                "description": "Extracts the number of seconds since the Unix epoch from a timestamp using the EPOCH keyword.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM current_timestamp);",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59+02:00');",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "TO_TIMESTAMP(unix_timestamp)",
                "description": "Converts a Unix timestamp (number of seconds since 1970-01-01 UTC) to a timestamp with time zone.",
                "examples": [
                    "SELECT TO_TIMESTAMP(1672531200);",
                    "SELECT TO_TIMESTAMP(1672531200.456);",
                    "SELECT id, TO_CHAR(TO_TIMESTAMP(created_at), 'YYYY-MM-DD') AS created_date FROM events;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_71_4",
        "database_name": "postgresql_71_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select unix_timestamp(from_unixtime(234567890)); -- UNIX_TIMESTAMP, FROM_UNIXTIME",
        "target_query": "SELECT EXTRACT(EPOCH FROM TO_TIMESTAMP(234567890));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP",
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp)",
                "description": "Extracts the number of seconds since the Unix epoch from a timestamp using the EPOCH keyword.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM current_timestamp);",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59+02:00');",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "TO_TIMESTAMP(unix_timestamp)",
                "description": "Converts a Unix timestamp (number of seconds since 1970-01-01 UTC) to a timestamp with time zone.",
                "examples": [
                    "SELECT TO_TIMESTAMP(1672531200);",
                    "SELECT TO_TIMESTAMP(1672531200.456);",
                    "SELECT id, TO_CHAR(TO_TIMESTAMP(created_at), 'YYYY-MM-DD') AS created_date FROM events;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_71_5",
        "database_name": "postgresql_71_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select unix_timestamp('2039-01-20 01:00:00'); -- UNIX_TIMESTAMP",
        "target_query": "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2039-01-20 01:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp)",
                "description": "Extracts the number of seconds since the Unix epoch from a timestamp using the EPOCH keyword.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM current_timestamp);",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59+02:00');",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_71_6",
        "database_name": "postgresql_71_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select unix_timestamp('2038-02-10 01:00:00'); -- UNIX_TIMESTAMP",
        "target_query": "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-02-10 01:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp)",
                "description": "Extracts the number of seconds since the Unix epoch from a timestamp using the EPOCH keyword.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM current_timestamp);",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59+02:00');",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_71_7",
        "database_name": "postgresql_71_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select unix_timestamp('1970-01-01 01:00:00'),unix_timestamp('1970-01-01 01:00:01'),unix_timestamp('2038-01-19 04:14:07'),unix_timestamp('2038-01-19 04:14:08'); -- UNIX_TIMESTAMP",
        "target_query": "SELECT EXTRACT(EPOCH FROM TIMESTAMP '1970-01-01 01:00:00'), EXTRACT(EPOCH FROM TIMESTAMP '1970-01-01 01:00:01'), EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07'), EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:08');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp)",
                "description": "Extracts the number of seconds since the Unix epoch from a timestamp using the EPOCH keyword.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM current_timestamp);",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59+02:00');",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_71_11",
        "database_name": "postgresql_71_11",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT a, FROM_UNIXTIME(a) FROM t1; -- FROM_UNIXTIME",
        "target_query": "SELECT a, TO_TIMESTAMP(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_TIMESTAMP(unix_timestamp)",
                "description": "Converts a Unix timestamp (number of seconds since 1970-01-01 UTC) to a timestamp with time zone.",
                "examples": [
                    "SELECT TO_TIMESTAMP(1672531200);",
                    "SELECT TO_TIMESTAMP(1672531200.456);",
                    "SELECT id, TO_CHAR(TO_TIMESTAMP(created_at), 'YYYY-MM-DD') AS created_date FROM events;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, bigint, )\n"
        ]
    },
    {
        "sql_id": "postgresql_71_13",
        "database_name": "postgresql_71_13",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT UNIX_TIMESTAMP(\"3001-01-19 08:59:59\"); -- UNIX_TIMESTAMP",
        "target_query": "SELECT EXTRACT(EPOCH FROM TIMESTAMP '3001-01-19 08:59:59');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp)",
                "description": "Extracts the number of seconds since the Unix epoch from a timestamp using the EPOCH keyword.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM current_timestamp);",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59+02:00');",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_72_4",
        "database_name": "postgresql_72_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "EXPLAIN SELECT * FROM t WHERE CONCAT(x,x) = 'XX'; -- CONCAT",
        "target_query": "EXPLAIN SELECT * FROM t WHERE x || x = 'XX';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates multiple strings using either the || operator or the built-in CONCAT() function (from version 9.1 onwards). Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT name || '_' || id FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(x, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(x, character varying(10), )\n"
        ]
    },
    {
        "sql_id": "postgresql_74_2",
        "database_name": "postgresql_74_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "insert into t1(f1) select if(max(f1) is null, '2000',max(f1)) from t1; -- IF, MAX",
        "target_query": "INSERT INTO t1(f1) SELECT CASE WHEN MAX(f1) IS NULL THEN '2000' ELSE MAX(f1) END FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "MAX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "MAX(expr)",
                "description": "Returns the maximum value of the expression in an aggregation context.",
                "examples": [
                    "SELECT MAX(10), MAX(5), MAX(20);",
                    "SELECT MAX('apple'), MAX('banana'), MAX('pear');",
                    "SELECT MAX(ABS(-5)), MAX(ABS(3));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            },
            {
                "expression": "MAX(expr)",
                "description": "Returns the largest value of the expression across input rows.",
                "examples": [
                    "SELECT MAX(100), MAX(50), MAX(75);",
                    "SELECT MAX('mango'), MAX('kiwi'), MAX('grape');",
                    "SELECT MAX(CEIL(1.2)), MAX(CEIL(2.8));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, varchar(5), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, character varying(5), )\n"
        ]
    },
    {
        "sql_id": "postgresql_74_6",
        "database_name": "postgresql_74_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH",
        "target_query": "SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='13_characters') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c, varchar(30), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c, character varying(30), )\n"
        ]
    },
    {
        "sql_id": "postgresql_74_9",
        "database_name": "postgresql_74_9",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH",
        "target_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='13_characters') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c, varchar(30), )\n",
            "Table: `t2`\nColumns:\n(d, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c, character varying(30), )\n",
            "Table: `t2`\nColumns:\n(d, character varying(10), )\n"
        ]
    },
    {
        "sql_id": "postgresql_74_10",
        "database_name": "postgresql_74_10",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='7_chars') FROM t1; -- LENGTH",
        "target_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='7_chars') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c, varchar(30), )\n",
            "Table: `t2`\nColumns:\n(d, varchar(10), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c, character varying(30), )\n",
            "Table: `t2`\nColumns:\n(d, character varying(10), )\n"
        ]
    },
    {
        "sql_id": "postgresql_74_16",
        "database_name": "postgresql_74_16",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT *, HEX(a) FROM t1; -- HEX",
        "target_query": "SELECT *, encode(a::bytea, 'hex') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, varchar(100), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, integer, PRI)\n(a, character varying(100), )\n"
        ]
    },
    {
        "sql_id": "postgresql_74_17",
        "database_name": "postgresql_74_17",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT *, HEX(a) FROM t1 WHERE a = 'abc-def'; -- HEX",
        "target_query": "SELECT *, encode(a::bytea, 'hex') FROM t1 WHERE a = 'abc-def';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, PRI)\n(a, varchar(100), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, integer, PRI)\n(a, character varying(100), )\n"
        ]
    },
    {
        "sql_id": "postgresql_75_2",
        "database_name": "postgresql_75_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 VALUES('valid-string',1),(UNHEX('11'),2); -- UNHEX",
        "target_query": "INSERT INTO t1 VALUES('valid-string', 1), (decode('11', 'hex'), 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNHEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "decode(str, 'hex')",
                "description": "Decodes a hexadecimal string into binary (bytea) using the decode function.",
                "examples": [
                    "SELECT encode(decode('4D7953514C', 'hex'), 'hex');",
                    "SELECT decode('48656C6C6F', 'hex');",
                    "SELECT decode(NULL, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(tx, text, )\n(pk, int, PRI)\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(tx, text, )\n(pk, integer, PRI)\n"
        ]
    },
    {
        "sql_id": "postgresql_75_3",
        "database_name": "postgresql_75_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT pk,OCTET_LENGTH(tx),LENGTH(tx) FROM t1; -- OCTET_LENGTH, LENGTH",
        "target_query": "SELECT pk, OCTET_LENGTH(tx), octet_length(tx) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "OCTET_LENGTH",
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            },
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            },
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(tx, text, )\n(pk, int, PRI)\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(tx, text, )\n(pk, integer, PRI)\n"
        ]
    },
    {
        "sql_id": "postgresql_76_2",
        "database_name": "postgresql_76_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "insert ignore t1 values (1, repeat('a',110), repeat('b', 210)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (1, REPEAT('a',110), REPEAT('b', 210)) ON CONFLICT DO NOTHING;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n(a, char(200), UNI)\n(b, text, UNI)\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, integer, )\n(a, character(200), )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_76_3",
        "database_name": "postgresql_76_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select i, length(a), length(b), char_length(a), char_length(b) from t1; -- LENGTH, CHAR_LENGTH",
        "target_query": "SELECT i, octet_length(a), octet_length(b), char_length(a), char_length(b) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH",
            "CHAR_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in the string, not bytes.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            },
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in a string.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n(a, char(200), UNI)\n(b, text, UNI)\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, integer, )\n(a, character(200), )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_76_6",
        "database_name": "postgresql_76_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "insert into t1 values(1, 'a', 'a', NOW()), (1, 'b', 'b', NOW()); -- NOW",
        "target_query": "INSERT INTO t1 VALUES (1, 'a', 'a', CURRENT_TIMESTAMP), (1, 'b', 'b', CURRENT_TIMESTAMP);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "In PostgreSQL, CURRENT_TIMESTAMP is used to retrieve the current date and time, equivalent to NOW() in MySQL and MariaDB.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, int, )\n(c2, char(12), )\n(c3, varchar(123), )\n(c4, timestamp, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, integer, )\n(c2, character(12), )\n(c3, character varying(123), )\n(c4, timestamp without time zone, )\n"
        ]
    },
    {
        "sql_id": "postgresql_77_3",
        "database_name": "postgresql_77_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select t1.time,t1.date,t1.timestamp,concat(date,\" \",time),t1.quarter+t1.week, t1.year+timestampadd,  timestampdiff from t1; -- CONCAT",
        "target_query": "select t1.time,t1.date,t1.timestamp,date || ' ' || time,t1.quarter+t1.week, t1.year+timestampadd,  timestampdiff from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates multiple strings using either the || operator or the built-in CONCAT() function (from version 9.1 onwards). Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT name || '_' || id FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(time, time, )\n(date, date, )\n(timestamp, timestamp, )\n(quarter, int, )\n(week, int, )\n(year, int, )\n(timestampadd, int, )\n(timestampdiff, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(time, time without time zone, )\n(date, date, )\n(timestamp, timestamp without time zone, )\n(quarter, integer, )\n(week, integer, )\n(year, integer, )\n(timestampadd, integer, )\n(timestampdiff, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_78_2",
        "database_name": "postgresql_78_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select concat('|',a,'|'), concat('|',b,'|') from t1; -- CONCAT",
        "target_query": "SELECT '|' || a || '|', '|' || b || '|' FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates multiple strings using either the || operator or the built-in CONCAT() function (from version 9.1 onwards). Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT name || '_' || id FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, text, )\n(b, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, text, )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_78_5",
        "database_name": "postgresql_78_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT HEX(val) FROM t1; -- HEX",
        "target_query": "SELECT encode(val::bytea, 'hex') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(val, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(val, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_78_8",
        "database_name": "postgresql_78_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT HEX(a) FROM t1; -- HEX",
        "target_query": "SELECT encode(a::bytea, 'hex') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, character varying(20), )\n"
        ]
    },
    {
        "sql_id": "postgresql_79_3",
        "database_name": "postgresql_79_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT a, date_format(a,'%a') as abday, dayname(a) as day FROM t1 ORDER BY a; -- DATE_FORMAT, DAYNAME",
        "target_query": "SELECT a, TO_CHAR(a, 'Dy') as abday, TO_CHAR(a, 'Day') as day FROM t1 ORDER BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT",
            "DAYNAME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            },
            {
                "expression": "DAYNAME(date)",
                "description": "Returns the full name of the day for a given date.",
                "examples": [
                    "SELECT DAYNAME('2023-11-25');",
                    "SELECT DAYNAME('2022-01-01');",
                    "SELECT DAYNAME('1999-03-14');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_CHAR(date_expr, format_str)",
                "description": "Formats a date/time value according to a format string using PostgreSQL-style specifiers.",
                "examples": [
                    "SELECT TO_CHAR(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT TO_CHAR(DATE '2023-01-15', 'DD-MM-YYYY');"
                ]
            },
            {
                "expression": "TO_CHAR(date, 'Day')",
                "description": "Returns the full name of the day for a given date using the TO_CHAR function.",
                "examples": [
                    "SELECT TO_CHAR('2023-11-25'::DATE, 'Day');",
                    "SELECT TO_CHAR('2022-01-01'::DATE, 'Day');",
                    "SELECT TO_CHAR('1999-03-14'::DATE, 'Day');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n"
        ]
    },
    {
        "sql_id": "postgresql_79_7",
        "database_name": "postgresql_79_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT a, date_format(a,'%b') as abmon, monthname(a) as mon FROM t1 ORDER BY a; -- DATE_FORMAT, MONTHNAME",
        "target_query": "SELECT a, TO_CHAR(a, 'Mon') as abmon, TO_CHAR(a, 'Month') as mon FROM t1 ORDER BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT",
            "MONTHNAME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            },
            {
                "expression": "MONTHNAME(date)",
                "description": "Returns the full English name of the month for a given date.",
                "examples": [
                    "SELECT MONTHNAME(DATE '2023-05-01') AS mon1;",
                    "SELECT MONTHNAME(STR_TO_DATE('2024-12-31', '%Y-%m-%d')) AS mon2;",
                    "SELECT MONTHNAME(NOW()) AS current_month;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_CHAR(date_expr, format_str)",
                "description": "Formats a date/time value according to a format string using PostgreSQL-style specifiers.",
                "examples": [
                    "SELECT TO_CHAR(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT TO_CHAR(DATE '2023-01-15', 'DD-MM-YYYY');"
                ]
            },
            {
                "expression": "TO_CHAR(date, 'Month')",
                "description": "Returns the full English name of the month for a given date using formatting.",
                "examples": [
                    "SELECT TO_CHAR(DATE '2023-05-01', 'Month') AS mon1;",
                    "SELECT TO_CHAR(TO_DATE('2024-12-31', 'YYYY-MM-DD'), 'Month') AS mon2;",
                    "SELECT TO_CHAR(CURRENT_DATE, 'Month') AS current_month;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, date, )\n"
        ]
    },
    {
        "sql_id": "postgresql_79_9",
        "database_name": "postgresql_79_9",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT DATE_FORMAT('2001-01-01', '%w %a %W'); -- DATE_FORMAT",
        "target_query": "SELECT TO_CHAR('2001-01-01'::DATE, 'ID Dy WW');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_CHAR(date_expr, format_str)",
                "description": "Formats a date/time value according to a format string using PostgreSQL-style specifiers.",
                "examples": [
                    "SELECT TO_CHAR(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT TO_CHAR(DATE '2023-01-15', 'DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_79_10",
        "database_name": "postgresql_79_10",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT DATE_FORMAT('2001-01-01', '%c %b %M'); -- DATE_FORMAT",
        "target_query": "SELECT TO_CHAR('2001-01-01'::DATE, 'MM Mon Month');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_CHAR(date_expr, format_str)",
                "description": "Formats a date/time value according to a format string using PostgreSQL-style specifiers.",
                "examples": [
                    "SELECT TO_CHAR(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT TO_CHAR(DATE '2023-01-15', 'DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_79_11",
        "database_name": "postgresql_79_11",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT DATE_FORMAT('2010-03-23 11:00:00','%h %p'); -- DATE_FORMAT",
        "target_query": "SELECT TO_CHAR('2010-03-23 11:00:00'::TIMESTAMP, 'HH12 AM');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_CHAR(date_expr, format_str)",
                "description": "Formats a date/time value according to a format string using PostgreSQL-style specifiers.",
                "examples": [
                    "SELECT TO_CHAR(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT TO_CHAR(DATE '2023-01-15', 'DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_8_0",
        "database_name": "postgresql_8_0",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP",
        "target_query": "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "PostgreSQL does not have a direct STRCMP function. The equivalent behavior can be achieved using a CASE statement to compare two strings lexicographically and return -1, 0, or 1 based on the comparison.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_8_1",
        "database_name": "postgresql_8_1",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP",
        "target_query": "SELECT CASE WHEN 'ss' = '' THEN 0 WHEN 'ss' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'ss' THEN 0 WHEN '' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 's' = 'sss' THEN 0 WHEN 's' < 'sss' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'ssq' THEN 0 WHEN 'q' < 'ssq' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "PostgreSQL does not have a direct STRCMP function. The equivalent behavior can be achieved using a CASE statement to compare two strings lexicographically and return -1, 0, or 1 based on the comparison.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_8_2",
        "database_name": "postgresql_8_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP",
        "target_query": "SELECT CASE WHEN '' = 'af' THEN 0 WHEN '' < 'af' THEN -1 ELSE 1 END, CASE WHEN 'a' = '' THEN 0 WHEN 'a' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeq' THEN 0 WHEN '' < 'aeq' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeaeq' THEN 0 WHEN '' < 'aeaeq' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "PostgreSQL does not have a direct STRCMP function. The equivalent behavior can be achieved using a CASE statement to compare two strings lexicographically and return -1, 0, or 1 based on the comparison.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_8_3",
        "database_name": "postgresql_8_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP",
        "target_query": "SELECT CASE WHEN 'ss' = 'a' THEN 0 WHEN 'ss' < 'a' THEN -1 ELSE 1 END, CASE WHEN '' = 'ssa' THEN 0 WHEN '' < 'ssa' THEN -1 ELSE 1 END, CASE WHEN 'sa' = 'sssb' THEN 0 WHEN 'sa' < 'sssb' THEN -1 ELSE 1 END, CASE WHEN 's' = '' THEN 0 WHEN 's' < '' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "PostgreSQL does not have a direct STRCMP function. The equivalent behavior can be achieved using a CASE statement to compare two strings lexicographically and return -1, 0, or 1 based on the comparison.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_8_4",
        "database_name": "postgresql_8_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP",
        "target_query": "SELECT CASE WHEN '' = 'o' THEN 0 WHEN '' < 'o' THEN -1 ELSE 1 END, CASE WHEN '' = 'u' THEN 0 WHEN '' < 'u' THEN -1 ELSE 1 END, CASE WHEN '' = 'oeb' THEN 0 WHEN '' < 'oeb' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "PostgreSQL does not have a direct STRCMP function. The equivalent behavior can be achieved using a CASE statement to compare two strings lexicographically and return -1, 0, or 1 based on the comparison.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_8_5",
        "database_name": "postgresql_8_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcmp('aeaeq',''); -- STRCMP",
        "target_query": "SELECT CASE WHEN 'af' = '' THEN 0 WHEN 'af' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'a' THEN 0 WHEN '' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = '' THEN 0 WHEN 'aeq' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeaeq' = '' THEN 0 WHEN 'aeaeq' < '' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "PostgreSQL does not have a direct STRCMP function. The equivalent behavior can be achieved using a CASE statement to compare two strings lexicographically and return -1, 0, or 1 based on the comparison.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_8_6",
        "database_name": "postgresql_8_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select strcmp('a','ss'),strcmp('ssa',''),strcmp('sssb','sa'),strcmp('','s'); -- STRCMP",
        "target_query": "SELECT CASE WHEN 'a' = 'ss' THEN 0 WHEN 'a' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 'ssa' = '' THEN 0 WHEN 'ssa' < '' THEN -1 ELSE 1 END, CASE WHEN 'sssb' = 'sa' THEN 0 WHEN 'sssb' < 'sa' THEN -1 ELSE 1 END, CASE WHEN '' = 's' THEN 0 WHEN '' < 's' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "PostgreSQL does not have a direct STRCMP function. The equivalent behavior can be achieved using a CASE statement to compare two strings lexicographically and return -1, 0, or 1 based on the comparison.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_8_7",
        "database_name": "postgresql_8_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select strcmp('u','a'),strcmp('u',''); -- STRCMP",
        "target_query": "SELECT CASE WHEN 'u' = 'a' THEN 0 WHEN 'u' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'u' = '' THEN 0 WHEN 'u' < '' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "PostgreSQL does not have a direct STRCMP function. The equivalent behavior can be achieved using a CASE statement to compare two strings lexicographically and return -1, 0, or 1 based on the comparison.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_8_8",
        "database_name": "postgresql_8_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select strcmp('s', 'a'), strcmp('a', 'x'); -- STRCMP",
        "target_query": "SELECT CASE WHEN 's' = 'a' THEN 0 WHEN 's' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'a' = 'x' THEN 0 WHEN 'a' < 'x' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "PostgreSQL does not have a direct STRCMP function. The equivalent behavior can be achieved using a CASE statement to compare two strings lexicographically and return -1, 0, or 1 based on the comparison.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_8_13",
        "database_name": "postgresql_8_13",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT FIELD('ue',s1), FIELD('',s1), s1='ue', s1='' FROM t1; -- FIELD",
        "target_query": "SELECT COALESCE(array_position(ARRAY[s1], 'ue'), 0), COALESCE(array_position(ARRAY[s1], ''), 0), s1 = 'ue', s1 = '' FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FIELD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(array_position(ARRAY[val1, val2, ..., valN], val), 0)",
                "description": "Returns the index (1-based) of 'val' in the array. Returns 0 if not found, to match MySQL FIELD() behavior.",
                "examples": [
                    "SELECT COALESCE(array_position(ARRAY['a', 'b', 'c'], 'c'), 0) AS result;",
                    "SELECT COALESCE(array_position(ARRAY['a', 'b', 'c'], 'x'), 0) AS result;",
                    "SELECT COALESCE(array_position(ARRAY['b', 'b', 'b'], 'b'), 0) AS result;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, char(5), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, character(5), )\n"
        ]
    },
    {
        "sql_id": "postgresql_8_17",
        "database_name": "postgresql_8_17",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select * from t1 where length(s1)=2 and s1='oe'; -- LENGTH",
        "target_query": "SELECT * FROM t1 WHERE octet_length(s1) = 2 AND s1 = 'oe';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, char(5), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(s1, character(5), )\n"
        ]
    },
    {
        "sql_id": "postgresql_80_0",
        "database_name": "postgresql_80_0",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, 5, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_1",
        "database_name": "postgresql_80_1",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_2",
        "database_name": "postgresql_80_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_3",
        "database_name": "postgresql_80_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_4",
        "database_name": "postgresql_80_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_5",
        "database_name": "postgresql_80_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD('a', 5, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_6",
        "database_name": "postgresql_80_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_7",
        "database_name": "postgresql_80_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD('a', 0, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_8",
        "database_name": "postgresql_80_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD('a', 0, '') AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_9",
        "database_name": "postgresql_80_9",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD('', 0, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD('', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_10",
        "database_name": "postgresql_80_10",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD('', 0, '') AS result; -- LPAD",
        "target_query": "SELECT LPAD('', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_11",
        "database_name": "postgresql_80_11",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD('a', -1, 'x'); -- LPAD",
        "target_query": "SELECT LPAD('a', -1, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_12",
        "database_name": "postgresql_80_12",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD('123', 5, 'x'); -- LPAD",
        "target_query": "SELECT LPAD('123', 5, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_13",
        "database_name": "postgresql_80_13",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD('a', 5, 'xy'); -- LPAD",
        "target_query": "SELECT LPAD('a', 5, 'xy');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_14",
        "database_name": "postgresql_80_14",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD(\"I LOVE SQL\", 20, \" \"); -- LPAD",
        "target_query": "SELECT LPAD('I LOVE SQL', 20, ' ');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_80_15",
        "database_name": "postgresql_80_15",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LPAD(\"I LOVE SQL in the morning\", 20, \" \"); -- LPAD",
        "target_query": "SELECT LPAD('I LOVE SQL in the morning', 20, ' ');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached, just like in MySQL.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_81_2",
        "database_name": "postgresql_81_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, longtext, )\n(f2, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, text, )\n(f2, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_81_15",
        "database_name": "postgresql_81_15",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT SUM(LENGTH(f1)) FROM t1; -- LENGTH",
        "target_query": "SELECT SUM(octet_length(f1)) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, longtext, )\n(f2, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(f1, text, )\n(f2, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_82_3",
        "database_name": "postgresql_82_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT COALESCE(d, d), IFNULL(d, d), IF(i, d, d),CASE i WHEN i THEN d ELSE d END, GREATEST(d, d), LEAST(d, d)FROM t1 ORDER BY RAND(); -- COALESCE, IFNULL, IF, GREATEST, LEAST",
        "target_query": "SELECT COALESCE(d, d), COALESCE(d, d), CASE WHEN i IS NOT NULL AND i > 0 THEN d ELSE d END, CASE i WHEN i THEN d ELSE d END, GREATEST(d, d), LEAST(d, d) FROM t1 ORDER BY RANDOM();",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE",
            "IFNULL",
            "IF",
            "GREATEST",
            "LEAST"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            },
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            },
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function for NULL-handling.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;"
                ]
            },
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "PostgreSQL uses COALESCE, which returns the first non-NULL argument. This works exactly like IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            },
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            },
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest non-null value among its arguments. NULL values are ignored unless all values are NULL.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n(d, date, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, integer, )\n(d, date, )\n"
        ]
    },
    {
        "sql_id": "postgresql_83_3",
        "database_name": "postgresql_83_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT HEX(c1) FROM AB; -- HEX",
        "target_query": "SELECT encode(c1::bytea, 'hex') FROM AB;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `AB`\nColumns:\n(c1, char(100), )\n"
        ],
        "target_related_schemas": [
            "Table: `ab`\nColumns:\n(c1, character(100), )\n"
        ]
    },
    {
        "sql_id": "postgresql_84_2",
        "database_name": "postgresql_84_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "insert into t5 values (1, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "INSERT INTO t5 VALUES (1, TO_CHAR(DATE '2001-01-01', 'Day'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_CHAR(date_expr, format_str)",
                "description": "Formats a date/time value according to a format string using PostgreSQL-style specifiers.",
                "examples": [
                    "SELECT TO_CHAR(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT TO_CHAR(DATE '2023-01-15', 'DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, int, )\n(c2, varchar(128), )\n"
        ],
        "target_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, integer, )\n(c2, character varying(128), )\n"
        ]
    },
    {
        "sql_id": "postgresql_84_3",
        "database_name": "postgresql_84_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "insert into t5 values (2, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "INSERT INTO t5 VALUES (2, TO_CHAR(DATE '2001-01-01', 'Day'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_CHAR(date_expr, format_str)",
                "description": "Formats a date/time value according to a format string using PostgreSQL-style specifiers.",
                "examples": [
                    "SELECT TO_CHAR(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT TO_CHAR(DATE '2023-01-15', 'DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, int, )\n(c2, varchar(128), )\n"
        ],
        "target_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, integer, )\n(c2, character varying(128), )\n"
        ]
    },
    {
        "sql_id": "postgresql_84_4",
        "database_name": "postgresql_84_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "insert into t5 values (3, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "INSERT INTO t5 VALUES (3, TO_CHAR(DATE '2001-01-01', 'Day'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_CHAR(date_expr, format_str)",
                "description": "Formats a date/time value according to a format string using PostgreSQL-style specifiers.",
                "examples": [
                    "SELECT TO_CHAR(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT TO_CHAR(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT TO_CHAR(DATE '2023-01-15', 'DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, int, )\n(c2, varchar(128), )\n"
        ],
        "target_related_schemas": [
            "Table: `t5`\nColumns:\n(c1, integer, )\n(c2, character varying(128), )\n"
        ]
    },
    {
        "sql_id": "postgresql_84_8",
        "database_name": "postgresql_84_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select hex(a) from t1; -- HEX",
        "target_query": "SELECT encode(a::bytea, 'hex') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(64), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, character varying(64), )\n"
        ]
    },
    {
        "sql_id": "postgresql_84_11",
        "database_name": "postgresql_84_11",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 VALUES (1,USER()); -- USER",
        "target_query": "INSERT INTO t1 VALUES (1, CURRENT_USER);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "USER"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MySQL user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CURRENT_USER",
                "description": "Returns the current user executing the query. Similar to MySQL's USER().",
                "examples": [
                    "SELECT CURRENT_USER;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, char(64), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, character(64), )\n"
        ]
    },
    {
        "sql_id": "postgresql_85_2",
        "database_name": "postgresql_85_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_85_3",
        "database_name": "postgresql_85_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_85_4",
        "database_name": "postgresql_85_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_85_5",
        "database_name": "postgresql_85_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_85_6",
        "database_name": "postgresql_85_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LENGTH(c1) FROM t1; -- LENGTH",
        "target_query": "SELECT octet_length(c1) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c1, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_86_1",
        "database_name": "postgresql_86_1",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select NULL=NULL,NULL<>NULL,IFNULL(NULL,1.1)+0,IFNULL(NULL,1) | 0; -- IFNULL",
        "target_query": "SELECT NULL = NULL, NULL <> NULL, COALESCE(NULL, 1.1) + 0, COALESCE(NULL, 1) | 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "PostgreSQL uses COALESCE, which returns the first non-NULL argument. This works exactly like IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_86_2",
        "database_name": "postgresql_86_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select strcmp(\"a\",NULL),(1<NULL),NULL regexp \"a\",null like \"a%\",\"a%\" like null; -- STRCMP",
        "target_query": "SELECT CASE WHEN 'a' = NULL THEN 0 WHEN 'a' < NULL THEN -1 ELSE 1 END, (1 < NULL), NULL ~ 'a', NULL LIKE 'a%', 'a%' LIKE NULL;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "PostgreSQL does not have a direct STRCMP function. The equivalent behavior can be achieved using a CASE statement to compare two strings lexicographically and return -1, 0, or 1 based on the comparison.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_86_3",
        "database_name": "postgresql_86_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select repeat(\"a\",0),repeat(\"ab\",5+5),repeat(\"ab\",-1),reverse(NULL); -- REPEAT",
        "target_query": "SELECT REPEAT('a', 0), REPEAT('ab', 5 + 5), REPEAT('ab', -1), REVERSE(NULL);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_86_4",
        "database_name": "postgresql_86_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select field(NULL,\"a\",\"b\",\"c\"); -- FIELD",
        "target_query": "SELECT COALESCE(array_position(ARRAY['a', 'b', 'c'], NULL), 0);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FIELD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(array_position(ARRAY[val1, val2, ..., valN], val), 0)",
                "description": "Returns the index (1-based) of 'val' in the array. Returns 0 if not found, to match MySQL FIELD() behavior.",
                "examples": [
                    "SELECT COALESCE(array_position(ARRAY['a', 'b', 'c'], 'c'), 0) AS result;",
                    "SELECT COALESCE(array_position(ARRAY['a', 'b', 'c'], 'x'), 0) AS result;",
                    "SELECT COALESCE(array_position(ARRAY['b', 'b', 'b'], 'b'), 0) AS result;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_86_9",
        "database_name": "postgresql_86_9",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(a, b) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 AS SELECT COALESCE(a, b) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "PostgreSQL uses COALESCE, which returns the first non-NULL argument. This works exactly like IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, decimal(1,0), )\n(b, decimal(1,0), )\n",
            "Table: `t2`\nColumns:\n(IFNULL(a, b), decimal(1,0), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, numeric(1,0), )\n(b, numeric(1,0), )\n",
            "Table: `t2`\nColumns:\n(coalesce, numeric(1,0), )\n"
        ]
    },
    {
        "sql_id": "postgresql_86_11",
        "database_name": "postgresql_86_11",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(a, NULL) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 AS SELECT COALESCE(a, NULL) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "PostgreSQL uses COALESCE, which returns the first non-NULL argument. This works exactly like IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, decimal(1,0), )\n(b, decimal(1,0), )\n",
            "Table: `t2`\nColumns:\n(IFNULL(a, NULL), decimal(1,0), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, numeric(1,0), )\n(b, numeric(1,0), )\n",
            "Table: `t2`\nColumns:\n(coalesce, numeric(1,0), )\n"
        ]
    },
    {
        "sql_id": "postgresql_86_13",
        "database_name": "postgresql_86_13",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(NULL, b) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 AS SELECT COALESCE(NULL, b) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "PostgreSQL uses COALESCE, which returns the first non-NULL argument. This works exactly like IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, decimal(1,0), )\n(b, decimal(1,0), )\n",
            "Table: `t2`\nColumns:\n(IFNULL(NULL, b), decimal(1,0), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, numeric(1,0), )\n(b, numeric(1,0), )\n",
            "Table: `t2`\nColumns:\n(coalesce, numeric(1,0), )\n"
        ]
    },
    {
        "sql_id": "postgresql_87_2",
        "database_name": "postgresql_87_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, character varying(10), )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_87_3",
        "database_name": "postgresql_87_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT GROUP_CONCAT(a) FROM t1; -- GROUP_CONCAT",
        "target_query": "SELECT STRING_AGG(a, ',') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "GROUP_CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The GROUP_CONCAT([DISTINCT] expr [,expr ...]  [ORDER BY {unsigned_integer | col_name | expr}  [ASC | DESC] [,col_name ...]]  [SEPARATOR str_val])\nfunction returns a string result with the concatenated non-NULL values from a group.\nDISTINGUISHED keyword can be used to eliminate duplicate values.\nORDER BY clause can be used to sort the values.\nSEPARATOR keyword specifies the separator between values, default is comma(,).\nThe maximum length of the result is controlled by group_concat_max_len system variable, default is 1024.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRING_AGG(expression, delimiter)",
                "description": "The STRING_AGG function in PostgreSQL concatenates values from multiple rows into a single string, separated by a specified delimiter.",
                "examples": [
                    "SELECT STRING_AGG(name, ', ') FROM students; -- Returns a comma-separated list of names"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(10), )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, character varying(10), )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_87_5",
        "database_name": "postgresql_87_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT UNIX_TIMESTAMP(); -- UNIX_TIMESTAMP",
        "target_query": "SELECT EXTRACT(EPOCH FROM current_timestamp);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp)",
                "description": "Extracts the number of seconds since the Unix epoch from a timestamp using the EPOCH keyword.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM current_timestamp);",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2015-11-13 23:59:59+02:00');",
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_88_0",
        "database_name": "postgresql_88_0",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select repeat('a',2000); -- REPEAT",
        "target_query": "select repeat('a',2000);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_88_1",
        "database_name": "postgresql_88_1",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") as len; -- LENGTH",
        "target_query": "SELECT octet_length('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') as len;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_88_2",
        "database_name": "postgresql_88_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select length(repeat('a',2000)); -- LENGTH, REPEAT",
        "target_query": "select octet_length(repeat('a',2000));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH",
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_88_9",
        "database_name": "postgresql_88_9",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT c11, LENGTH(c12) FROM t1; -- LENGTH",
        "target_query": "SELECT c11, octet_length(c12) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c11, int, )\n(c12, longtext, )\n",
            "Table: `t2`\nColumns:\n(c21, int, )\n(c22, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c11, integer, )\n(c12, text, )\n",
            "Table: `t2`\nColumns:\n(c21, integer, )\n(c22, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_89_3",
        "database_name": "postgresql_89_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select hex(a) from t1 where a like 'A_'; -- HEX",
        "target_query": "select encode(a::bytea, 'hex') from t1 where a like 'A_';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(50), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, character varying(50), )\n"
        ]
    },
    {
        "sql_id": "postgresql_89_5",
        "database_name": "postgresql_89_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "explain select hex(a) from t1 where a like 'A_'; -- HEX",
        "target_query": "explain select encode(a::bytea, 'hex') from t1 where a like 'A_';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(50), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, character varying(50), )\n"
        ]
    },
    {
        "sql_id": "postgresql_89_6",
        "database_name": "postgresql_89_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select hex(a) from t1; -- HEX",
        "target_query": "select encode(a::bytea, 'hex') from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "to_hex(N) \u6216 encode(BYTEA, 'hex')",
                "description": "Converts integers using to_hex() and binary data (BYTEA) using encode(..., 'hex') to hexadecimal representation.",
                "examples": [
                    "SELECT to_hex(255);",
                    "SELECT encode('abc'::bytea, 'hex');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, varchar(50), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, character varying(50), )\n"
        ]
    },
    {
        "sql_id": "postgresql_89_8",
        "database_name": "postgresql_89_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "create table t1 as select to_seconds(null) as to_seconds; -- TO_SECONDS",
        "target_query": "create table t1 as select (EXTRACT(EPOCH FROM NULL::timestamp) + 62167219200) as to_seconds;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TO_SECONDS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the given datetime.",
                "examples": [
                    "SELECT TO_SECONDS('2000-01-01 00:00:00');",
                    "SELECT TO_SECONDS(NOW());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM ts) + 62167219200",
                "description": "Adds the number of seconds since year 1970 to the seconds between year 0 and 1970 to simulate TO_SECONDS.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2020-12-31 12:00:00') + 62167219200;",
                    "SELECT EXTRACT(EPOCH FROM NOW()) + 62167219200;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(to_seconds, bigint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(to_seconds, numeric, )\n"
        ]
    },
    {
        "sql_id": "postgresql_9_0",
        "database_name": "postgresql_9_0",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF",
        "target_query": "SELECT CASE WHEN FALSE THEN 'ERROR' ELSE 'this' END, CASE WHEN TRUE THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, (CASE WHEN TRUE THEN 2 ELSE 3 END), (CASE WHEN TRUE THEN 2.0 ELSE 3.0 END) + 0; -- AE",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_9_4",
        "database_name": "postgresql_9_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF",
        "target_query": "SELECT CASE WHEN TRUE THEN st ELSE st END AS s FROM t1 ORDER BY s;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(st, character varying(255), )\n(u, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_9_5",
        "database_name": "postgresql_9_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF",
        "target_query": "SELECT CASE WHEN u = 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(st, character varying(255), )\n(u, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_9_7",
        "database_name": "postgresql_9_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select nullif(u, 1) from t1; -- NULLIF",
        "target_query": "select nullif(u, 1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(EXTRACT(YEAR FROM DATE '2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(st, character varying(255), )\n(u, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_9_8",
        "database_name": "postgresql_9_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "explain select nullif(u, 1) from t1; -- NULLIF",
        "target_query": "explain select nullif(u, 1) from t1; -- AE",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(EXTRACT(YEAR FROM DATE '2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(st, varchar(255), )\n(u, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(st, character varying(255), )\n(u, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_9_12",
        "database_name": "postgresql_9_12",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select sum(if(num is null,0.00,num)) from t1; -- IF",
        "target_query": "SELECT SUM(CASE WHEN num IS NULL THEN 0.00 ELSE num END) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(num, double(12,2), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(num, numeric(12,2), )\n"
        ]
    },
    {
        "sql_id": "postgresql_9_16",
        "database_name": "postgresql_9_16",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF",
        "target_query": "SELECT MIN(CASE WHEN y - x > 5 THEN y ELSE NULL END), MAX(CASE WHEN y - x > 5 THEN y ELSE NULL END) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(x, int, )\n(y, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(x, integer, )\n(y, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_9_18",
        "database_name": "postgresql_9_18",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF",
        "target_query": "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- AE",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(EXTRACT(YEAR FROM DATE '2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_9_21",
        "database_name": "postgresql_9_21",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord ASC; -- IF, FROM_UNIXTIME",
        "target_query": "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE TO_CHAR(TO_TIMESTAMP(date), 'DD-MM-YYYY') END AS date_ord, text FROM t1 ORDER BY date_ord ASC;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            },
            {
                "expression": "TO_TIMESTAMP(unix_timestamp)",
                "description": "Converts a Unix timestamp (number of seconds since 1970-01-01 UTC) to a timestamp with time zone.",
                "examples": [
                    "SELECT TO_TIMESTAMP(1672531200);",
                    "SELECT TO_TIMESTAMP(1672531200.456);",
                    "SELECT id, TO_CHAR(TO_TIMESTAMP(created_at), 'YYYY-MM-DD') AS created_date FROM events;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, )\n(date, int, )\n(text, varchar(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, integer, )\n(date, integer, )\n(text, character varying(32), )\n"
        ]
    },
    {
        "sql_id": "postgresql_9_22",
        "database_name": "postgresql_9_22",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord DESC; -- IF, FROM_UNIXTIME",
        "target_query": "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE TO_CHAR(TO_TIMESTAMP(date), 'DD-MM-YYYY') END AS date_ord, text FROM t1 ORDER BY date_ord DESC;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            },
            {
                "expression": "TO_TIMESTAMP(unix_timestamp)",
                "description": "Converts a Unix timestamp (number of seconds since 1970-01-01 UTC) to a timestamp with time zone.",
                "examples": [
                    "SELECT TO_TIMESTAMP(1672531200);",
                    "SELECT TO_TIMESTAMP(1672531200.456);",
                    "SELECT id, TO_CHAR(TO_TIMESTAMP(created_at), 'YYYY-MM-DD') AS created_date FROM events;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(id, int, )\n(date, int, )\n(text, varchar(32), )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(id, integer, )\n(date, integer, )\n(text, character varying(32), )\n"
        ]
    },
    {
        "sql_id": "postgresql_9_26",
        "database_name": "postgresql_9_26",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT * FROM (SELECT MAX(IF(1, CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IF",
        "target_query": "SELECT * FROM (SELECT MAX(CASE WHEN TRUE THEN CAST(c AS NUMERIC) ELSE 0 END) FROM t1) AS te;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "In PostgreSQL, `IF` is not directly supported. Instead, the `CASE WHEN` expression is used to evaluate a condition and return different values based on whether the condition is true or false.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_9_27",
        "database_name": "postgresql_9_27",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT * FROM (SELECT MAX(IFNULL(CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IFNULL",
        "target_query": "SELECT * FROM (SELECT MAX(COALESCE(CAST(c AS NUMERIC), 0)) FROM t1) AS te;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "PostgreSQL uses COALESCE, which returns the first non-NULL argument. This works exactly like IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(c, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(c, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_9_29",
        "database_name": "postgresql_9_29",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT AVG(NULLIF(YEAR('2001-01-01'),10)); -- NULLIF, YEAR",
        "target_query": "SELECT AVG(NULLIF(EXTRACT(YEAR FROM DATE '2001-01-01'),10)); -- AE",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF",
            "YEAR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            },
            {
                "expression": "YEAR(date)",
                "description": "Extracts the year from a date or datetime and returns it as an integer.",
                "examples": [
                    "SELECT YEAR('2023-04-10');",
                    "SELECT YEAR(NOW());",
                    "SELECT YEAR('2022-03-15');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(EXTRACT(YEAR FROM DATE '2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            },
            {
                "expression": "EXTRACT(YEAR FROM date)",
                "description": "Extracts the year from a date or datetime and returns it as an integer.",
                "examples": [
                    "SELECT EXTRACT(YEAR FROM DATE '2023-04-10');",
                    "SELECT EXTRACT(YEAR FROM CURRENT_DATE);",
                    "SELECT EXTRACT(YEAR FROM DATE '2022-03-15');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_90_0",
        "database_name": "postgresql_90_0",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT FROM_DAYS(3652499), FROM_DAYS(3652500), FROM_DAYS(3652501); -- FROM_DAYS",
        "target_query": "SELECT DATE '1970-01-01' + (3652499 - 719528) * INTERVAL '1 day', DATE '1970-01-01' + (3652500 - 719528) * INTERVAL '1 day', DATE '1970-01-01' + (3652501 - 719528) * INTERVAL '1 day';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_DAYS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE '1970-01-01' + (n - 719528) * INTERVAL '1 day'",
                "description": "Simulates MySQL's FROM_DAYS(n) by interpreting n as the number of days since '0000-01-01', then adjusting from PostgreSQL's base date '1970-01-01' (which corresponds to day number 719528).",
                "examples": [
                    "SELECT DATE '1970-01-01' + (1 - 719528) * INTERVAL '1 day';",
                    "SELECT DATE '1970-01-01' + (730000 - 719528) * INTERVAL '1 day';",
                    "SELECT 'Date is: ' || (DATE '1970-01-01' + (738000 - 719528) * INTERVAL '1 day');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_90_1",
        "database_name": "postgresql_90_1",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT FROM_DAYS(42949670), FROM_DAYS(42949671), FROM_DAYS(42949673); -- FROM_DAYS",
        "target_query": "SELECT DATE '1970-01-01' + (42949670 - 719528) * INTERVAL '1 day', DATE '1970-01-01' + (42949671 - 719528) * INTERVAL '1 day', DATE '1970-01-01' + (42949673 - 719528) * INTERVAL '1 day';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_DAYS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE '1970-01-01' + (n - 719528) * INTERVAL '1 day'",
                "description": "Simulates MySQL's FROM_DAYS(n) by interpreting n as the number of days since '0000-01-01', then adjusting from PostgreSQL's base date '1970-01-01' (which corresponds to day number 719528).",
                "examples": [
                    "SELECT DATE '1970-01-01' + (1 - 719528) * INTERVAL '1 day';",
                    "SELECT DATE '1970-01-01' + (730000 - 719528) * INTERVAL '1 day';",
                    "SELECT 'Date is: ' || (DATE '1970-01-01' + (738000 - 719528) * INTERVAL '1 day');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_91_2",
        "database_name": "postgresql_91_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000)); -- REPEAT",
        "target_query": "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(i, int, )\n(b, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(i, integer, )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_91_4",
        "database_name": "postgresql_91_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT LENGTH(b) FROM (SELECT * FROM t INTERSECT SELECT * FROM t) derived; -- LENGTH",
        "target_query": "SELECT octet_length(b) FROM (SELECT * FROM t INTERSECT SELECT * FROM t) derived;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the number of bytes in a string. Use this instead of 'length()' to replicate MySQL's LENGTH() behavior.",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t`\nColumns:\n(i, int, )\n(b, longtext, )\n"
        ],
        "target_related_schemas": [
            "Table: `t`\nColumns:\n(i, integer, )\n(b, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_92_2",
        "database_name": "postgresql_92_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT argument FROM test_log WHERE argument LIKE CONCAT('%azun','dris%'); -- CONCAT",
        "target_query": "SELECT argument FROM test_log WHERE argument LIKE '%azun' || 'dris%';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates multiple strings using either the || operator or the built-in CONCAT() function (from version 9.1 onwards). Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT name || '_' || id FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `test_log`\nColumns:\n(argument, text, )\n"
        ],
        "target_related_schemas": [
            "Table: `test_log`\nColumns:\n(argument, text, )\n"
        ]
    },
    {
        "sql_id": "postgresql_93_0",
        "database_name": "postgresql_93_0",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select row(10,2,3) IN (row(3,2,3), row(1,2,3), row(1,3,3)); -- ROW",
        "target_query": "SELECT ROW(10,2,3) IN (ROW(3,2,3), ROW(1,2,3), ROW(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_1",
        "database_name": "postgresql_93_1",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select row(1,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3)); -- ROW",
        "target_query": "SELECT ROW(1,2,3) IN (ROW(3,NULL,3), ROW(1,2,3), ROW(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_2",
        "database_name": "postgresql_93_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select row(10,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3)); -- ROW",
        "target_query": "SELECT ROW(10,2,3) IN (ROW(3,NULL,3), ROW(1,2,3), ROW(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_12",
        "database_name": "postgresql_93_12",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(4,5))); -- ROW",
        "target_query": "SELECT ROW(1,2,ROW(3,NULL)) IN (ROW(3,2,ROW(3,4)), ROW(1,2,ROW(4,5)));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_14",
        "database_name": "postgresql_93_14",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(1,2,3)=ROW(1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)=ROW(1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_15",
        "database_name": "postgresql_93_15",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(2,2,3)=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(2,2,3)=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_16",
        "database_name": "postgresql_93_16",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(1,2,3)=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_17",
        "database_name": "postgresql_93_17",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(1,2,3)<ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)<ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_18",
        "database_name": "postgresql_93_18",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(1,2,3)>ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)>ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_19",
        "database_name": "postgresql_93_19",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(1,2,3)<=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)<=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_20",
        "database_name": "postgresql_93_20",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(1,2,3)>=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)>=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_21",
        "database_name": "postgresql_93_21",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(1,2,3)<>ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)<>ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_22",
        "database_name": "postgresql_93_22",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(NULL,2,3)=ROW(NULL,2,3); -- ROW",
        "target_query": "SELECT ROW(NULL,2,3)=ROW(NULL,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_23",
        "database_name": "postgresql_93_23",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(1,2,ROW(3,4,5))=ROW(1,2,ROW(3,4,5)); -- ROW",
        "target_query": "SELECT ROW(1,2,ROW(3,4,5))=ROW(1,2,ROW(3,4,5));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_24",
        "database_name": "postgresql_93_24",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW('test',2,3.33)=ROW('test',2,3.33); -- ROW",
        "target_query": "SELECT ROW('test',2,3.33)=ROW('test',2,3.33);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_25",
        "database_name": "postgresql_93_25",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,33)); -- ROW",
        "target_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,33));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_93_26",
        "database_name": "postgresql_93_26",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,3)); -- ROW",
        "target_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_94_3",
        "database_name": "postgresql_94_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select * from t1 where ROW(1,2,3)=ROW(a,b,c); -- ROW",
        "target_query": "select * from t1 where ROW(1,2,3)=ROW(a,b,c);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, integer, )\n(c, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_94_4",
        "database_name": "postgresql_94_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select * from t1 where ROW(0,2,3)=ROW(a,b,c); -- ROW",
        "target_query": "select * from t1 where ROW(0,2,3)=ROW(a,b,c);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, integer, )\n(c, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_94_5",
        "database_name": "postgresql_94_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select * from t1 where ROW(1,2,3)<ROW(a,b,c); -- ROW",
        "target_query": "select * from t1 where ROW(1,2,3)<ROW(a,b,c);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, integer, )\n(c, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_94_6",
        "database_name": "postgresql_94_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select ROW(a,2,3) IN(row(1,b,c), row(2,3,1)) from t1; -- ROW",
        "target_query": "select ROW(a,2,3) IN(row(1,b,c), row(2,3,1)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, integer, )\n(c, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_94_7",
        "database_name": "postgresql_94_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select ROW(c,2,3) IN(row(1,b,a), row(2,3,1)) from t1; -- ROW",
        "target_query": "select ROW(c,2,3) IN(row(1,b,a), row(2,3,1)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, integer, )\n(c, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_94_8",
        "database_name": "postgresql_94_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select ROW(a,b,c) IN(row(1,2,3), row(3,2,1)) from t1; -- ROW",
        "target_query": "select ROW(a,b,c) IN(row(1,2,3), row(3,2,1)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, integer, )\n(c, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_94_9",
        "database_name": "postgresql_94_9",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "select ROW(1,2,3) IN(row(a,b,c), row(1,2,3)) from t1; -- ROW",
        "target_query": "select ROW(1,2,3) IN(row(a,b,c), row(1,2,3)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n(c, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, integer, )\n(c, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_94_11",
        "database_name": "postgresql_94_11",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(1,1,1) = ROW(1,1,1), ROW(1,1,1) = ROW(1,2,1), ROW(1,NULL,1) = ROW(2,2,1), ROW(1,NULL,1) = ROW(1,2,2), ROW(1,NULL,1) = ROW(1,2,1) ; -- ROW",
        "target_query": "SELECT ROW(1,1,1) = ROW(1,1,1), ROW(1,1,1) = ROW(1,2,1), ROW(1,NULL,1) = ROW(2,2,1), ROW(1,NULL,1) = ROW(1,2,2), ROW(1,NULL,1) = ROW(1,2,1);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_95_3",
        "database_name": "postgresql_95_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 1) FROM t1 GROUP BY a; -- ROW",
        "target_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 1) FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_95_4",
        "database_name": "postgresql_95_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 3) FROM t1 GROUP BY a; -- ROW",
        "target_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 3) FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_95_8",
        "database_name": "postgresql_95_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT 1 FROM t1 WHERE ROW(a, b) >=ROW('1', (SELECT 1 FROM t1 WHERE a > '1234')); -- ROW",
        "target_query": "SELECT 1 FROM t1 WHERE ROW(a, b) >= ROW('1', (SELECT 1 FROM t1 WHERE a > '1234'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, tinyint, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, smallint, )\n"
        ]
    },
    {
        "sql_id": "postgresql_95_12",
        "database_name": "postgresql_95_12",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(1,2) = (SELECT 1,2 FROM t1 WHERE 1 = 0); -- ROW",
        "target_query": "SELECT ROW(1,2) = (SELECT 1,2 FROM t1 WHERE 1 = 0);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_95_13",
        "database_name": "postgresql_95_13",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT ROW(1,2) = (SELECT 1,3 FROM t1 WHERE 1 = 0); -- ROW",
        "target_query": "SELECT ROW(1,2) = (SELECT 1,3 FROM t1 WHERE 1 = 0);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(i, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(i, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_95_18",
        "database_name": "postgresql_95_18",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "EXPLAIN SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a; -- ROW",
        "target_query": "EXPLAIN SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_95_19",
        "database_name": "postgresql_95_19",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a; -- ROW",
        "target_query": "SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "PostgreSQL supports ROW to group multiple values, and comparisons can be made using IN or equality checks. Subqueries must return only one column.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_96_0",
        "database_name": "postgresql_96_0",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, 5, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_1",
        "database_name": "postgresql_96_1",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_2",
        "database_name": "postgresql_96_2",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_3",
        "database_name": "postgresql_96_3",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_4",
        "database_name": "postgresql_96_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_5",
        "database_name": "postgresql_96_5",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD('a', 5, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_6",
        "database_name": "postgresql_96_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_7",
        "database_name": "postgresql_96_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD('a', 0, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_8",
        "database_name": "postgresql_96_8",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD('a', 0, '') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_9",
        "database_name": "postgresql_96_9",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD('', 0, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_10",
        "database_name": "postgresql_96_10",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD('', 0, '') AS result; -- RPAD",
        "target_query": "SELECT RPAD('', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_11",
        "database_name": "postgresql_96_11",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD('a', -1, 'x'); -- RPAD",
        "target_query": "SELECT RPAD('a', -1, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_12",
        "database_name": "postgresql_96_12",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD('123456787890', 1, 'x'); -- RPAD",
        "target_query": "SELECT RPAD('123456787890', 1, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_13",
        "database_name": "postgresql_96_13",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD('a', 5, 'xy'); -- RPAD",
        "target_query": "SELECT RPAD('a', 5, 'xy');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_14",
        "database_name": "postgresql_96_14",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD(\"I LOVE SQL\", 20, \" \"); -- RPAD",
        "target_query": "SELECT RPAD('I LOVE SQL', 20, ' ');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_96_15",
        "database_name": "postgresql_96_15",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT RPAD(\"I LOVE SQL in the morning\", 20, \" \"); -- RPAD",
        "target_query": "SELECT RPAD('I LOVE SQL in the morning', 20, ' ');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "PostgreSQL doesn't have a native RPAD, but can simulate it.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123::text, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "postgresql_97_6",
        "database_name": "postgresql_97_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3)); -- ISNULL",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS NULL;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ISNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "expr IS NULL",
                "description": "Standard SQL syntax for checking if a value is NULL.",
                "examples": [
                    "SELECT NULL IS NULL;",
                    "SELECT (5 + NULL) IS NULL;",
                    "SELECT CASE WHEN score IS NULL THEN 'N/A' ELSE score::text END FROM students;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_97_7",
        "database_name": "postgresql_97_7",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3)); -- ISNULL",
        "target_query": "SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS NULL;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ISNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "expr IS NULL",
                "description": "Standard SQL syntax for checking if a value is NULL.",
                "examples": [
                    "SELECT NULL IS NULL;",
                    "SELECT (5 + NULL) IS NULL;",
                    "SELECT CASE WHEN score IS NULL THEN 'N/A' ELSE score::text END FROM students;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_98_4",
        "database_name": "postgresql_98_4",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS CHAR) = CAST(t2.a AS CHAR)) > 0; -- UUID",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE gen_random_uuid()::TEXT = t2.a::TEXT) > 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UUID"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UUID()",
                "description": "In MySQL, the UUID() function generates a unique 128-bit identifier, typically represented as a string containing numbers and letters, in the standard UUID format.",
                "examples": [
                    "SELECT UUID();",
                    "SELECT CONCAT(UUID(), 'some_random_string');",
                    "SELECT UPPER(UUID());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "gen_random_uuid()",
                "description": "In PostgreSQL, the gen_random_uuid() function generates a unique UUID. It requires the pgcrypto extension to be installed.",
                "examples": [
                    "SELECT gen_random_uuid();",
                    "SELECT CONCAT(gen_random_uuid(), 'some_random_string');"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(x, int, )\n(y, int, )\n",
            "Table: `t2`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(x, integer, )\n(y, integer, )\n",
            "Table: `t2`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_98_14",
        "database_name": "postgresql_98_14",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE",
        "target_query": "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function for NULL-handling.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n",
            "Table: `t3`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n",
            "Table: `t3`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_98_15",
        "database_name": "postgresql_98_15",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE",
        "target_query": "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function for NULL-handling.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n",
            "Table: `t3`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n",
            "Table: `t3`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_98_16",
        "database_name": "postgresql_98_16",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- IFNULL",
        "target_query": "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "PostgreSQL uses COALESCE, which returns the first non-NULL argument. This works exactly like IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n",
            "Table: `t3`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n",
            "Table: `t3`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_98_17",
        "database_name": "postgresql_98_17",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "EXPLAIN SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- IFNULL",
        "target_query": "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "PostgreSQL uses COALESCE, which returns the first non-NULL argument. This works exactly like IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `t1`\nColumns:\n(a, int, )\n",
            "Table: `t3`\nColumns:\n(a, int, )\n(b, int, )\n"
        ],
        "target_related_schemas": [
            "Table: `t1`\nColumns:\n(a, integer, )\n",
            "Table: `t3`\nColumns:\n(a, integer, )\n(b, integer, )\n"
        ]
    },
    {
        "sql_id": "postgresql_99_6",
        "database_name": "postgresql_99_6",
        "source_dialect": "mysql",
        "target_dialect": "postgresql",
        "source_query": "SELECT TRIM(f1), COUNT(*) FROM table_varchar_pad_space GROUP BY f1; -- TRIM, COUNT",
        "target_query": "SELECT TRIM(f1), COUNT(*) FROM table_varchar_pad_space GROUP BY f1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM",
            "COUNT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            },
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function works in the same way as MySQL, removing unwanted characters from the string. If no character is specified, spaces are removed by default.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            },
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            }
        ],
        "source_related_schemas": [
            "Table: `table_varchar_pad_space`\nColumns:\n(f1, varchar(20), )\n"
        ],
        "target_related_schemas": [
            "Table: `table_varchar_pad_space`\nColumns:\n(f1, character varying(20), )\n"
        ]
    }
]
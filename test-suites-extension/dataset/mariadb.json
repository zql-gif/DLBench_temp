[
    {
        "sql_id": "mariadb_1_6",
        "database_name": "mariadb_1_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE (a, b) IN (ROW(1, 10)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) IN (ROW (1, 10));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t0(a INT, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t0(a INT, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_1_7",
        "database_name": "mariadb_1_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE (a, b) IN (VALUES ROW(1, 10), ROW(2, 20)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) IN (ROW (1, 10), ROW (2, 20));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t0(a INT, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t0(a INT, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_1_8",
        "database_name": "mariadb_1_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (VALUES ROW(1, 10)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (ROW (1, 10));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t0(a INT, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t0(a INT, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_1_9",
        "database_name": "mariadb_1_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (VALUES ROW(1, 10), ROW(2, 20)); -- ROW",
        "target_query": "SELECT * FROM t0 WHERE (a, b) NOT IN (ROW (1, 10), ROW (2, 20));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t0(a INT, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t0(a INT, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_100_2",
        "database_name": "mariadb_100_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 01:00')); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 01:00'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (ts int);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (ts int);"
        ]
    },
    {
        "sql_id": "mariadb_100_3",
        "database_name": "mariadb_100_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 02:00')); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 02:00'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (ts int);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (ts int);"
        ]
    },
    {
        "sql_id": "mariadb_100_4",
        "database_name": "mariadb_100_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 03:00')); -- UNIX_TIMESTAMP",
        "target_query": "INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 03:00'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (ts int);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (ts int);"
        ]
    },
    {
        "sql_id": "mariadb_100_5",
        "database_name": "mariadb_100_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ts,from_unixtime(ts) FROM t1; -- FROM_UNIXTIME",
        "target_query": "SELECT ts,from_unixtime(ts) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (ts int);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (ts int);"
        ]
    },
    {
        "sql_id": "mariadb_100_7",
        "database_name": "mariadb_100_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP",
        "target_query": "SELECT TIMESTAMP( '2001-01-01 00:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MariaDB that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_100_8",
        "database_name": "mariadb_100_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT TO_DAYS( '2001-01-01 00:00:00' ); -- TO_DAYS",
        "target_query": "SELECT TO_DAYS( '2001-01-01 00:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TO_DAYS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_DAYS(date)",
                "description": "Returns the number of days since 0000-01-01 for a given date.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_DAYS(date)",
                "description": "Same as MySQL.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_100_9",
        "database_name": "mariadb_100_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT TO_DAYS( '2001-01-01 00:00:00' ); -- TO_DAYS",
        "target_query": "SELECT TO_DAYS( '2001-01-01 00:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TO_DAYS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_DAYS(date)",
                "description": "Returns the number of days since 0000-01-01 for a given date.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_DAYS(date)",
                "description": "Same as MySQL.",
                "examples": [
                    "SELECT TO_DAYS('2024-05-07');",
                    "SELECT TO_DAYS(CURDATE());",
                    "SELECT TO_DAYS('1999-12-31 23:59:59');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_100_10",
        "database_name": "mariadb_100_10",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' ); -- DATEDIFF",
        "target_query": "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATEDIFF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATEDIFF(date1, date2)",
                "description": "Returns the number of days between two date or datetime expressions (date1 - date2), ignoring time part.",
                "examples": [
                    "SELECT DATEDIFF('2025-12-31', '2025-12-01');",
                    "SELECT DATEDIFF('2025-01-01', '2024-12-31');",
                    "SELECT DATEDIFF(NULL, '2025-01-01');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATEDIFF(date1, date2)",
                "description": "Returns the number of days between two date or datetime expressions (date1 - date2), ignoring time part.",
                "examples": [
                    "SELECT DATEDIFF('2025-12-31', '2025-12-01');",
                    "SELECT DATEDIFF('2025-01-01', '2024-12-31');",
                    "SELECT DATEDIFF(NULL, '2025-01-01');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_100_11",
        "database_name": "mariadb_100_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' ); -- TIMEDIFF",
        "target_query": "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMEDIFF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MariaDB that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_100_12",
        "database_name": "mariadb_100_12",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT DATE_FORMAT( '2009-10-10 23:59:59', '%W %M %Y' ); -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT( '2009-10-10 23:59:59', '%W %M %Y' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_100_13",
        "database_name": "mariadb_100_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT TIME( '2003-12-31 23:59:59' ); -- TIME",
        "target_query": "SELECT TIME( '2003-12-31 23:59:59' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(DATE_ADD(time-value, INTERVAL n unit), '%H:%i:%s')",
                "description": "MySQL's TIME(time-value) function returns the time in 'HH:MM:SS' format. It does not support SQLite-style inline modifiers. Instead, time modification is done via DATE_ADD(), and formatting via TIME_FORMAT(). Fractional seconds (milliseconds) can be included using '%f'.\nParameters: time-value (e.g., NOW(), '14:16:00'), interval modifier (e.g., INTERVAL 1 HOUR).\nReturns: A string formatted as 'HH:MM:SS' or 'HH:MM:SS.SSSSSS'.",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time in 'HH:MM:SS' format.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Returns the time one hour after now.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_100_14",
        "database_name": "mariadb_100_14",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT TIMESTAMP( '2003-12-31 23:59:59', '12:00:00' ); -- TIMESTAMP",
        "target_query": "SELECT TIMESTAMP( '2003-12-31 23:59:59', '12:00:00' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MariaDB that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_100_15",
        "database_name": "mariadb_100_15",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:59:59' ); -- TIMESTAMPADD",
        "target_query": "SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:59:59' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMESTAMPADD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMPADD(unit, interval, datetime_expr)",
                "description": "Adds a time interval to a date or timestamp expression using the specified unit.",
                "examples": [
                    "SELECT TIMESTAMPADD(DAY, 2, '2023-01-01');",
                    "SELECT TIMESTAMPADD(MINUTE, -5, '2023-05-10 12:00:00');",
                    "SELECT TIMESTAMPADD(YEAR, 1, '2020-06-15');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMPADD(unit, interval, datetime_expr)",
                "description": "Adds a specified interval of time to a date or timestamp expression using a given unit.",
                "examples": [
                    "SELECT TIMESTAMPADD(DAY, 2, '2023-01-01');",
                    "SELECT TIMESTAMPADD(MINUTE, -5, '2023-05-10 12:00:00');",
                    "SELECT TIMESTAMPADD(YEAR, 1, '2020-06-15');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_100_16",
        "database_name": "mariadb_100_16",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT TIMESTAMPDIFF(MONTH, '2003-02-01 23:59:59', '2003-05-01' ); -- TIMESTAMPDIFF",
        "target_query": "SELECT TIMESTAMPDIFF(MONTH, '2003-02-01 23:59:59', '2003-05-01' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMESTAMPDIFF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMPDIFF(unit, datetime1, datetime2)",
                "description": "Returns the difference between two datetime values in the specified unit.",
                "examples": [
                    "SELECT TIMESTAMPDIFF(YEAR, '2001-01-01', '2005-01-01');  -- 4",
                    "SELECT TIMESTAMPDIFF(MONTH, '2020-01-01', '2020-03-01');  -- 2",
                    "SELECT TIMESTAMPDIFF(DAY, '2020-01-01', '2020-01-31');    -- 30"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMPDIFF(unit, datetime1, datetime2)",
                "description": "Same as MySQL, returns the interval between two timestamps.",
                "examples": [
                    "SELECT TIMESTAMPDIFF(YEAR, '2001-01-01', '2005-01-01');  -- 4",
                    "SELECT TIMESTAMPDIFF(MONTH, '2020-01-01', '2020-03-01');  -- 2",
                    "SELECT TIMESTAMPDIFF(DAY, '2020-01-01', '2020-01-31');    -- 30"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_100_17",
        "database_name": "mariadb_100_17",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT TO_SECONDS( '2009-11-29 23:59:59' ); -- TO_SECONDS",
        "target_query": "SELECT TO_SECONDS( '2009-11-29 23:59:59' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TO_SECONDS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the given datetime.",
                "examples": [
                    "SELECT TO_SECONDS('2000-01-01 00:00:00');",
                    "SELECT TO_SECONDS(NOW());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the specified datetime value.",
                "examples": [
                    "SELECT TO_SECONDS('2020-12-31 12:00:00');",
                    "SELECT TO_SECONDS(UTC_TIMESTAMP());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_100_18",
        "database_name": "mariadb_100_18",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP( '2015-11-13 23:59:59' ); -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP( '2015-11-13 23:59:59' );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_101_3",
        "database_name": "mariadb_101_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select hex(s1) from t1; -- HEX",
        "target_query": "select hex(s1) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (s1 blob);"
        ],
        "target_related_schemas": [
            "create table t1 (s1 blob);"
        ]
    },
    {
        "sql_id": "mariadb_101_7",
        "database_name": "mariadb_101_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select length(concat('*',s1,'*',s2,'*')) from t1; -- LENGTH, CONCAT",
        "target_query": "select length(concat('*',s1,'*',s2,'*')) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH",
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (s1 blob, s2 blob);"
        ],
        "target_related_schemas": [
            "create table t1 (s1 blob, s2 blob);"
        ]
    },
    {
        "sql_id": "mariadb_101_11",
        "database_name": "mariadb_101_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select hex(s1),s2 from t1 order by s1,s2; -- HEX",
        "target_query": "select hex(s1),s2 from t1 order by s1,s2;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (s1 blob, s2 varchar(1));"
        ],
        "target_related_schemas": [
            "create table t1 (s1 blob, s2 varchar(1));"
        ]
    },
    {
        "sql_id": "mariadb_101_12",
        "database_name": "mariadb_101_12",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select convert(123456789,unsigned); -- CONVERT",
        "target_query": "select convert(123456789,unsigned);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONVERT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_102_2",
        "database_name": "mariadb_102_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW",
        "target_query": "INSERT INTO t1 VALUES (DATE(NOW()), 1);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "MariaDB also supports the DATE function, which extracts the date from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a DATE, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a DATE, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_102_3",
        "database_name": "mariadb_102_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW();",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COUNT",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a DATE, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a DATE, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_102_4",
        "database_name": "mariadb_102_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (DATE(NOW()), 2); -- DATE, NOW",
        "target_query": "INSERT INTO t1 VALUES (DATE(NOW()), 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "MariaDB also supports the DATE function, which extracts the date from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a DATE, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a DATE, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_102_5",
        "database_name": "mariadb_102_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW();",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COUNT",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a DATE, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a DATE, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_102_6",
        "database_name": "mariadb_102_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW() AND b = 1; -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW() AND b = 1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COUNT",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a DATE, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a DATE, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_102_8",
        "database_name": "mariadb_102_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "CREATE TABLE t1 SELECT curdate() AS f1; -- CURDATE",
        "target_query": "CREATE TABLE t1 SELECT curdate() AS f1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CURDATE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CURDATE()",
                "description": "Returns the current date without the time component.",
                "examples": [
                    "SELECT CURDATE();",
                    "SELECT CONCAT('Today\\'s date is: ', CURDATE());",
                    "SELECT 1 WHERE CURDATE() = CURDATE();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CURDATE()",
                "description": "Returns the current date without the time component, identical to MySQL.",
                "examples": [
                    "SELECT CURDATE();",
                    "SELECT CONCAT('Today\\'s date is: ', CURDATE());",
                    "SELECT 1 WHERE CURDATE() = CURDATE();"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 SELECT curdate() AS f1; -- CURDATE"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 SELECT curdate() AS f1;"
        ]
    },
    {
        "sql_id": "mariadb_102_9",
        "database_name": "mariadb_102_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT hour(f1), minute(f1), second(f1) FROM t1; -- HOUR, MINUTE, SECOND",
        "target_query": "SELECT hour(f1), minute(f1), second(f1) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HOUR",
            "MINUTE",
            "SECOND"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Extracts the hour (0–23) from a time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Returns the hour part of the given time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 SELECT curdate() AS f1; -- CURDATE"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 SELECT curdate() AS f1;"
        ]
    },
    {
        "sql_id": "mariadb_102_13",
        "database_name": "mariadb_102_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT b = CONVERT(a, DATE) FROM t1; -- CONVERT",
        "target_query": "SELECT b = CONVERT(a, DATE) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONVERT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1(a DATE, b YEAR);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1(a DATE, b YEAR);"
        ]
    },
    {
        "sql_id": "mariadb_102_14",
        "database_name": "mariadb_102_14",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT b = (SELECT CONVERT(a, DATE) FROM t1 GROUP BY a) FROM t1; -- CONVERT",
        "target_query": "SELECT b = (SELECT CONVERT(a, DATE) FROM t1 GROUP BY a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONVERT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1(a DATE, b YEAR);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1(a DATE, b YEAR);"
        ]
    },
    {
        "sql_id": "mariadb_102_15",
        "database_name": "mariadb_102_15",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT b = CONVERT((SELECT CONVERT(a, DATE) FROM t1 GROUP BY a), DATE) FROM t1; -- CONVERT",
        "target_query": "SELECT b = CONVERT((SELECT CONVERT(a, DATE) FROM t1 GROUP BY a), DATE) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONVERT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "MariaDB supports CONVERT similar to MySQL, for both character set and type conversion.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8mb4);",
                    "SELECT CONVERT('2021-12-31', CHAR);",
                    "SELECT CONVERT(column_name USING utf8mb4) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1(a DATE, b YEAR);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1(a DATE, b YEAR);"
        ]
    },
    {
        "sql_id": "mariadb_102_17",
        "database_name": "mariadb_102_17",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT 1 FROM (SELECT LAST_DAY('0')) a; -- LAST_DAY",
        "target_query": "SELECT 1 FROM (SELECT LAST_DAY('0')) a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LAST_DAY"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LAST_DAY()",
                "description": "Returns the last day of the month for a given date or datetime expression.",
                "examples": [
                    "SELECT LAST_DAY('2000-02-05') AS last_day_1;",
                    "SELECT LAST_DAY(CURRENT_DATE) AS last_day_2;",
                    "SELECT LAST_DAY('2025-05-17 15:32:00') AS last_day_3;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LAST_DAY()",
                "description": "Returns the last day of the month for a given date or datetime expression.",
                "examples": [
                    "SELECT LAST_DAY('2000-02-05') AS last_day_1;",
                    "SELECT LAST_DAY(CURRENT_DATE) AS last_day_2;",
                    "SELECT LAST_DAY('2025-05-17 15:32:00') AS last_day_3;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_102_18",
        "database_name": "mariadb_102_18",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT 1 FROM (SELECT MAKEDATE(2011,0)) a; -- MAKEDATE",
        "target_query": "SELECT 1 FROM (SELECT MAKEDATE(2011,0)) a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "MAKEDATE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_102_19",
        "database_name": "mariadb_102_19",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT CAST(LEAST(20010101,20020202) AS DATE); -- LEAST",
        "target_query": "SELECT CAST(LEAST(20010101,20020202) AS DATE);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LEAST"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_102_20",
        "database_name": "mariadb_102_20",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT CAST(UNIX_TIMESTAMP() AS DATE); -- UNIX_TIMESTAMP",
        "target_query": "SELECT CAST(UNIX_TIMESTAMP() AS DATE);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_102_21",
        "database_name": "mariadb_102_21",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT DATE(20110512154559.6 + 0e0); -- DATE",
        "target_query": "SELECT DATE(20110512154559.6 + 0e0);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "MariaDB also supports the DATE function, which extracts the date from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_2_2",
        "database_name": "mariadb_2_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "WITH recursive qn as (select 1 as n, cast('x' as char(100)) as un union all select 1+n, concat(un,'x') from qn where n<10) select * from qn; -- CONCAT",
        "target_query": "WITH RECURSIVE qn AS (SELECT 1 AS n, CAST('x' AS CHAR(100)) AS un UNION ALL SELECT 1+n, CONCAT(un,'x') FROM qn WHERE n<10) SELECT * FROM qn;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t(c char(3), vc varchar(3), b binary(3), vb varbinary(3));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t(c char(3), vc varchar(3), b binary(3), vb varbinary(3));"
        ]
    },
    {
        "sql_id": "mariadb_3_2",
        "database_name": "mariadb_3_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT IF (COUNT(*) > 0, \"YES\", \"NO\") AS \"IMPLICIT COMMIT\" FROM trans; -- IF",
        "target_query": "SELECT IF (COUNT(*) > 0, \"YES\", \"NO\") AS \"IMPLICIT COMMIT\" FROM trans;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE trans (a INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE trans (a INT);"
        ]
    },
    {
        "sql_id": "mariadb_39_3",
        "database_name": "mariadb_39_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT IF( a = 1, a, a ) AS b FROM t1 ORDER BY field( b + 1, 1 ); -- IF, FIELD",
        "target_query": "SELECT IF( a = 1, a, a ) AS b FROM t1 ORDER BY field( b + 1, 1 );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "FIELD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 ( a INT );"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 ( a INT );"
        ]
    },
    {
        "sql_id": "mariadb_39_4",
        "database_name": "mariadb_39_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT IF( a = 1, a, a ) AS b FROM t1 ORDER BY field( b, 1 ); -- IF, FIELD",
        "target_query": "SELECT IF( a = 1, a, a ) AS b FROM t1 ORDER BY field( b, 1 );",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "FIELD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 ( a INT );"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 ( a INT );"
        ]
    },
    {
        "sql_id": "mariadb_4_4",
        "database_name": "mariadb_4_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_4_5",
        "database_name": "mariadb_4_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_4_6",
        "database_name": "mariadb_4_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_4_7",
        "database_name": "mariadb_4_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_4_11",
        "database_name": "mariadb_4_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a) BETWEEN 0 and 0.9; -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE coalesce(a) BETWEEN 0 and 0.9;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a BIGINT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a BIGINT);"
        ]
    },
    {
        "sql_id": "mariadb_4_12",
        "database_name": "mariadb_4_12",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a)=0.9; -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE coalesce(a)=0.9;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a BIGINT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a BIGINT);"
        ]
    },
    {
        "sql_id": "mariadb_4_13",
        "database_name": "mariadb_4_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a) in (0.8,0.9); -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE coalesce(a) in (0.8,0.9);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a BIGINT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a BIGINT);"
        ]
    },
    {
        "sql_id": "mariadb_5_6",
        "database_name": "mariadb_5_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT USER(); -- USER",
        "target_query": "SELECT USER(); -- USER",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "USER"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MySQL user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MariaDB user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_6_3",
        "database_name": "mariadb_6_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT HEX(c1) FROM t1; -- HEX",
        "target_query": "SELECT HEX(c1) FROM t1; -- HEX",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1(c1 CHAR(4));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1(c1 CHAR(4));"
        ]
    },
    {
        "sql_id": "mariadb_6_5",
        "database_name": "mariadb_6_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT",
        "target_query": "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT"
        ]
    },
    {
        "sql_id": "mariadb_6_12",
        "database_name": "mariadb_6_12",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT",
        "target_query": "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT"
        ],
        "target_related_schemas": [
            "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT"
        ]
    },
    {
        "sql_id": "mariadb_6_13",
        "database_name": "mariadb_6_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT",
        "target_query": "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT",
            "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT"
        ],
        "target_related_schemas": [
            "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT",
            "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT"
        ]
    },
    {
        "sql_id": "mariadb_6_18",
        "database_name": "mariadb_6_18",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "UPDATE IGNORE t1 SET a=unhex(code); -- UNHEX",
        "target_query": "UPDATE IGNORE t1 SET a=unhex(code); -- UNHEX",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNHEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Supports implicit zero-padding for odd-length strings.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;"
        ]
    },
    {
        "sql_id": "mariadb_6_19",
        "database_name": "mariadb_6_19",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=2; -- OCTET_LENGTH",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=2; -- OCTET_LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "OCTET_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;"
        ]
    },
    {
        "sql_id": "mariadb_6_20",
        "database_name": "mariadb_6_20",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE CHAR_LENGTH(a)=2; -- CHAR_LENGTH",
        "target_query": "SELECT * FROM t1 WHERE CHAR_LENGTH(a)=2; -- CHAR_LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CHAR_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in the string, not bytes.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('你好');",
                    "SELECT CHAR_LENGTH('a你b好c');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the character count of the input string, ignoring byte size.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('你好');",
                    "SELECT CHAR_LENGTH('a你b好c');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;"
        ]
    },
    {
        "sql_id": "mariadb_6_21",
        "database_name": "mariadb_6_21",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=3; -- OCTET_LENGTH",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=3; -- OCTET_LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "OCTET_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;"
        ]
    },
    {
        "sql_id": "mariadb_7_4",
        "database_name": "mariadb_7_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT c1, LENGTH(c1) FROM h; -- LENGTH",
        "target_query": "SELECT c1, LENGTH(c1) FROM h; -- LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_7_5",
        "database_name": "mariadb_7_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD",
        "target_query": "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_7_6",
        "database_name": "mariadb_7_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD",
        "target_query": "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_7_9",
        "database_name": "mariadb_7_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT INSTR(c1, 'h') FROM h; -- INSTR",
        "target_query": "SELECT INSTR(c1, 'h') FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Same as MySQL. Returns the 1-based index of substr in str, or 0 if not found.",
                "examples": [
                    "SELECT INSTR('hello', 'e');     -- Returns 2",
                    "SELECT INSTR('hello', 'x');     -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_7_10",
        "database_name": "mariadb_7_10",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT INSTR(c1, '') FROM h; -- INSTR",
        "target_query": "SELECT INSTR(c1, '') FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Same as MySQL. Returns the 1-based index of substr in str, or 0 if not found.",
                "examples": [
                    "SELECT INSTR('hello', 'e');     -- Returns 2",
                    "SELECT INSTR('hello', 'x');     -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_7_11",
        "database_name": "mariadb_7_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT INSTR(c1, '52') FROM h; -- INSTR",
        "target_query": "SELECT INSTR(c1, '52') FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Same as MySQL. Returns the 1-based index of substr in str, or 0 if not found.",
                "examples": [
                    "SELECT INSTR('hello', 'e');     -- Returns 2",
                    "SELECT INSTR('hello', 'x');     -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_7_12",
        "database_name": "mariadb_7_12",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT INSTR(c1, '54') FROM h; -- INSTR",
        "target_query": "SELECT INSTR(c1, '54') FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Same as MySQL. Returns the 1-based index of substr in str, or 0 if not found.",
                "examples": [
                    "SELECT INSTR('hello', 'e');     -- Returns 2",
                    "SELECT INSTR('hello', 'x');     -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_7_13",
        "database_name": "mariadb_7_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT INSTR(c1, '31') FROM h; -- INSTR",
        "target_query": "SELECT INSTR(c1, '31') FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Same as MySQL. Returns the 1-based index of substr in str, or 0 if not found.",
                "examples": [
                    "SELECT INSTR('hello', 'e');     -- Returns 2",
                    "SELECT INSTR('hello', 'x');     -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_7_23",
        "database_name": "mariadb_7_23",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT c1, TRIM(c1) FROM h; -- TRIM",
        "target_query": "SELECT c1, TRIM(c1) FROM h; -- TRIM",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE h (c1 CHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_71_0",
        "database_name": "mariadb_71_0",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select from_unixtime(123456789); -- FROM_UNIXTIME",
        "target_query": "select from_unixtime(123456789);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_71_1",
        "database_name": "mariadb_71_1",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select from_unixtime(234567890); -- FROM_UNIXTIME",
        "target_query": "select from_unixtime(234567890);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_71_2",
        "database_name": "mariadb_71_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select from_unixtime(1); -- FROM_UNIXTIME",
        "target_query": "select from_unixtime(1);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_71_3",
        "database_name": "mariadb_71_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select unix_timestamp(from_unixtime(123456789)); -- UNIX_TIMESTAMP, FROM_UNIXTIME",
        "target_query": "select unix_timestamp(from_unixtime(123456789));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP",
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_71_4",
        "database_name": "mariadb_71_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select unix_timestamp(from_unixtime(234567890)); -- UNIX_TIMESTAMP, FROM_UNIXTIME",
        "target_query": "select unix_timestamp(from_unixtime(234567890));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP",
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_71_5",
        "database_name": "mariadb_71_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select unix_timestamp('2039-01-20 01:00:00'); -- UNIX_TIMESTAMP",
        "target_query": "select unix_timestamp('2039-01-20 01:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_71_6",
        "database_name": "mariadb_71_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select unix_timestamp('2038-02-10 01:00:00'); -- UNIX_TIMESTAMP",
        "target_query": "select unix_timestamp('2038-02-10 01:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_71_7",
        "database_name": "mariadb_71_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select unix_timestamp('1970-01-01 01:00:00'),unix_timestamp('1970-01-01 01:00:01'),unix_timestamp('2038-01-19 04:14:07'),unix_timestamp('2038-01-19 04:14:08'); -- UNIX_TIMESTAMP",
        "target_query": "select unix_timestamp('1970-01-01 01:00:00'),unix_timestamp('1970-01-01 01:00:01'),unix_timestamp('2038-01-19 04:14:07'),unix_timestamp('2038-01-19 04:14:08');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_71_11",
        "database_name": "mariadb_71_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT a, FROM_UNIXTIME(a) FROM t1; -- FROM_UNIXTIME",
        "target_query": "SELECT a, FROM_UNIXTIME(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a BIGINT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a BIGINT);"
        ]
    },
    {
        "sql_id": "mariadb_71_13",
        "database_name": "mariadb_71_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP(\"3001-01-19 08:59:59\"); -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP(\"3001-01-19 08:59:59\");",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_72_4",
        "database_name": "mariadb_72_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "EXPLAIN SELECT * FROM t WHERE CONCAT(x,x) = 'XX'; -- CONCAT",
        "target_query": "EXPLAIN SELECT * FROM t WHERE CONCAT(x,x) = 'XX';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t(x VARCHAR(10));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t(x VARCHAR(10));"
        ]
    },
    {
        "sql_id": "mariadb_74_2",
        "database_name": "mariadb_74_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "insert into t1(f1) select if(max(f1) is null, '2000',max(f1)) from t1; -- IF, MAX",
        "target_query": "INSERT INTO t1(f1) SELECT IF(MAX(f1) IS NULL, '2000', MAX(f1)) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "MAX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "MAX(expr)",
                "description": "Returns the maximum value of the expression in an aggregation context.",
                "examples": [
                    "SELECT MAX(10), MAX(5), MAX(20);",
                    "SELECT MAX('apple'), MAX('banana'), MAX('pear');",
                    "SELECT MAX(ABS(-5)), MAX(ABS(3));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "MAX(expr)",
                "description": "Returns the maximum value among given values in aggregation.",
                "examples": [
                    "SELECT MAX(7), MAX(14), MAX(3);",
                    "SELECT MAX('zebra'), MAX('dog'), MAX('cat');",
                    "SELECT MAX(POWER(2, 3)), MAX(POWER(3, 2));"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1(f1 varchar(5));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1(f1 VARCHAR(5));"
        ]
    },
    {
        "sql_id": "mariadb_74_6",
        "database_name": "mariadb_74_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH",
        "target_query": "SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c = '13_characters') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (c VARCHAR(30));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (c VARCHAR(30));"
        ]
    },
    {
        "sql_id": "mariadb_74_9",
        "database_name": "mariadb_74_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH",
        "target_query": "INSERT INTO t2 (d) SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c = '13_characters') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t2 (d VARCHAR(10));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t2 (d VARCHAR(10));"
        ]
    },
    {
        "sql_id": "mariadb_74_10",
        "database_name": "mariadb_74_10",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='7_chars') FROM t1; -- LENGTH",
        "target_query": "INSERT INTO t2 (d) SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c = '7_chars') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t2 (d VARCHAR(10));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t2 (d VARCHAR(10));"
        ]
    },
    {
        "sql_id": "mariadb_74_16",
        "database_name": "mariadb_74_16",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT *, HEX(a) FROM t1; -- HEX",
        "target_query": "SELECT *, HEX(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (id INT PRIMARY KEY,a VARCHAR(100));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (id INT PRIMARY KEY, a VARCHAR(100));"
        ]
    },
    {
        "sql_id": "mariadb_74_17",
        "database_name": "mariadb_74_17",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT *, HEX(a) FROM t1 WHERE a = 'abc-def'; -- HEX",
        "target_query": "SELECT *, HEX(a) FROM t1 WHERE a = 'abc-def';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (id INT PRIMARY KEY,a VARCHAR(100));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (id INT PRIMARY KEY, a VARCHAR(100));"
        ]
    },
    {
        "sql_id": "mariadb_75_2",
        "database_name": "mariadb_75_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 VALUES('valid-string',1),(UNHEX('11'),2); -- UNHEX",
        "target_query": "INSERT INTO t1 VALUES('valid-string',1),(UNHEX('11'),2);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNHEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Supports implicit zero-padding for odd-length strings.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (tx TEXT NULL,pk INTEGER PRIMARY KEY);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (tx TEXT NULL,pk INTEGER PRIMARY KEY);"
        ]
    },
    {
        "sql_id": "mariadb_75_3",
        "database_name": "mariadb_75_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT pk,OCTET_LENGTH(tx),LENGTH(tx) FROM t1; -- OCTET_LENGTH, LENGTH",
        "target_query": "SELECT pk,OCTET_LENGTH(tx),LENGTH(tx) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "OCTET_LENGTH",
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            },
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            },
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (tx TEXT NULL,pk INTEGER PRIMARY KEY);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (tx TEXT NULL,pk INTEGER PRIMARY KEY);"
        ]
    },
    {
        "sql_id": "mariadb_76_2",
        "database_name": "mariadb_76_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "insert ignore t1 values (1, repeat('a',110), repeat('b', 210)); -- REPEAT",
        "target_query": "insert ignore t1 values (1, repeat('a',110), repeat('b', 210));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (i int, a char(200), b text, unique (a), unique (b(300)));"
        ],
        "target_related_schemas": [
            "create table t1 (i int, a char(200), b text, unique (a), unique (b(300)));"
        ]
    },
    {
        "sql_id": "mariadb_76_3",
        "database_name": "mariadb_76_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select i, length(a), length(b), char_length(a), char_length(b) from t1; -- LENGTH, CHAR_LENGTH",
        "target_query": "select i, length(a), length(b), char_length(a), char_length(b) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH",
            "CHAR_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in the string, not bytes.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('你好');",
                    "SELECT CHAR_LENGTH('a你b好c');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the character count of the input string, ignoring byte size.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('你好');",
                    "SELECT CHAR_LENGTH('a你b好c');"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (i int, a char(200), b text, unique (a), unique (b(300)));"
        ],
        "target_related_schemas": [
            "create table t1 (i int, a char(200), b text, unique (a), unique (b(300)));"
        ]
    },
    {
        "sql_id": "mariadb_76_6",
        "database_name": "mariadb_76_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "insert into t1 values(1, 'a', 'a', NOW()), (1, 'b', 'b', NOW()); -- NOW",
        "target_query": "insert into t1 values(1, 'a', 'a', NOW()), (1, 'b', 'b', NOW());",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format, just like in MySQL.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (c1 int,c2 char(12),c3 varchar(123),c4 timestamp NOT NULL);"
        ],
        "target_related_schemas": [
            "create table t1 (c1 int,c2 char(12),c3 varchar(123),c4 timestamp NOT NULL);"
        ]
    },
    {
        "sql_id": "mariadb_77_3",
        "database_name": "mariadb_77_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select t1.time,t1.date,t1.timestamp,concat(date,\" \",time),t1.quarter+t1.week, t1.year+timestampadd,  timestampdiff from t1; -- CONCAT",
        "target_query": "select t1.time,t1.date,t1.timestamp,concat(date,\" \",time),t1.quarter+t1.week, t1.year+timestampadd,  timestampdiff from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (time time, date date, timestamp timestamp,quarter int, week int, year int, timestampadd int, timestampdiff int);"
        ],
        "target_related_schemas": [
            "create table t1 (time time, date date, timestamp timestamp,quarter int, week int, year int, timestampadd int, timestampdiff int);"
        ]
    },
    {
        "sql_id": "mariadb_78_2",
        "database_name": "mariadb_78_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select concat('|',a,'|'), concat('|',b,'|') from t1; -- CONCAT",
        "target_query": "select concat('|',a,'|'), concat('|',b,'|') from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (a text, b text);"
        ],
        "target_related_schemas": [
            "create table t1 (a text, b text);"
        ]
    },
    {
        "sql_id": "mariadb_78_5",
        "database_name": "mariadb_78_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT HEX(val) FROM t1; -- HEX",
        "target_query": "SELECT HEX(val) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (val TEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (val TEXT);"
        ]
    },
    {
        "sql_id": "mariadb_78_8",
        "database_name": "mariadb_78_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT HEX(a) FROM t1; -- HEX",
        "target_query": "SELECT HEX(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1(a VARCHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1(a VARCHAR(20));"
        ]
    },
    {
        "sql_id": "mariadb_79_3",
        "database_name": "mariadb_79_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT a, date_format(a,'%a') as abday, dayname(a) as day FROM t1 ORDER BY a; -- DATE_FORMAT, DAYNAME",
        "target_query": "SELECT a, date_format(a,'%a') as abday, dayname(a) as day FROM t1 ORDER BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT",
            "DAYNAME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            },
            {
                "expression": "DAYNAME(date)",
                "description": "Returns the full name of the day for a given date.",
                "examples": [
                    "SELECT DAYNAME('2023-11-25');",
                    "SELECT DAYNAME('2022-01-01');",
                    "SELECT DAYNAME('1999-03-14');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            },
            {
                "expression": "DAYNAME(date)",
                "description": "Returns the full name of the day for a given date.",
                "examples": [
                    "SELECT DAYNAME('2023-11-25');",
                    "SELECT DAYNAME('2022-01-01');",
                    "SELECT DAYNAME('1999-03-14');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a DATE);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a DATE);"
        ]
    },
    {
        "sql_id": "mariadb_79_7",
        "database_name": "mariadb_79_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT a, date_format(a,'%b') as abmon, monthname(a) as mon FROM t1 ORDER BY a; -- DATE_FORMAT, MONTHNAME",
        "target_query": "SELECT a, date_format(a,'%b') as abmon, monthname(a) as mon FROM t1 ORDER BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT",
            "MONTHNAME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            },
            {
                "expression": "MONTHNAME(date)",
                "description": "Returns the full English name of the month for a given date.",
                "examples": [
                    "SELECT MONTHNAME(DATE '2023-05-01') AS mon1;",
                    "SELECT MONTHNAME(STR_TO_DATE('2024-12-31', '%Y-%m-%d')) AS mon2;",
                    "SELECT MONTHNAME(NOW()) AS current_month;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            },
            {
                "expression": "MONTHNAME(date)",
                "description": "Returns the full English name of the month for a given date.",
                "examples": [
                    "SELECT MONTHNAME(DATE '2023-05-01') AS mon1;",
                    "SELECT MONTHNAME(STR_TO_DATE('2024-12-31', '%Y-%m-%d')) AS mon2;",
                    "SELECT MONTHNAME(NOW()) AS current_month;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a DATE);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a DATE);"
        ]
    },
    {
        "sql_id": "mariadb_79_9",
        "database_name": "mariadb_79_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT DATE_FORMAT('2001-01-01', '%w %a %W'); -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT('2001-01-01', '%w %a %W');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_79_10",
        "database_name": "mariadb_79_10",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT DATE_FORMAT('2001-01-01', '%c %b %M'); -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT('2001-01-01', '%c %b %M');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_79_11",
        "database_name": "mariadb_79_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT DATE_FORMAT('2010-03-23 11:00:00','%h %p'); -- DATE_FORMAT",
        "target_query": "SELECT DATE_FORMAT('2010-03-23 11:00:00','%h %p');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_8_0",
        "database_name": "mariadb_8_0",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP",
        "target_query": "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_8_1",
        "database_name": "mariadb_8_1",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP",
        "target_query": "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_8_2",
        "database_name": "mariadb_8_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP",
        "target_query": "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_8_3",
        "database_name": "mariadb_8_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP",
        "target_query": "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_8_4",
        "database_name": "mariadb_8_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP",
        "target_query": "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_8_5",
        "database_name": "mariadb_8_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcmp('aeaeq',''); -- STRCMP",
        "target_query": "select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcmp('aeaeq',''); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_8_6",
        "database_name": "mariadb_8_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select strcmp('a','ss'),strcmp('ssa',''),strcmp('sssb','sa'),strcmp('','s'); -- STRCMP",
        "target_query": "select strcmp('a','ss'),strcmp('ssa',''),strcmp('sssb','sa'),strcmp('','s'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_8_7",
        "database_name": "mariadb_8_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select strcmp('u','a'),strcmp('u',''); -- STRCMP",
        "target_query": "select strcmp('u','a'),strcmp('u',''); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_8_8",
        "database_name": "mariadb_8_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select strcmp('s', 'a'), strcmp('a', 'x'); -- STRCMP",
        "target_query": "select strcmp('s', 'a'), strcmp('a', 'x'); -- STRCMP",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_8_13",
        "database_name": "mariadb_8_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT FIELD('ue',s1), FIELD('',s1), s1='ue', s1='' FROM t1; -- FIELD",
        "target_query": "SELECT FIELD('ue',s1), FIELD('',s1), s1='ue', s1='' FROM t1; -- FIELD",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FIELD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (s1 CHAR(5));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (s1 CHAR(5));"
        ]
    },
    {
        "sql_id": "mariadb_8_17",
        "database_name": "mariadb_8_17",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select * from t1 where length(s1)=2 and s1='oe'; -- LENGTH",
        "target_query": "select * from t1 where length(s1)=2 and s1='oe'; -- LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (s1 char(5));"
        ],
        "target_related_schemas": [
            "create table t1 (s1 char(5));"
        ]
    },
    {
        "sql_id": "mariadb_80_0",
        "database_name": "mariadb_80_0",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, 5, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_1",
        "database_name": "mariadb_80_1",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_2",
        "database_name": "mariadb_80_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_3",
        "database_name": "mariadb_80_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_4",
        "database_name": "mariadb_80_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_5",
        "database_name": "mariadb_80_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD('a', 5, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_6",
        "database_name": "mariadb_80_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD",
        "target_query": "SELECT LPAD(NULL, 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_7",
        "database_name": "mariadb_80_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD('a', 0, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_8",
        "database_name": "mariadb_80_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD('a', 0, '') AS result; -- LPAD",
        "target_query": "SELECT LPAD('a', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_9",
        "database_name": "mariadb_80_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD('', 0, 'x') AS result; -- LPAD",
        "target_query": "SELECT LPAD('', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_10",
        "database_name": "mariadb_80_10",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD('', 0, '') AS result; -- LPAD",
        "target_query": "SELECT LPAD('', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_11",
        "database_name": "mariadb_80_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD('a', -1, 'x'); -- LPAD",
        "target_query": "SELECT LPAD('a', -1, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_12",
        "database_name": "mariadb_80_12",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD('123', 5, 'x'); -- LPAD",
        "target_query": "SELECT LPAD('123', 5, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_13",
        "database_name": "mariadb_80_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD('a', 5, 'xy'); -- LPAD",
        "target_query": "SELECT LPAD('a', 5, 'xy');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_14",
        "database_name": "mariadb_80_14",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD(\"I LOVE SQL\", 20, \" \"); -- LPAD",
        "target_query": "SELECT LPAD(\"I LOVE SQL\", 20, \" \");",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_80_15",
        "database_name": "mariadb_80_15",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LPAD(\"I LOVE SQL in the morning\", 20, \" \"); -- LPAD",
        "target_query": "SELECT LPAD(\"I LOVE SQL in the morning\", 20, \" \");",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_81_2",
        "database_name": "mariadb_81_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (f1 LONGTEXT , f2  INTEGER);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (f1 LONGTEXT , f2  INTEGER);"
        ]
    },
    {
        "sql_id": "mariadb_81_15",
        "database_name": "mariadb_81_15",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT SUM(LENGTH(f1)) FROM t1; -- LENGTH",
        "target_query": "SELECT SUM(LENGTH(f1)) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (f1 LONGTEXT , f2  INTEGER);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (f1 LONGTEXT , f2  INTEGER);"
        ]
    },
    {
        "sql_id": "mariadb_82_3",
        "database_name": "mariadb_82_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT COALESCE(d, d), IFNULL(d, d), IF(i, d, d),CASE i WHEN i THEN d ELSE d END, GREATEST(d, d), LEAST(d, d)FROM t1 ORDER BY RAND(); -- COALESCE, IFNULL, IF, GREATEST, LEAST",
        "target_query": "SELECT COALESCE(d, d), IFNULL(d, d), IF(i, d, d),CASE i WHEN i THEN d ELSE d END, GREATEST(d, d), LEAST(d, d)FROM t1 ORDER BY RAND();",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE",
            "IFNULL",
            "IF",
            "GREATEST",
            "LEAST"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            },
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            },
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            },
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            },
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the minimum value from its arguments. If any argument is NULL, the entire result is NULL, matching MySQL behavior.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (i INT, d DATE);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (i INT, d DATE);"
        ]
    },
    {
        "sql_id": "mariadb_83_3",
        "database_name": "mariadb_83_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT HEX(c1) FROM AB; -- HEX",
        "target_query": "SELECT HEX(c1) FROM AB;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE AB (c1 CHAR(100));"
        ],
        "target_related_schemas": [
            "CREATE TABLE AB (c1 CHAR(100));"
        ]
    },
    {
        "sql_id": "mariadb_84_2",
        "database_name": "mariadb_84_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "insert into t5 values (1, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "insert into t5 values (1, date_format('2001-01-01','%W'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t5 (c1 int, c2 varchar(128) not null);"
        ],
        "target_related_schemas": [
            "create table t5 (c1 int, c2 varchar(128) not null);"
        ]
    },
    {
        "sql_id": "mariadb_84_3",
        "database_name": "mariadb_84_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "insert into t5 values (2, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "insert into t5 values (2, date_format('2001-01-01','%W'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t5 (c1 int, c2 varchar(128) not null);"
        ],
        "target_related_schemas": [
            "create table t5 (c1 int, c2 varchar(128) not null);"
        ]
    },
    {
        "sql_id": "mariadb_84_4",
        "database_name": "mariadb_84_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "insert into t5 values (3, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "insert into t5 values (3, date_format('2001-01-01','%W'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression using the same format string rules as MySQL.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(CURDATE(), '%Y-%m-%d');",
                    "SELECT DATE_FORMAT('2023-01-15 12:00:00', '%H:%i:%s');"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t5 (c1 int, c2 varchar(128) not null);"
        ],
        "target_related_schemas": [
            "create table t5 (c1 int, c2 varchar(128) not null);"
        ]
    },
    {
        "sql_id": "mariadb_84_8",
        "database_name": "mariadb_84_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select hex(a) from t1; -- HEX",
        "target_query": "select hex(a) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (a varchar(64));"
        ],
        "target_related_schemas": [
            "create table t1 (a varchar(64));"
        ]
    },
    {
        "sql_id": "mariadb_84_11",
        "database_name": "mariadb_84_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (1,USER()); -- USER",
        "target_query": "INSERT INTO t1 VALUES (1,USER());",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "USER"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MySQL user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "USER()",
                "description": "Returns the current MariaDB user and host in the format 'username@hostname'.",
                "examples": [
                    "SELECT USER();"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a INT, b CHAR(64));"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a INT, b CHAR(64));"
        ]
    },
    {
        "sql_id": "mariadb_85_2",
        "database_name": "mariadb_85_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (c1 LONGTEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (c1 LONGTEXT);"
        ]
    },
    {
        "sql_id": "mariadb_85_3",
        "database_name": "mariadb_85_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (c1 LONGTEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (c1 LONGTEXT);"
        ]
    },
    {
        "sql_id": "mariadb_85_4",
        "database_name": "mariadb_85_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (c1 LONGTEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (c1 LONGTEXT);"
        ]
    },
    {
        "sql_id": "mariadb_85_5",
        "database_name": "mariadb_85_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (c1 LONGTEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (c1 LONGTEXT);"
        ]
    },
    {
        "sql_id": "mariadb_85_6",
        "database_name": "mariadb_85_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LENGTH(c1) FROM t1; -- LENGTH",
        "target_query": "SELECT LENGTH(c1) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (c1 LONGTEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (c1 LONGTEXT);"
        ]
    },
    {
        "sql_id": "mariadb_86_0",
        "database_name": "mariadb_86_0",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select null,isnull(null),isnull(1/0),isnull(1/0 = null),ifnull(null,1),ifnull(null,\"TRUE\"),ifnull(\"TRUE\",\"ERROR\"),1/0 is null,1 is not null; -- ISNULL, IFNULL",
        "target_query": "select null,isnull(null),isnull(1/0),isnull(1/0 = null),ifnull(null,1),ifnull(null,\"TRUE\"),ifnull(\"TRUE\",\"ERROR\"),1/0 is null,1 is not null;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ISNULL",
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Checks whether a value is NULL. Returns 1 if NULL, 0 otherwise.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL('abc');",
                    "SELECT IF(ISNULL(balance), 0, balance) FROM accounts;"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_86_1",
        "database_name": "mariadb_86_1",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select NULL=NULL,NULL<>NULL,IFNULL(NULL,1.1)+0,IFNULL(NULL,1) | 0; -- IFNULL",
        "target_query": "select NULL=NULL,NULL<>NULL,IFNULL(NULL,1.1)+0,IFNULL(NULL,1) | 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_86_2",
        "database_name": "mariadb_86_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select strcmp(\"a\",NULL),(1<NULL),NULL regexp \"a\",null like \"a%\",\"a%\" like null; -- STRCMP",
        "target_query": "select strcmp(\"a\",NULL),(1<NULL),NULL regexp \"a\",null like \"a%\",\"a%\" like null;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Works the same way as in MySQL, comparing two strings lexicographically and returning a value based on the comparison: 0 for equality, negative for the first string being smaller, and positive for the first string being larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_86_3",
        "database_name": "mariadb_86_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select repeat(\"a\",0),repeat(\"ab\",5+5),repeat(\"ab\",-1),reverse(NULL); -- REPEAT",
        "target_query": "select repeat(\"a\",0),repeat(\"ab\",5+5),repeat(\"ab\",-1),reverse(NULL);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_86_4",
        "database_name": "mariadb_86_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select field(NULL,\"a\",\"b\",\"c\"); -- FIELD",
        "target_query": "select field(NULL,\"a\",\"b\",\"c\");",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FIELD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the position of 'val' in the list (1-based index). Returns 0 if 'val' is not found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_86_9",
        "database_name": "mariadb_86_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(a, b) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 SELECT IFNULL(a, b) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t2 SELECT IFNULL(a, b) FROM t1; -- IFNULL"
        ],
        "target_related_schemas": [
            "CREATE TABLE t2 SELECT IFNULL(a, b) FROM t1;"
        ]
    },
    {
        "sql_id": "mariadb_86_11",
        "database_name": "mariadb_86_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(a, NULL) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 SELECT IFNULL(a, NULL) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t2 SELECT IFNULL(a, NULL) FROM t1; -- IFNULL"
        ],
        "target_related_schemas": [
            "CREATE TABLE t2 SELECT IFNULL(a, NULL) FROM t1;"
        ]
    },
    {
        "sql_id": "mariadb_86_13",
        "database_name": "mariadb_86_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(NULL, b) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 SELECT IFNULL(NULL, b) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t2 SELECT IFNULL(NULL, b) FROM t1; -- IFNULL"
        ],
        "target_related_schemas": [
            "CREATE TABLE t2 SELECT IFNULL(NULL, b) FROM t1;"
        ]
    },
    {
        "sql_id": "mariadb_87_2",
        "database_name": "mariadb_87_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1( a VARCHAR( 10 ), b INT );"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1( a VARCHAR( 10 ), b INT );"
        ]
    },
    {
        "sql_id": "mariadb_87_3",
        "database_name": "mariadb_87_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT GROUP_CONCAT(a) FROM t1; -- GROUP_CONCAT",
        "target_query": "SELECT GROUP_CONCAT(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "GROUP_CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The GROUP_CONCAT([DISTINCT] expr [,expr ...]  [ORDER BY {unsigned_integer | col_name | expr}  [ASC | DESC] [,col_name ...]]  [SEPARATOR str_val])\nfunction returns a string result with the concatenated non-NULL values from a group.\nDISTINGUISHED keyword can be used to eliminate duplicate values.\nORDER BY clause can be used to sort the values.\nSEPARATOR keyword specifies the separator between values, default is comma(,).\nThe maximum length of the result is controlled by group_concat_max_len system variable, default is 1024.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The group_concat(X) function returns a string that concatenates all the non-NULL values in X, separated by commas. The group_concat(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y. The string_agg(X,Y) function returns a string that concatenates all the non-NULL values in X, separated by Y.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1( a VARCHAR( 10 ), b INT );"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1( a VARCHAR( 10 ), b INT );"
        ]
    },
    {
        "sql_id": "mariadb_87_5",
        "database_name": "mariadb_87_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT UNIX_TIMESTAMP(); -- UNIX_TIMESTAMP",
        "target_query": "SELECT UNIX_TIMESTAMP();",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNIX_TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Returns a Unix timestamp (seconds since '1970-01-01 00:00:00' UTC) from a given date or datetime expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UNIX_TIMESTAMP(expr)",
                "description": "Same as in MySQL, returns the number of seconds since '1970-01-01 00:00:00' UTC from a datetime or timestamp expression.",
                "examples": [
                    "SELECT UNIX_TIMESTAMP(NOW());",
                    "SELECT UNIX_TIMESTAMP('2015-11-13 23:59:59');",
                    "SELECT UNIX_TIMESTAMP('2038-01-19 04:14:07');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_88_0",
        "database_name": "mariadb_88_0",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select repeat('a',2000); -- REPEAT",
        "target_query": "select repeat('a',2000); -- REPEAT",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_88_1",
        "database_name": "mariadb_88_1",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") as len; -- LENGTH",
        "target_query": "SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") as len; -- LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_88_2",
        "database_name": "mariadb_88_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select length(repeat('a',2000)); -- LENGTH, REPEAT",
        "target_query": "select length(repeat('a',2000)); -- LENGTH, REPEAT",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH",
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_88_9",
        "database_name": "mariadb_88_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT c11, LENGTH(c12) FROM t1; -- LENGTH",
        "target_query": "SELECT c11, LENGTH(c12) FROM t1; -- LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t2 (c21 INT NOT NULL, c22 LONGTEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t2 (c21 INT NOT NULL, c22 LONGTEXT);"
        ]
    },
    {
        "sql_id": "mariadb_89_3",
        "database_name": "mariadb_89_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select hex(a) from t1 where a like 'A_'; -- HEX",
        "target_query": "select hex(a) from t1 where a like 'A_';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (a varchar(50));"
        ],
        "target_related_schemas": [
            "create table t1 (a varchar(50));"
        ]
    },
    {
        "sql_id": "mariadb_89_5",
        "database_name": "mariadb_89_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "explain select hex(a) from t1 where a like 'A_'; -- HEX",
        "target_query": "explain select hex(a) from t1 where a like 'A_';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (a varchar(50));"
        ],
        "target_related_schemas": [
            "create table t1 (a varchar(50));"
        ]
    },
    {
        "sql_id": "mariadb_89_6",
        "database_name": "mariadb_89_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select hex(a) from t1; -- HEX",
        "target_query": "select hex(a) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "HEX(N)",
                "description": "Converts the given numeric or string value to a hexadecimal representation.",
                "examples": [
                    "SELECT HEX(255);",
                    "SELECT HEX('abc');"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (a varchar(50));"
        ],
        "target_related_schemas": [
            "create table t1 (a varchar(50));"
        ]
    },
    {
        "sql_id": "mariadb_89_8",
        "database_name": "mariadb_89_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "create table t1 as select to_seconds(null) as to_seconds; -- TO_SECONDS",
        "target_query": "create table t1 as select to_seconds(null) as to_seconds;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TO_SECONDS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the given datetime.",
                "examples": [
                    "SELECT TO_SECONDS('2000-01-01 00:00:00');",
                    "SELECT TO_SECONDS(NOW());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the specified datetime value.",
                "examples": [
                    "SELECT TO_SECONDS('2020-12-31 12:00:00');",
                    "SELECT TO_SECONDS(UTC_TIMESTAMP());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 as select to_seconds(null) as to_seconds; -- TO_SECONDS"
        ],
        "target_related_schemas": [
            "create table t1 as select to_seconds(null) as to_seconds;"
        ]
    },
    {
        "sql_id": "mariadb_9_0",
        "database_name": "mariadb_9_0",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF",
        "target_query": "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_9_4",
        "database_name": "mariadb_9_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF",
        "target_query": "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);"
        ]
    },
    {
        "sql_id": "mariadb_9_5",
        "database_name": "mariadb_9_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF",
        "target_query": "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);"
        ]
    },
    {
        "sql_id": "mariadb_9_7",
        "database_name": "mariadb_9_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select nullif(u, 1) from t1; -- NULLIF",
        "target_query": "select nullif(u, 1) from t1; -- NULLIF",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);"
        ]
    },
    {
        "sql_id": "mariadb_9_8",
        "database_name": "mariadb_9_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "explain select nullif(u, 1) from t1; -- NULLIF",
        "target_query": "explain select nullif(u, 1) from t1; -- NULLIF",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);"
        ]
    },
    {
        "sql_id": "mariadb_9_12",
        "database_name": "mariadb_9_12",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select sum(if(num is null,0.00,num)) from t1; -- IF",
        "target_query": "select sum(if(num is null,0.00,num)) from t1; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (num  double(12,2));"
        ],
        "target_related_schemas": [
            "create table t1 (num  double(12,2));"
        ]
    },
    {
        "sql_id": "mariadb_9_16",
        "database_name": "mariadb_9_16",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF",
        "target_query": "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 (x int, y int);"
        ],
        "target_related_schemas": [
            "create table t1 (x int, y int);"
        ]
    },
    {
        "sql_id": "mariadb_9_18",
        "database_name": "mariadb_9_18",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF",
        "target_query": "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_9_21",
        "database_name": "mariadb_9_21",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord ASC; -- IF, FROM_UNIXTIME",
        "target_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord ASC; -- IF, FROM_UNIXTIME",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE `t1` (`id` int(11) NOT NULL ,`date` int(10) default NULL,`text` varchar(32) NOT NULL);"
        ],
        "target_related_schemas": [
            "CREATE TABLE `t1` (`id` int(11) NOT NULL ,`date` int(10) default NULL,`text` varchar(32) NOT NULL);"
        ]
    },
    {
        "sql_id": "mariadb_9_22",
        "database_name": "mariadb_9_22",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord DESC; -- IF, FROM_UNIXTIME",
        "target_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord DESC; -- IF, FROM_UNIXTIME",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime. Accepts an optional format string to define output formatting.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%W, %M %e, %Y');",
                    "SELECT name, FROM_UNIXTIME(last_login) AS last_login_time FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE `t1` (`id` int(11) NOT NULL ,`date` int(10) default NULL,`text` varchar(32) NOT NULL);"
        ],
        "target_related_schemas": [
            "CREATE TABLE `t1` (`id` int(11) NOT NULL ,`date` int(10) default NULL,`text` varchar(32) NOT NULL);"
        ]
    },
    {
        "sql_id": "mariadb_9_26",
        "database_name": "mariadb_9_26",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT * FROM (SELECT MAX(IF(1, CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IF",
        "target_query": "SELECT * FROM (SELECT MAX(IF(1, CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IF",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "MariaDB supports the same `IF` function syntax as MySQL. It returns different values based on the evaluation of the condition.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (c LONGTEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (c LONGTEXT);"
        ]
    },
    {
        "sql_id": "mariadb_9_27",
        "database_name": "mariadb_9_27",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT * FROM (SELECT MAX(IFNULL(CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IFNULL",
        "target_query": "SELECT * FROM (SELECT MAX(IFNULL(CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IFNULL",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (c LONGTEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (c LONGTEXT);"
        ]
    },
    {
        "sql_id": "mariadb_9_29",
        "database_name": "mariadb_9_29",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT AVG(NULLIF(YEAR('2001-01-01'),10)); -- NULLIF, YEAR",
        "target_query": "SELECT AVG(NULLIF(YEAR('2001-01-01'),10)); -- NULLIF, YEAR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF",
            "YEAR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            },
            {
                "expression": "YEAR(date)",
                "description": "Extracts the year from a date or datetime and returns it as an integer.",
                "examples": [
                    "SELECT YEAR('2023-04-10');",
                    "SELECT YEAR(NOW());",
                    "SELECT YEAR('2022-03-15');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            },
            {
                "expression": "YEAR(date)",
                "description": "Extracts the year from a date or datetime and returns it as an integer.",
                "examples": [
                    "SELECT YEAR('2023-04-10');",
                    "SELECT YEAR(NOW());",
                    "SELECT YEAR('2022-03-15');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_90_0",
        "database_name": "mariadb_90_0",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT FROM_DAYS(3652499), FROM_DAYS(3652500), FROM_DAYS(3652501); -- FROM_DAYS",
        "target_query": "SELECT FROM_DAYS(3652499), FROM_DAYS(3652500), FROM_DAYS(3652501);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_DAYS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_90_1",
        "database_name": "mariadb_90_1",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT FROM_DAYS(42949670), FROM_DAYS(42949671), FROM_DAYS(42949673); -- FROM_DAYS",
        "target_query": "SELECT FROM_DAYS(42949670), FROM_DAYS(42949671), FROM_DAYS(42949673);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_DAYS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_91_2",
        "database_name": "mariadb_91_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000)); -- REPEAT",
        "target_query": "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Identical to MySQL. Returns 'str' repeated 'count' times. Returns NULL if 'str' or 'count' is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t(i int, b LONGTEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t(i int, b LONGTEXT);"
        ]
    },
    {
        "sql_id": "mariadb_91_4",
        "database_name": "mariadb_91_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT LENGTH(b) FROM (SELECT * FROM t INTERSECT SELECT * FROM t) derived; -- LENGTH",
        "target_query": "SELECT LENGTH(b) FROM (SELECT * FROM t INTERSECT SELECT * FROM t) derived;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. Fully compatible with MySQL.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('你好');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t(i int, b LONGTEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t(i int, b LONGTEXT);"
        ]
    },
    {
        "sql_id": "mariadb_92_2",
        "database_name": "mariadb_92_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT argument FROM test_log WHERE argument LIKE CONCAT('%azun','dris%'); -- CONCAT",
        "target_query": "SELECT argument FROM test_log WHERE argument LIKE CONCAT('%azun','dris%');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates multiple string arguments into one string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE test_log (argument TEXT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE test_log (argument TEXT);"
        ]
    },
    {
        "sql_id": "mariadb_93_0",
        "database_name": "mariadb_93_0",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row(10,2,3) IN (row(3,2,3), row(1,2,3), row(1,3,3)); -- ROW",
        "target_query": "select row(10,2,3) IN (row(3,2,3), row(1,2,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_1",
        "database_name": "mariadb_93_1",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row(1,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3)); -- ROW",
        "target_query": "select row(1,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_2",
        "database_name": "mariadb_93_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row(10,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3)); -- ROW",
        "target_query": "select row(10,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_3",
        "database_name": "mariadb_93_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row('a',1.5,3) IN (row(1,2,3), row('a',1.5,3), row('a','a','a')); -- ROW",
        "target_query": "select row('a',1.5,3) IN (row(1,2,3), row('a',1.5,3), row('a','a','a'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_4",
        "database_name": "mariadb_93_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row('a',0,3) IN (row(3,2,3), row('a','a','3'), row(1,3,3)); -- ROW",
        "target_query": "select row('a',0,3) IN (row(3,2,3), row('a','a','3'), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_5",
        "database_name": "mariadb_93_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row('a',0,3) IN (row(3,2,3), row('a','0','3'), row(1,3,3)); -- ROW",
        "target_query": "select row('a',0,3) IN (row(3,2,3), row('a','0','3'), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_6",
        "database_name": "mariadb_93_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row('a',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3)); -- ROW",
        "target_query": "select row('a',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_7",
        "database_name": "mariadb_93_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row('b',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3)); -- ROW",
        "target_query": "select row('b',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_8",
        "database_name": "mariadb_93_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row('b',1.5,3) IN (row('b',NULL,3), row('a',1.5,3), row(1,3,3)); -- ROW",
        "target_query": "select row('b',1.5,3) IN (row('b',NULL,3), row('a',1.5,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_9",
        "database_name": "mariadb_93_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row('b',1.5,3) IN (row('b',NULL,4), row('a',1.5,3), row(1,3,3)); -- ROW",
        "target_query": "select row('b',1.5,3) IN (row('b',NULL,4), row('a',1.5,3), row(1,3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_10",
        "database_name": "mariadb_93_10",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL))); -- ROW",
        "target_query": "select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL)));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_11",
        "database_name": "mariadb_93_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "explain select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL))); -- ROW",
        "target_query": "explain select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL)));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_12",
        "database_name": "mariadb_93_12",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(4,5))); -- ROW",
        "target_query": "select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(4,5)));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_13",
        "database_name": "mariadb_93_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(3,5))); -- ROW",
        "target_query": "select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(3,5)));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_14",
        "database_name": "mariadb_93_14",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(1,2,3)=ROW(1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)=ROW(1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_15",
        "database_name": "mariadb_93_15",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(2,2,3)=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(2,2,3)=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_16",
        "database_name": "mariadb_93_16",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(1,2,3)=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_17",
        "database_name": "mariadb_93_17",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(1,2,3)<ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)<ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_18",
        "database_name": "mariadb_93_18",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(1,2,3)>ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)>ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_19",
        "database_name": "mariadb_93_19",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(1,2,3)<=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)<=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_20",
        "database_name": "mariadb_93_20",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(1,2,3)>=ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)>=ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_21",
        "database_name": "mariadb_93_21",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(1,2,3)<>ROW(1+1,2,3); -- ROW",
        "target_query": "SELECT ROW(1,2,3)<>ROW(1+1,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_22",
        "database_name": "mariadb_93_22",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(NULL,2,3)=ROW(NULL,2,3); -- ROW",
        "target_query": "SELECT ROW(NULL,2,3)=ROW(NULL,2,3);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_23",
        "database_name": "mariadb_93_23",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(1,2,ROW(3,4,5))=ROW(1,2,ROW(3,4,5)); -- ROW",
        "target_query": "SELECT ROW(1,2,ROW(3,4,5))=ROW(1,2,ROW(3,4,5));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_24",
        "database_name": "mariadb_93_24",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW('test',2,3.33)=ROW('test',2,3.33); -- ROW",
        "target_query": "SELECT ROW('test',2,3.33)=ROW('test',2,3.33);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_25",
        "database_name": "mariadb_93_25",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,33)); -- ROW",
        "target_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,33));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_26",
        "database_name": "mariadb_93_26",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,3)); -- ROW",
        "target_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_93_27",
        "database_name": "mariadb_93_27",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,NULL)); -- ROW",
        "target_query": "SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,NULL));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_94_3",
        "database_name": "mariadb_94_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select * from t1 where ROW(1,2,3)=ROW(a,b,c); -- ROW",
        "target_query": "select * from t1 where ROW(1,2,3)=ROW(a,b,c);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ],
        "target_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ]
    },
    {
        "sql_id": "mariadb_94_4",
        "database_name": "mariadb_94_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select * from t1 where ROW(0,2,3)=ROW(a,b,c); -- ROW",
        "target_query": "select * from t1 where ROW(0,2,3)=ROW(a,b,c);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ],
        "target_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ]
    },
    {
        "sql_id": "mariadb_94_5",
        "database_name": "mariadb_94_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select * from t1 where ROW(1,2,3)<ROW(a,b,c); -- ROW",
        "target_query": "select * from t1 where ROW(1,2,3)<ROW(a,b,c);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ],
        "target_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ]
    },
    {
        "sql_id": "mariadb_94_6",
        "database_name": "mariadb_94_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select ROW(a,2,3) IN(row(1,b,c), row(2,3,1)) from t1; -- ROW",
        "target_query": "select ROW(a,2,3) IN(row(1,b,c), row(2,3,1)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ],
        "target_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ]
    },
    {
        "sql_id": "mariadb_94_7",
        "database_name": "mariadb_94_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select ROW(c,2,3) IN(row(1,b,a), row(2,3,1)) from t1; -- ROW",
        "target_query": "select ROW(c,2,3) IN(row(1,b,a), row(2,3,1)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ],
        "target_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ]
    },
    {
        "sql_id": "mariadb_94_8",
        "database_name": "mariadb_94_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select ROW(a,b,c) IN(row(1,2,3), row(3,2,1)) from t1; -- ROW",
        "target_query": "select ROW(a,b,c) IN(row(1,2,3), row(3,2,1)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ],
        "target_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ]
    },
    {
        "sql_id": "mariadb_94_9",
        "database_name": "mariadb_94_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "select ROW(1,2,3) IN(row(a,b,c), row(1,2,3)) from t1; -- ROW",
        "target_query": "select ROW(1,2,3) IN(row(a,b,c), row(1,2,3)) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ],
        "target_related_schemas": [
            "create table t1 ( a int, b int, c int);"
        ]
    },
    {
        "sql_id": "mariadb_94_11",
        "database_name": "mariadb_94_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(1,1,1) = ROW(1,1,1), ROW(1,1,1) = ROW(1,2,1), ROW(1,NULL,1) = ROW(2,2,1), ROW(1,NULL,1) = ROW(1,2,2), ROW(1,NULL,1) = ROW(1,2,1) ; -- ROW",
        "target_query": "SELECT ROW(1,1,1) = ROW(1,1,1), ROW(1,1,1) = ROW(1,2,1), ROW(1,NULL,1) = ROW(2,2,1), ROW(1,NULL,1) = ROW(1,2,2), ROW(1,NULL,1) = ROW(1,2,1);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_95_3",
        "database_name": "mariadb_95_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 1) FROM t1 GROUP BY a; -- ROW",
        "target_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 1) FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a INT, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a INT, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_95_4",
        "database_name": "mariadb_95_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 3) FROM t1 GROUP BY a; -- ROW",
        "target_query": "SELECT ROW(a, 1) IN (SELECT SUM(b), 3) FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a INT, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a INT, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_95_8",
        "database_name": "mariadb_95_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT 1 FROM t1 WHERE ROW(a, b) >=ROW('1', (SELECT 1 FROM t1 WHERE a > '1234')); -- ROW",
        "target_query": "SELECT 1 FROM t1 WHERE ROW(a, b) >=ROW('1', (SELECT 1 FROM t1 WHERE a > '1234'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (a INT NOT NULL, b TINYINT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (a INT NOT NULL, b TINYINT);"
        ]
    },
    {
        "sql_id": "mariadb_95_12",
        "database_name": "mariadb_95_12",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(1,2) = (SELECT 1,2 FROM t1 WHERE 1 = 0); -- ROW",
        "target_query": "SELECT ROW(1,2) = (SELECT 1,2 FROM t1 WHERE 1 = 0);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (i INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (i INT);"
        ]
    },
    {
        "sql_id": "mariadb_95_13",
        "database_name": "mariadb_95_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT ROW(1,2) = (SELECT 1,3 FROM t1 WHERE 1 = 0); -- ROW",
        "target_query": "SELECT ROW(1,2) = (SELECT 1,3 FROM t1 WHERE 1 = 0);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 (i INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 (i INT);"
        ]
    },
    {
        "sql_id": "mariadb_95_18",
        "database_name": "mariadb_95_18",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "EXPLAIN SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a; -- ROW",
        "target_query": "EXPLAIN SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 ( a INT );"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 ( a INT );"
        ]
    },
    {
        "sql_id": "mariadb_95_19",
        "database_name": "mariadb_95_19",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a; -- ROW",
        "target_query": "SELECT row( min(a), 1 ) = row( a, 1 ) AS al FROM t1 GROUP BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ROW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "SELECT ROW(10, 2, 3) IN (ROW(3, 2, 3), ROW(1, 2, 3), ROW(1, 3, 3));",
                "description": "ROW is used to represent a group of values as a tuple, which can then be used in comparisons such as IN or equality checks.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "SELECT ROW(value1, value2, ...) IN (ROW(value1, value2, ...), ...);",
                "description": "Works the same way as in MySQL, allowing for tuple comparisons in IN and = conditions.",
                "examples": [
                    "SELECT ROW(1, 2) IN (ROW(1, 2), ROW(3, 4));",
                    "SELECT ROW(10, 20) = ROW(5, 15);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1 ( a INT );"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1 ( a INT );"
        ]
    },
    {
        "sql_id": "mariadb_96_0",
        "database_name": "mariadb_96_0",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, 5, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_1",
        "database_name": "mariadb_96_1",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_2",
        "database_name": "mariadb_96_2",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_3",
        "database_name": "mariadb_96_3",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_4",
        "database_name": "mariadb_96_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_5",
        "database_name": "mariadb_96_5",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD('a', 5, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_6",
        "database_name": "mariadb_96_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_7",
        "database_name": "mariadb_96_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD('a', 0, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_8",
        "database_name": "mariadb_96_8",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD('a', 0, '') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_9",
        "database_name": "mariadb_96_9",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD('', 0, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_10",
        "database_name": "mariadb_96_10",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD('', 0, '') AS result; -- RPAD",
        "target_query": "SELECT RPAD('', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_11",
        "database_name": "mariadb_96_11",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD('a', -1, 'x'); -- RPAD",
        "target_query": "SELECT RPAD('a', -1, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_12",
        "database_name": "mariadb_96_12",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD('123456787890', 1, 'x'); -- RPAD",
        "target_query": "SELECT RPAD('123456787890', 1, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_13",
        "database_name": "mariadb_96_13",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD('a', 5, 'xy'); -- RPAD",
        "target_query": "SELECT RPAD('a', 5, 'xy');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_14",
        "database_name": "mariadb_96_14",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD(\"I LOVE SQL\", 20, \" \"); -- RPAD",
        "target_query": "SELECT RPAD(\"I LOVE SQL\", 20, \" \");",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_96_15",
        "database_name": "mariadb_96_15",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT RPAD(\"I LOVE SQL in the morning\", 20, \" \"); -- RPAD",
        "target_query": "SELECT RPAD(\"I LOVE SQL in the morning\", 20, \" \");",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [],
        "target_related_schemas": []
    },
    {
        "sql_id": "mariadb_97_6",
        "database_name": "mariadb_97_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3)); -- ISNULL",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ISNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Checks whether a value is NULL. Returns 1 if NULL, 0 otherwise.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL('abc');",
                    "SELECT IF(ISNULL(balance), 0, balance) FROM accounts;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1(a INT, b INT);",
            "ALTER TABLE t1 MODIFY a INT NOT NULL;",
            "ALTER TABLE t1 MODIFY a INT NULL;"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1(a INT, b INT);",
            "ALTER TABLE t1 MODIFY a INT NOT NULL;",
            "ALTER TABLE t1 MODIFY a INT NULL;"
        ]
    },
    {
        "sql_id": "mariadb_97_7",
        "database_name": "mariadb_97_7",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3)); -- ISNULL",
        "target_query": "SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ISNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Checks whether a value is NULL. Returns 1 if NULL, 0 otherwise.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL('abc');",
                    "SELECT IF(ISNULL(balance), 0, balance) FROM accounts;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t1(a INT, b INT);",
            "ALTER TABLE t1 MODIFY a INT NOT NULL;",
            "ALTER TABLE t1 MODIFY a INT NULL;"
        ],
        "target_related_schemas": [
            "CREATE TABLE t1(a INT, b INT);",
            "ALTER TABLE t1 MODIFY a INT NOT NULL;",
            "ALTER TABLE t1 MODIFY a INT NULL;"
        ]
    },
    {
        "sql_id": "mariadb_98_4",
        "database_name": "mariadb_98_4",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS CHAR) = CAST(t2.a AS CHAR)) > 0; -- UUID",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() as CHAR) = CAST(t2.a AS CHAR)) > 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UUID"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UUID()",
                "description": "In MySQL, the UUID() function generates a unique 128-bit identifier, typically represented as a string containing numbers and letters, in the standard UUID format.",
                "examples": [
                    "SELECT UUID();",
                    "SELECT CONCAT(UUID(), 'some_random_string');",
                    "SELECT UPPER(UUID());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UUID()",
                "description": "MariaDB supports the UUID() function, generating a unique 128-bit identifier in the same format as MySQL.",
                "examples": [
                    "SELECT UUID();",
                    "SELECT CONCAT(UUID(), 'some_random_string');",
                    "SELECT UPPER(UUID());"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t2(a INT, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t2(a INT, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_98_14",
        "database_name": "mariadb_98_14",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE",
        "target_query": "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t3(a INT, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t3(a INT, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_98_15",
        "database_name": "mariadb_98_15",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE",
        "target_query": "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Same as MySQL: COALESCE function and partition coalescing supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 13;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t3(a INT, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t3(a INT, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_98_16",
        "database_name": "mariadb_98_16",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- IFNULL",
        "target_query": "SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t3(a INT, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t3(a INT, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_98_17",
        "database_name": "mariadb_98_17",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "EXPLAIN SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- IFNULL",
        "target_query": "EXPLAIN SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "MariaDB behaves the same as MySQL, using IFNULL to return expr2 when expr1 is NULL, and expr1 otherwise.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE t3(a INT, b INT);"
        ],
        "target_related_schemas": [
            "CREATE TABLE t3(a INT, b INT);"
        ]
    },
    {
        "sql_id": "mariadb_99_6",
        "database_name": "mariadb_99_6",
        "source_dialect": "mysql",
        "target_dialect": "mariadb",
        "source_query": "SELECT TRIM(f1), COUNT(*) FROM table_varchar_pad_space GROUP BY f1; -- TRIM, COUNT",
        "target_query": "SELECT TRIM(f1), COUNT(*) FROM table_varchar_pad_space GROUP BY f1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM",
            "COUNT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            },
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function in MariaDB behaves exactly as in MySQL, removing specified characters or spaces from the beginning or end of the string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            },
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            }
        ],
        "source_related_schemas": [
            "CREATE TABLE table_varchar_pad_space (f1 VARCHAR(20));"
        ],
        "target_related_schemas": [
            "CREATE TABLE table_varchar_pad_space (f1 VARCHAR(20));"
        ]
    }
]
[
    {
        "sql_id": "monetdb_100_7",
        "database_name": "monetdb_100_7",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP",
        "target_query": "SELECT CAST('2001-01-01 00:00:00' AS TIMESTAMP);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMESTAMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMP('2023-06-15', '10:30:45')",
                "description": "TIMESTAMP is a function in MySQL that combines a date and a time string into a TIMESTAMP value, handling timezone-aware and non-timezone-aware date-time strings.",
                "examples": [
                    "SELECT TIMESTAMP('2023-06-15', '10:30:45');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45+02:00');",
                    "SELECT TIMESTAMP('2023-06-15 10:30:45') > TIMESTAMP('2023-06-14 10:30:45');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CAST('2023-06-15 10:30:45' AS TIMESTAMP)",
                "description": "MonetDB uses CAST to convert a date-time string to a TIMESTAMP value.",
                "examples": [
                    "SELECT CAST('2023-06-15 10:30:45' AS TIMESTAMP);",
                    "SELECT CAST('2023-06-15 10:30:45' AS TIMESTAMP);",
                    "SELECT CAST('2023-06-15 10:30:45' AS TIMESTAMP) > CAST('2023-06-14 10:30:45' AS TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT CAST('2001-01-01 00:00:00' AS TIMESTAMP);\n"
        ]
    },
    {
        "sql_id": "monetdb_100_10",
        "database_name": "monetdb_100_10",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' ); -- DATEDIFF",
        "target_query": "SELECT DATE '2007-12-31 23:59:59' - DATE '2007-12-30 00:00:00';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATEDIFF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATEDIFF(date1, date2)",
                "description": "Returns the number of days between two date or datetime expressions (date1 - date2), ignoring time part.",
                "examples": [
                    "SELECT DATEDIFF('2025-12-31', '2025-12-01');",
                    "SELECT DATEDIFF('2025-01-01', '2024-12-31');",
                    "SELECT DATEDIFF(NULL, '2025-01-01');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "date1 - date2",
                "description": "Subtracting one DATE from another returns the day difference as an integer.",
                "examples": [
                    "SELECT DATE '2025-12-31' - DATE '2025-12-01';",
                    "SELECT DATE '2025-01-01' - DATE '2024-12-31';"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP\n",
            "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' ); -- DATEDIFF\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT CAST('2001-01-01 00:00:00' AS TIMESTAMP);\n",
            "SELECT DATE '2007-12-31 23:59:59' - DATE '2007-12-30 00:00:00';\n"
        ]
    },
    {
        "sql_id": "monetdb_100_11",
        "database_name": "monetdb_100_11",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' ); -- TIMEDIFF",
        "target_query": "SELECT EXTRACT(EPOCH FROM timestamp '2000-01-01 00:00:00' - timestamp '2000-01-01 00:00:00');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMEDIFF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMEDIFF('12:00:00', '10:00:00')",
                "description": "TIMEDIFF is a function in MySQL that calculates the difference between two time values. The result is a TIME value that represents the time difference.",
                "examples": [
                    "SELECT TIMEDIFF('12:00:00', '10:00:00');",
                    "SELECT TIMEDIFF(NOW(), '2023-06-15 10:00:00');",
                    "SELECT TIMEDIFF('2023-06-15 12:00:00', '2023-06-15 10:00:00');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM timestamp '2023-06-15 12:00:00' - timestamp '2023-06-15 10:00:00')",
                "description": "MonetDB does not have a TIMEDIFF function but supports using EXTRACT to calculate the time difference in seconds.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM timestamp '2023-06-15 12:00:00' - timestamp '2023-06-15 10:00:00');",
                    "SELECT EXTRACT(EPOCH FROM NOW() - timestamp '2023-06-15 10:00:00');",
                    "SELECT EXTRACT(EPOCH FROM timestamp '2023-06-15 12:00:00' - timestamp '2023-06-15 10:00:00');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP\n",
            "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' ); -- DATEDIFF\n",
            "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' ); -- TIMEDIFF\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT CAST('2001-01-01 00:00:00' AS TIMESTAMP);\n",
            "SELECT DATE '2007-12-31 23:59:59' - DATE '2007-12-30 00:00:00';\n",
            "SELECT EXTRACT(EPOCH FROM timestamp '2000-01-01 00:00:00' - timestamp '2000-01-01 00:00:00');\n"
        ]
    },
    {
        "sql_id": "monetdb_100_12",
        "database_name": "monetdb_100_12",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT DATE_FORMAT( '2009-10-10 23:59:59', '%W %M %Y' ); -- DATE_FORMAT",
        "target_query": "SELECT sys.timestamp_to_str(TIMESTAMP '2009-10-10 23:59:59', 'W MM YYYY');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "sys.timestamp_to_str(timestamp_expr, format_str)",
                "description": "Formats a timestamp using MonetDB's internal formatting function. Format specifiers follow standard SQL/Oracle-style.",
                "examples": [
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2023-07-14 15:30:00', 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2022-01-01 08:45:30', 'HH24:MI:SS DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP\n",
            "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' ); -- DATEDIFF\n",
            "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' ); -- TIMEDIFF\n",
            "SELECT DATE_FORMAT( '2009-10-10 23:59:59', '%W %M %Y' ); -- DATE_FORMAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT CAST('2001-01-01 00:00:00' AS TIMESTAMP);\n",
            "SELECT DATE '2007-12-31 23:59:59' - DATE '2007-12-30 00:00:00';\n",
            "SELECT EXTRACT(EPOCH FROM timestamp '2000-01-01 00:00:00' - timestamp '2000-01-01 00:00:00');\n",
            "SELECT sys.timestamp_to_str(TIMESTAMP '2009-10-10 23:59:59', 'W MM YYYY');\n"
        ]
    },
    {
        "sql_id": "monetdb_100_13",
        "database_name": "monetdb_100_13",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT TIME( '2003-12-31 23:59:59' ); -- TIME",
        "target_query": "SELECT sys.time_to_str(TIMESTAMP '2003-12-31 23:59:59', '%H:%M:%S');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIME(time-value) | TIME_FORMAT(time-value, format)",
                "description": "The TIME(time-value) function in MySQL returns the time as text formatted as 'HH:MM:SS' from a given time-value. MySQL's TIME function does not support modifiers like in SQLite. To modify the time, you can use functions like DATE_ADD (to add an interval) or TIME_FORMAT (to custom format the time, including fractional seconds).",
                "examples": [
                    "SELECT TIME(NOW()); -- Returns the current time, formatted as 'HH:MM:SS'.",
                    "SELECT TIME(DATE_ADD(NOW(), INTERVAL 1 HOUR)); -- Adds 1 hour to the time, returning '15:16:00'.",
                    "SELECT TIME_FORMAT('14:16:00.123456', '%H:%i:%s.%f'); -- Returns '14:16:00.123456' with fractional seconds."
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "sys.time_to_str(time-value, format)",
                "description": "In MonetDB, the TIME function from SQLite can be emulated using sys.time_to_str to format TIME values as strings in the format 'HH:MM:SS' or 'HH:MM:SS.SSS'. Time arithmetic can be performed using sql_add with INTERVAL expressions.",
                "examples": [
                    "SELECT sys.time_to_str(CURRENT_TIME, '%H:%M:%S'); -- Returns the current time formatted as HH:MM:SS.",
                    "SELECT sys.time_to_str(sql_add(CURRENT_TIME, interval '1' hour), '%H:%M:%S'); -- Returns the time one hour after the current time.",
                    "SELECT sys.time_to_str(time '14:16:00', '%H:%M:%S.000'); -- Returns '14:16:00.000' with milliseconds."
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP\n",
            "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' ); -- DATEDIFF\n",
            "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' ); -- TIMEDIFF\n",
            "SELECT DATE_FORMAT( '2009-10-10 23:59:59', '%W %M %Y' ); -- DATE_FORMAT\n",
            "SELECT TIME( '2003-12-31 23:59:59' ); -- TIME\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT CAST('2001-01-01 00:00:00' AS TIMESTAMP);\n",
            "SELECT DATE '2007-12-31 23:59:59' - DATE '2007-12-30 00:00:00';\n",
            "SELECT EXTRACT(EPOCH FROM timestamp '2000-01-01 00:00:00' - timestamp '2000-01-01 00:00:00');\n",
            "SELECT sys.timestamp_to_str(TIMESTAMP '2009-10-10 23:59:59', 'W MM YYYY');\n",
            "SELECT sys.time_to_str(TIMESTAMP '2003-12-31 23:59:59', '%H:%M:%S');\n"
        ]
    },
    {
        "sql_id": "monetdb_100_15",
        "database_name": "monetdb_100_15",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:59:59' ); -- TIMESTAMPADD",
        "target_query": "SELECT TIMESTAMP '2003-01-02 23:59:59' + INTERVAL '1' MINUTE;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMESTAMPADD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMPADD(unit, interval, datetime_expr)",
                "description": "Adds a time interval to a date or timestamp expression using the specified unit.",
                "examples": [
                    "SELECT TIMESTAMPADD(DAY, 2, '2023-01-01');",
                    "SELECT TIMESTAMPADD(MINUTE, -5, '2023-05-10 12:00:00');",
                    "SELECT TIMESTAMPADD(YEAR, 1, '2020-06-15');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "datetime_expr + INTERVAL 'n' unit",
                "description": "Adds a time interval to a timestamp or date using SQL standard INTERVAL syntax with integer value and time unit.",
                "examples": [
                    "SELECT DATE '2023-01-01' + INTERVAL '2' DAY;",
                    "SELECT TIMESTAMP '2023-05-10 12:00:00' + INTERVAL '-5' MINUTE;",
                    "SELECT DATE '2020-06-15' + INTERVAL '1' YEAR;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP\n",
            "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' ); -- DATEDIFF\n",
            "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' ); -- TIMEDIFF\n",
            "SELECT DATE_FORMAT( '2009-10-10 23:59:59', '%W %M %Y' ); -- DATE_FORMAT\n",
            "SELECT TIME( '2003-12-31 23:59:59' ); -- TIME\n",
            "SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:59:59' ); -- TIMESTAMPADD\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT CAST('2001-01-01 00:00:00' AS TIMESTAMP);\n",
            "SELECT DATE '2007-12-31 23:59:59' - DATE '2007-12-30 00:00:00';\n",
            "SELECT EXTRACT(EPOCH FROM timestamp '2000-01-01 00:00:00' - timestamp '2000-01-01 00:00:00');\n",
            "SELECT sys.timestamp_to_str(TIMESTAMP '2009-10-10 23:59:59', 'W MM YYYY');\n",
            "SELECT sys.time_to_str(TIMESTAMP '2003-12-31 23:59:59', '%H:%M:%S');\n",
            "SELECT TIMESTAMP '2003-01-02 23:59:59' + INTERVAL '1' MINUTE;\n"
        ]
    },
    {
        "sql_id": "monetdb_100_16",
        "database_name": "monetdb_100_16",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT TIMESTAMPDIFF(MONTH, '2003-02-01 23:59:59', '2003-05-01' ); -- TIMESTAMPDIFF",
        "target_query": "SELECT CAST(DATE '2003-05-01' AS DATE) - CAST(DATE '2003-02-01 23:59:59' AS DATE);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TIMESTAMPDIFF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TIMESTAMPDIFF(unit, datetime1, datetime2)",
                "description": "Returns the difference between two datetime values in the specified unit.",
                "examples": [
                    "SELECT TIMESTAMPDIFF(YEAR, '2001-01-01', '2005-01-01');  -- 4",
                    "SELECT TIMESTAMPDIFF(MONTH, '2020-01-01', '2020-03-01');  -- 2",
                    "SELECT TIMESTAMPDIFF(DAY, '2020-01-01', '2020-01-31');    -- 30"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CAST(end_date AS DATE) - CAST(start_date AS DATE)",
                "description": "MonetDB calculates the difference between two dates using UNIX timestamps (seconds since '1970-01-01 00:00:00'). The result is returned in seconds. For example, the difference between '2005-01-01' and '2001-01-01' in MonetDB is calculated in seconds, and this must be converted manually into days, months, or years by further calculations.",
                "examples": [
                    "SELECT CAST(DATE '2005-01-01' AS DATE) - CAST(DATE '2001-01-01' AS DATE);  -- 126230400 seconds"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP\n",
            "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' ); -- DATEDIFF\n",
            "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' ); -- TIMEDIFF\n",
            "SELECT DATE_FORMAT( '2009-10-10 23:59:59', '%W %M %Y' ); -- DATE_FORMAT\n",
            "SELECT TIME( '2003-12-31 23:59:59' ); -- TIME\n",
            "SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:59:59' ); -- TIMESTAMPADD\n",
            "SELECT TIMESTAMPDIFF(MONTH, '2003-02-01 23:59:59', '2003-05-01' ); -- TIMESTAMPDIFF\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT CAST('2001-01-01 00:00:00' AS TIMESTAMP);\n",
            "SELECT DATE '2007-12-31 23:59:59' - DATE '2007-12-30 00:00:00';\n",
            "SELECT EXTRACT(EPOCH FROM timestamp '2000-01-01 00:00:00' - timestamp '2000-01-01 00:00:00');\n",
            "SELECT sys.timestamp_to_str(TIMESTAMP '2009-10-10 23:59:59', 'W MM YYYY');\n",
            "SELECT sys.time_to_str(TIMESTAMP '2003-12-31 23:59:59', '%H:%M:%S');\n",
            "SELECT TIMESTAMP '2003-01-02 23:59:59' + INTERVAL '1' MINUTE;\n",
            "SELECT CAST(DATE '2003-05-01' AS DATE) - CAST(DATE '2003-02-01 23:59:59' AS DATE);\n"
        ]
    },
    {
        "sql_id": "monetdb_100_17",
        "database_name": "monetdb_100_17",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT TO_SECONDS( '2009-11-29 23:59:59' ); -- TO_SECONDS",
        "target_query": "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2009-11-29 23:59:59') + 62167219200;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TO_SECONDS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the given datetime.",
                "examples": [
                    "SELECT TO_SECONDS('2000-01-01 00:00:00');",
                    "SELECT TO_SECONDS(NOW());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM ts) + 62167219200",
                "description": "Converts timestamp to the number of seconds since the year 0 by extracting the Unix epoch and adding the seconds from year 0 to 1970.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2020-12-31 12:00:00') + 62167219200;",
                    "SELECT EXTRACT(EPOCH FROM NOW()) + 62167219200;",
                    "SELECT CASE WHEN NULL IS NULL THEN NULL ELSE EXTRACT(EPOCH FROM NULL) + 62167219200 END;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT TIMESTAMP( '2001-01-01 00:00:00' ); -- TIMESTAMP\n",
            "SELECT DATEDIFF( '2007-12-31 23:59:59', '2007-12-30  00:00:00' ); -- DATEDIFF\n",
            "SELECT TIMEDIFF( '2000:01:01 00:00:00','2000:01:01 00:00:00' ); -- TIMEDIFF\n",
            "SELECT DATE_FORMAT( '2009-10-10 23:59:59', '%W %M %Y' ); -- DATE_FORMAT\n",
            "SELECT TIME( '2003-12-31 23:59:59' ); -- TIME\n",
            "SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:59:59' ); -- TIMESTAMPADD\n",
            "SELECT TIMESTAMPDIFF(MONTH, '2003-02-01 23:59:59', '2003-05-01' ); -- TIMESTAMPDIFF\n",
            "SELECT TO_SECONDS( '2009-11-29 23:59:59' ); -- TO_SECONDS\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (ts int);\n",
            "DROP TABLE t1;\n",
            "SELECT CAST('2001-01-01 00:00:00' AS TIMESTAMP);\n",
            "SELECT DATE '2007-12-31 23:59:59' - DATE '2007-12-30 00:00:00';\n",
            "SELECT EXTRACT(EPOCH FROM timestamp '2000-01-01 00:00:00' - timestamp '2000-01-01 00:00:00');\n",
            "SELECT sys.timestamp_to_str(TIMESTAMP '2009-10-10 23:59:59', 'W MM YYYY');\n",
            "SELECT sys.time_to_str(TIMESTAMP '2003-12-31 23:59:59', '%H:%M:%S');\n",
            "SELECT TIMESTAMP '2003-01-02 23:59:59' + INTERVAL '1' MINUTE;\n",
            "SELECT CAST(DATE '2003-05-01' AS DATE) - CAST(DATE '2003-02-01 23:59:59' AS DATE);\n",
            "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2009-11-29 23:59:59') + 62167219200;\n"
        ]
    },
    {
        "sql_id": "monetdb_101_7",
        "database_name": "monetdb_101_7",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select length(concat('*',s1,'*',s2,'*')) from t1; -- LENGTH, CONCAT",
        "target_query": "select octet_length('*' || s1 || '*' || s2 || '*') from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH",
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            },
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates two or more strings using the || operator. If any operand is NULL, result is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT 'Year: ' || CAST(2025 AS STRING);",
                    "SELECT name || '_' || CAST(id AS STRING) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (s1 blob);\n",
            "insert into t1 values (0x61), (0x6120), (0x612020);\n",
            "drop table t1;\n",
            "create table t1 (s1 blob, s2 blob);\n",
            "insert into t1 values (0x4100,0x4100);\n",
            "select length(concat('*',s1,'*',s2,'*')) from t1; -- LENGTH, CONCAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (s1 blob);\n",
            "insert into t1 values (X'61'), (X'6120'), (X'612020');\n",
            "drop table t1;\n",
            "create table t1 (s1 blob, s2 blob);\n",
            "insert into t1 values (X'4100',X'4100');\n",
            "select octet_length('*' || s1 || '*' || s2 || '*') from t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_101_12",
        "database_name": "monetdb_101_12",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select convert(123456789,unsigned); -- CONVERT",
        "target_query": "select CAST(123456789 AS BIGINT);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONVERT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONVERT(expression USING charset)",
                "description": "Converts data types or changes the character set.",
                "examples": [
                    "SELECT CONVERT('Hello World' USING utf8);",
                    "SELECT CONVERT(1234, CHAR);",
                    "SELECT CONVERT(column_name USING latin1) FROM my_table;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CAST(expression AS target_type)",
                "description": "MonetDB uses CAST for type conversion. No direct equivalent for CONVERT TO CHARACTER SET.",
                "examples": [
                    "SELECT CAST('Hello World' AS TEXT);",
                    "SELECT CAST(1234 AS VARCHAR);",
                    "SELECT CAST(column_name AS TEXT) FROM my_table;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (s1 blob);\n",
            "insert into t1 values (0x61), (0x6120), (0x612020);\n",
            "drop table t1;\n",
            "create table t1 (s1 blob, s2 blob);\n",
            "insert into t1 values (0x4100,0x4100);\n",
            "select length(concat('*',s1,'*',s2,'*')) from t1; -- LENGTH, CONCAT\n",
            "drop table t1;\n",
            "create table t1 (s1 blob, s2 varchar(1));\n",
            "insert into t1 values (0x41,'a'), (0x4100,'b'), (0x41,'c'), (0x4100,'d');\n",
            "select convert(123456789,unsigned); -- CONVERT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (s1 blob);\n",
            "insert into t1 values (X'61'), (X'6120'), (X'612020');\n",
            "drop table t1;\n",
            "create table t1 (s1 blob, s2 blob);\n",
            "insert into t1 values (X'4100',X'4100');\n",
            "select octet_length('*' || s1 || '*' || s2 || '*') from t1;\n",
            "drop table t1;\n",
            "create table t1 (s1 blob, s2 varchar(1));\n",
            "insert into t1 values (X'41','a'), (X'4100','b'), (X'41','c'), (X'4100','d');\n",
            "select CAST(123456789 AS BIGINT);\n"
        ]
    },
    {
        "sql_id": "monetdb_102_2",
        "database_name": "monetdb_102_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW",
        "target_query": "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 1);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CAST()",
                "description": "MonetDB uses the CAST function to extract a DATE from a DATETIME or TIMESTAMP.",
                "examples": [
                    "SELECT CAST('2023-05-01 12:34:56' AS DATE) AS result;",
                    "SELECT CAST(NOW() AS DATE) AS current_date_result;",
                    "SELECT CAST('2023-05-01' AS DATE) AS date_from_datetime;"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "MonetDB uses CURRENT_TIMESTAMP to return the current date and time, similar to PostgreSQL's approach.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 1);\n"
        ]
    },
    {
        "sql_id": "monetdb_102_3",
        "database_name": "monetdb_102_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COUNT",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "MonetDB uses CURRENT_TIMESTAMP to return the current date and time, similar to PostgreSQL's approach.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 1);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n"
        ]
    },
    {
        "sql_id": "monetdb_102_4",
        "database_name": "monetdb_102_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t1 VALUES (DATE(NOW()), 2); -- DATE, NOW",
        "target_query": "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE()",
                "description": "In MySQL, the DATE function extracts the date part from a DATETIME or TIMESTAMP value.",
                "examples": [
                    "SELECT DATE('2023-05-01 12:34:56') AS result;",
                    "SELECT DATE(NOW()) AS current_date_result;",
                    "SELECT DATE(CAST('2023-05-01' AS DATETIME)) AS date_from_datetime;"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CAST()",
                "description": "MonetDB uses the CAST function to extract a DATE from a DATETIME or TIMESTAMP.",
                "examples": [
                    "SELECT CAST('2023-05-01 12:34:56' AS DATE) AS result;",
                    "SELECT CAST(NOW() AS DATE) AS current_date_result;",
                    "SELECT CAST('2023-05-01' AS DATE) AS date_from_datetime;"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "MonetDB uses CURRENT_TIMESTAMP to return the current date and time, similar to PostgreSQL's approach.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 2); -- DATE, NOW\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 1);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 2);\n"
        ]
    },
    {
        "sql_id": "monetdb_102_5",
        "database_name": "monetdb_102_5",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COUNT",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "MonetDB uses CURRENT_TIMESTAMP to return the current date and time, similar to PostgreSQL's approach.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 2); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 1);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 2);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n"
        ]
    },
    {
        "sql_id": "monetdb_102_6",
        "database_name": "monetdb_102_6",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a = NOW() AND b = 1; -- COUNT, NOW",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP AND b = 1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COUNT",
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            },
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "MonetDB uses CURRENT_TIMESTAMP to return the current date and time, similar to PostgreSQL's approach.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 2); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW() AND b = 1; -- COUNT, NOW\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 1);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 2);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP AND b = 1;\n"
        ]
    },
    {
        "sql_id": "monetdb_102_8",
        "database_name": "monetdb_102_8",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "CREATE TABLE t1 SELECT curdate() AS f1; -- CURDATE",
        "target_query": "CREATE TABLE t1 AS SELECT current_date AS f1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CURDATE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CURDATE()",
                "description": "Returns the current date without the time component.",
                "examples": [
                    "SELECT CURDATE();",
                    "SELECT CONCAT('Today\\'s date is: ', CURDATE());",
                    "SELECT 1 WHERE CURDATE() = CURDATE();"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "current_date",
                "description": "Returns the current date without the time component, equivalent to MySQL's CURDATE().",
                "examples": [
                    "SELECT current_date;",
                    "SELECT CONCAT('Today\\'s date is: ', current_date);",
                    "SELECT 1 WHERE current_date = current_date;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 2); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW() AND b = 1; -- COUNT, NOW\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 SELECT curdate() AS f1; -- CURDATE\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 1);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 2);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP AND b = 1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT current_date AS f1;\n"
        ]
    },
    {
        "sql_id": "monetdb_102_9",
        "database_name": "monetdb_102_9",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT hour(f1), minute(f1), second(f1) FROM t1; -- HOUR, MINUTE, SECOND",
        "target_query": "SELECT EXTRACT(HOUR FROM f1), \"minute\"(f1), EXTRACT(SECOND FROM f1) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "HOUR",
            "MINUTE",
            "SECOND"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "HOUR(expr)",
                "description": "Extracts the hour (0\u201323) from a time or datetime expression.",
                "examples": [
                    "SELECT HOUR('18:45:30');",
                    "SELECT HOUR('2023-10-01 08:15:00');",
                    "SELECT HOUR(CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "MINUTE()",
                "description": "Extracts the minute part from a time or datetime value.",
                "examples": [
                    "SELECT MINUTE('12:34:56');",
                    "SELECT MINUTE('2025-01-01 10:30:00');",
                    "SELECT MINUTE(NULL);"
                ]
            },
            {
                "expression": "SECOND(time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT SECOND('10:11:12');",
                    "SELECT SECOND(4.99999999991e0);",
                    "SELECT SECOND(CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(HOUR FROM expr)",
                "description": "Returns the hour component of a time or timestamp expression.",
                "examples": [
                    "SELECT EXTRACT(HOUR FROM TIME '18:45:30');",
                    "SELECT EXTRACT(HOUR FROM TIMESTAMP '2023-10-01 08:15:00');",
                    "SELECT EXTRACT(HOUR FROM CURRENT_TIMESTAMP);"
                ]
            },
            {
                "expression": "\"minute\"()",
                "description": "Extracts the minute part from a time or timestamp value. In MonetDB, the function is used with the input explicitly cast to either `time` or `timestamp`.",
                "examples": [
                    "SELECT \"minute\"(time '12:34:56');",
                    "SELECT \"minute\"(timestamp '2025-01-01 10:30:00');",
                    "SELECT \"minute\"(NULL);"
                ]
            },
            {
                "expression": "EXTRACT(SECOND FROM time)",
                "description": "Extracts the second part from a TIME, DATETIME, or TIMESTAMP value.",
                "examples": [
                    "SELECT EXTRACT(SECOND FROM TIME '10:11:12');",
                    "SELECT EXTRACT(SECOND FROM CAST('2007-07-19' AS DATE));"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 2); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW() AND b = 1; -- COUNT, NOW\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 SELECT curdate() AS f1; -- CURDATE\n",
            "SELECT hour(f1), minute(f1), second(f1) FROM t1; -- HOUR, MINUTE, SECOND\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 1);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 2);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP AND b = 1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT current_date AS f1;\n",
            "SELECT EXTRACT(HOUR FROM f1), \"minute\"(f1), EXTRACT(SECOND FROM f1) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_102_18",
        "database_name": "monetdb_102_18",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT 1 FROM (SELECT MAKEDATE(2011,0)) a; -- MAKEDATE",
        "target_query": "SELECT 1 FROM (SELECT DATE '2011-01-01' + INTERVAL '-1' DAY) a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "MAKEDATE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "MAKEDATE(year, day_of_year)",
                "description": "Returns a date from the given year and day of the year.",
                "examples": [
                    "SELECT MAKEDATE(2009, 1) AS first_day_of_year;",
                    "SELECT MAKEDATE(2025, 100) AS specific_date;",
                    "SELECT MAKEDATE(2020, 366) AS last_day_of_year;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "DATE 'year-01-01' + INTERVAL 'day_of_year - 1' DAY",
                "description": "Returns a date from the given year and day of the year by adding interval days to January 1st.",
                "examples": [
                    "SELECT DATE '2009-01-01' AS first_day_of_year;",
                    "SELECT DATE '2025-01-01' + INTERVAL '99' DAY AS specific_date;",
                    "SELECT DATE '2020-01-01' + INTERVAL '365' DAY AS last_day_of_year;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 1); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n",
            "INSERT INTO t1 VALUES (DATE(NOW()), 2); -- DATE, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW(); -- COUNT, NOW\n",
            "SELECT COUNT(*) FROM t1 WHERE a = NOW() AND b = 1; -- COUNT, NOW\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 SELECT curdate() AS f1; -- CURDATE\n",
            "SELECT hour(f1), minute(f1), second(f1) FROM t1; -- HOUR, MINUTE, SECOND\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1(a DATE, b YEAR);\n",
            "INSERT INTO t1 VALUES ('2011-01-01',2011);\n",
            "DROP TABLE t1;\n",
            "SELECT 1 FROM (SELECT MAKEDATE(2011,0)) a; -- MAKEDATE\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE, b INT);\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 1);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n",
            "INSERT INTO t1 VALUES (CAST(CURRENT_TIMESTAMP AS DATE), 2);\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP;\n",
            "SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP AND b = 1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT current_date AS f1;\n",
            "SELECT EXTRACT(HOUR FROM f1), \"minute\"(f1), EXTRACT(SECOND FROM f1) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1(a DATE, b SMALLINT);\n",
            "INSERT INTO t1 VALUES ('2011-01-01',2011);\n",
            "DROP TABLE t1;\n",
            "SELECT 1 FROM (SELECT DATE '2011-01-01' + INTERVAL '-1' DAY) a;\n"
        ]
    },
    {
        "sql_id": "monetdb_2_2",
        "database_name": "monetdb_2_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "WITH recursive qn as (select 1 as n, cast('x' as char(100)) as un union all select 1+n, concat(un,'x') from qn where n<10) select * from qn; -- CONCAT",
        "target_query": "WITH recursive qn as (select 1 as n, cast('x' as char(100)) as un union all select 1+n, un || 'x' from qn where n<10) select * from qn; -- CONCAT",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates two or more strings using the || operator. If any operand is NULL, result is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT 'Year: ' || CAST(2025 AS STRING);",
                    "SELECT name || '_' || CAST(id AS STRING) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t;\n",
            "CREATE TABLE t(c char(3), vc varchar(3), b binary(3), vb varbinary(3));\n",
            "WITH recursive qn as (select 1 as n, cast('x' as char(100)) as un union all select 1+n, concat(un,'x') from qn where n<10) select * from qn; -- CONCAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t;\n",
            "CREATE TABLE t(c VARCHAR, vc VARCHAR, b BLOB, vb BLOB);\n",
            "WITH recursive qn as (select 1 as n, cast('x' as char(100)) as un union all select 1+n, un || 'x' from qn where n<10) select * from qn; -- CONCAT\n"
        ]
    },
    {
        "sql_id": "monetdb_3_2",
        "database_name": "monetdb_3_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT IF (COUNT(*) > 0, \"YES\", \"NO\") AS \"IMPLICIT COMMIT\" FROM trans; -- IF",
        "target_query": "SELECT CASE WHEN COUNT(*) > 0 THEN 'YES' ELSE 'NO' END AS \"IMPLICIT COMMIT\" FROM trans; -- CASE WHEN",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "MonetDB does not support the `IF` function, but you can use the `CASE WHEN` expression to achieve similar functionality. It evaluates a condition and returns different values based on the truth value of the condition.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS trans;\n",
            "CREATE TABLE trans (a INT);\n",
            "SELECT IF (COUNT(*) > 0, \"YES\", \"NO\") AS \"IMPLICIT COMMIT\" FROM trans; -- IF\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS trans;\n",
            "CREATE TABLE trans (a INT);\n",
            "SELECT CASE WHEN COUNT(*) > 0 THEN 'YES' ELSE 'NO' END AS \"IMPLICIT COMMIT\" FROM trans; -- CASE WHEN\n"
        ]
    },
    {
        "sql_id": "monetdb_4_4",
        "database_name": "monetdb_4_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(CAST(a AS VARCHAR)) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "MonetDB's TRIM function operates the same way as in MySQL and other databases. It removes unwanted characters from the start and/or end of a string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = a;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b; -- TRIM\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id SERIAL, a BIGINT, b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = CAST(a AS VARCHAR);\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(CAST(a AS VARCHAR)) = b;\n"
        ]
    },
    {
        "sql_id": "monetdb_4_5",
        "database_name": "monetdb_4_5",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(CAST(a AS VARCHAR)) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "MonetDB's TRIM function operates the same way as in MySQL and other databases. It removes unwanted characters from the start and/or end of a string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = a;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b; -- TRIM\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id SERIAL, a BIGINT, b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = CAST(a AS VARCHAR);\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(CAST(a AS VARCHAR)) = b;\n"
        ]
    },
    {
        "sql_id": "monetdb_4_6",
        "database_name": "monetdb_4_6",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(CAST(a AS VARCHAR)) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "MonetDB's TRIM function operates the same way as in MySQL and other databases. It removes unwanted characters from the start and/or end of a string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = a;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a) = b; -- TRIM\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id SERIAL, a BIGINT, b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = CAST(a AS VARCHAR);\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(CAST(a AS VARCHAR)) = b;\n"
        ]
    },
    {
        "sql_id": "monetdb_4_7",
        "database_name": "monetdb_4_7",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b; -- TRIM",
        "target_query": "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(CAST(a AS VARCHAR)) = b;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "MonetDB's TRIM function operates the same way as in MySQL and other databases. It removes unwanted characters from the start and/or end of a string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = a;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b; -- TRIM\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id SERIAL, a BIGINT, b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = CAST(a AS VARCHAR);\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(CAST(a AS VARCHAR)) = b;\n"
        ]
    },
    {
        "sql_id": "monetdb_4_11",
        "database_name": "monetdb_4_11",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a) BETWEEN 0 and 0.9; -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE COALESCE(a, NULL) BETWEEN 0 AND 0.9;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function is supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = a;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b; -- TRIM\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a BIGINT);\n",
            "INSERT INTO t1 VALUES (1);\n",
            "SELECT * FROM t1 WHERE coalesce(a) BETWEEN 0 and 0.9; -- COALESCE\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id SERIAL, a BIGINT, b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = CAST(a AS VARCHAR);\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a BIGINT);\n",
            "INSERT INTO t1 VALUES (1);\n",
            "SELECT * FROM t1 WHERE COALESCE(a, NULL) BETWEEN 0 AND 0.9;\n"
        ]
    },
    {
        "sql_id": "monetdb_4_12",
        "database_name": "monetdb_4_12",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a)=0.9; -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE COALESCE(a, NULL) = 0.9;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function is supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = a;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b; -- TRIM\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a BIGINT);\n",
            "INSERT INTO t1 VALUES (1);\n",
            "SELECT * FROM t1 WHERE coalesce(a) BETWEEN 0 and 0.9; -- COALESCE\n",
            "SELECT * FROM t1 WHERE coalesce(a)=0.9; -- COALESCE\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id SERIAL, a BIGINT, b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = CAST(a AS VARCHAR);\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a BIGINT);\n",
            "INSERT INTO t1 VALUES (1);\n",
            "SELECT * FROM t1 WHERE COALESCE(a, NULL) BETWEEN 0 AND 0.9;\n",
            "SELECT * FROM t1 WHERE COALESCE(a, NULL) = 0.9;\n"
        ]
    },
    {
        "sql_id": "monetdb_4_13",
        "database_name": "monetdb_4_13",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT * FROM t1 WHERE coalesce(a) in (0.8,0.9); -- COALESCE",
        "target_query": "SELECT * FROM t1 WHERE COALESCE(a, NULL) IN (0.8, 0.9);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function is supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id INT AUTO_INCREMENT PRIMARY KEY,a BIGINT(20) UNSIGNED,b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = a;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(a) = b; -- TRIM\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b; -- TRIM\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a BIGINT);\n",
            "INSERT INTO t1 VALUES (1);\n",
            "SELECT * FROM t1 WHERE coalesce(a) BETWEEN 0 and 0.9; -- COALESCE\n",
            "SELECT * FROM t1 WHERE coalesce(a)=0.9; -- COALESCE\n",
            "SELECT * FROM t1 WHERE coalesce(a) in (0.8,0.9); -- COALESCE\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (id SERIAL, a BIGINT, b VARCHAR(20));\n",
            "INSERT INTO t1 (a) VALUES (0), (9223372036854775807), (9223372036854775806), (9223372036854775805);\n",
            "UPDATE t1 SET b = CAST(a AS VARCHAR);\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775807 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775806 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 9223372036854775805 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(CAST(a AS VARCHAR)) = b;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a BIGINT);\n",
            "INSERT INTO t1 VALUES (1);\n",
            "SELECT * FROM t1 WHERE COALESCE(a, NULL) BETWEEN 0 AND 0.9;\n",
            "SELECT * FROM t1 WHERE COALESCE(a, NULL) = 0.9;\n",
            "SELECT * FROM t1 WHERE COALESCE(a, NULL) IN (0.8, 0.9);\n"
        ]
    },
    {
        "sql_id": "monetdb_6_5",
        "database_name": "monetdb_6_5",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT",
        "target_query": "CREATE TABLE t1 AS SELECT REPEAT('a', 4000) AS a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns the string 'str' repeated 'count' times. Behavior on NULL matches MySQL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(0x3A), (0x3B), (0x3C), (0x3D), (0x3E), (0x3F), (0x40), (0x5B), (0x5C), (0x5D), (0x5E), (0x5F), (0x60), (0x7B), (0x7C), (0x7D), (0x7E);\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(X'3A'), (X'3B'), (X'3C'), (X'3D'), (X'3E'), (X'3F'), (X'40'), (X'5B'), (X'5C'), (X'5D'), (X'5E'), (X'5F'), (X'60'), (X'7B'), (X'7C'), (X'7D'), (X'7E');\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT REPEAT('a', 4000) AS a;\n"
        ]
    },
    {
        "sql_id": "monetdb_6_12",
        "database_name": "monetdb_6_12",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT",
        "target_query": "CREATE TABLE head AS SELECT b1.b || b2.b AS head FROM t1 b1, t1 b2; -- CONCAT",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates two or more strings using the || operator. If any operand is NULL, result is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT 'Year: ' || CAST(2025 AS STRING);",
                    "SELECT name || '_' || CAST(id AS STRING) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(0x3A), (0x3B), (0x3C), (0x3D), (0x3E), (0x3F), (0x40), (0x5B), (0x5C), (0x5D), (0x5E), (0x5F), (0x60), (0x7B), (0x7C), (0x7D), (0x7E);\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (b VARCHAR(2));\n",
            "INSERT INTO t1 VALUES ('0'),('1'),('2'),('3'),('4'),('5'),('6'),('7');\n",
            "INSERT INTO t1 VALUES ('8'),('9'),('A'),('B'),('C'),('D'),('E'),('F');\n",
            "DROP TABLE IF EXISTS head;\n",
            "DROP TABLE IF EXISTS tail;\n",
            "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(X'3A'), (X'3B'), (X'3C'), (X'3D'), (X'3E'), (X'3F'), (X'40'), (X'5B'), (X'5C'), (X'5D'), (X'5E'), (X'5F'), (X'60'), (X'7B'), (X'7C'), (X'7D'), (X'7E');\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT REPEAT('a', 4000) AS a;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (b VARCHAR(2));\n",
            "INSERT INTO t1 VALUES ('0'),('1'),('2'),('3'),('4'),('5'),('6'),('7');\n",
            "INSERT INTO t1 VALUES ('8'),('9'),('A'),('B'),('C'),('D'),('E'),('F');\n",
            "DROP TABLE IF EXISTS head;\n",
            "DROP TABLE IF EXISTS tail;\n",
            "CREATE TABLE head AS SELECT b1.b || b2.b AS head FROM t1 b1, t1 b2; -- CONCAT\n"
        ]
    },
    {
        "sql_id": "monetdb_6_13",
        "database_name": "monetdb_6_13",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT",
        "target_query": "CREATE TABLE tail AS SELECT b1.b || b2.b AS tail FROM t1 b1, t1 b2; -- CONCAT",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates two or more strings using the || operator. If any operand is NULL, result is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT 'Year: ' || CAST(2025 AS STRING);",
                    "SELECT name || '_' || CAST(id AS STRING) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(0x3A), (0x3B), (0x3C), (0x3D), (0x3E), (0x3F), (0x40), (0x5B), (0x5C), (0x5D), (0x5E), (0x5F), (0x60), (0x7B), (0x7C), (0x7D), (0x7E);\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (b VARCHAR(2));\n",
            "INSERT INTO t1 VALUES ('0'),('1'),('2'),('3'),('4'),('5'),('6'),('7');\n",
            "INSERT INTO t1 VALUES ('8'),('9'),('A'),('B'),('C'),('D'),('E'),('F');\n",
            "DROP TABLE IF EXISTS head;\n",
            "DROP TABLE IF EXISTS tail;\n",
            "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT\n",
            "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(X'3A'), (X'3B'), (X'3C'), (X'3D'), (X'3E'), (X'3F'), (X'40'), (X'5B'), (X'5C'), (X'5D'), (X'5E'), (X'5F'), (X'60'), (X'7B'), (X'7C'), (X'7D'), (X'7E');\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT REPEAT('a', 4000) AS a;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (b VARCHAR(2));\n",
            "INSERT INTO t1 VALUES ('0'),('1'),('2'),('3'),('4'),('5'),('6'),('7');\n",
            "INSERT INTO t1 VALUES ('8'),('9'),('A'),('B'),('C'),('D'),('E'),('F');\n",
            "DROP TABLE IF EXISTS head;\n",
            "DROP TABLE IF EXISTS tail;\n",
            "CREATE TABLE head AS SELECT b1.b || b2.b AS head FROM t1 b1, t1 b2; -- CONCAT\n",
            "CREATE TABLE tail AS SELECT b1.b || b2.b AS tail FROM t1 b1, t1 b2; -- CONCAT\n"
        ]
    },
    {
        "sql_id": "monetdb_6_19",
        "database_name": "monetdb_6_19",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=2; -- OCTET_LENGTH",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND LENGTH(a)=2; -- OCTET_LENGTH (MonetDB uses LENGTH instead of OCTET_LENGTH)",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "OCTET_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT LENGTH('Hello World');",
                    "SELECT LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(0x3A), (0x3B), (0x3C), (0x3D), (0x3E), (0x3F), (0x40), (0x5B), (0x5C), (0x5D), (0x5E), (0x5F), (0x60), (0x7B), (0x7C), (0x7D), (0x7E);\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (b VARCHAR(2));\n",
            "INSERT INTO t1 VALUES ('0'),('1'),('2'),('3'),('4'),('5'),('6'),('7');\n",
            "INSERT INTO t1 VALUES ('8'),('9'),('A'),('B'),('C'),('D'),('E'),('F');\n",
            "DROP TABLE IF EXISTS head;\n",
            "DROP TABLE IF EXISTS tail;\n",
            "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT\n",
            "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT\n",
            "DROP TABLE head;\n",
            "DROP TABLE tail;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;\n",
            "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=2; -- OCTET_LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(X'3A'), (X'3B'), (X'3C'), (X'3D'), (X'3E'), (X'3F'), (X'40'), (X'5B'), (X'5C'), (X'5D'), (X'5E'), (X'5F'), (X'60'), (X'7B'), (X'7C'), (X'7D'), (X'7E');\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT REPEAT('a', 4000) AS a;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (b VARCHAR(2));\n",
            "INSERT INTO t1 VALUES ('0'),('1'),('2'),('3'),('4'),('5'),('6'),('7');\n",
            "INSERT INTO t1 VALUES ('8'),('9'),('A'),('B'),('C'),('D'),('E'),('F');\n",
            "DROP TABLE IF EXISTS head;\n",
            "DROP TABLE IF EXISTS tail;\n",
            "CREATE TABLE head AS SELECT b1.b || b2.b AS head FROM t1 b1, t1 b2; -- CONCAT\n",
            "CREATE TABLE tail AS SELECT b1.b || b2.b AS tail FROM t1 b1, t1 b2; -- CONCAT\n",
            "DROP TABLE head;\n",
            "DROP TABLE tail;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;\n",
            "SELECT COUNT(*) FROM t1 WHERE a<>'' AND LENGTH(a)=2; -- OCTET_LENGTH (MonetDB uses LENGTH instead of OCTET_LENGTH)\n"
        ]
    },
    {
        "sql_id": "monetdb_6_20",
        "database_name": "monetdb_6_20",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT * FROM t1 WHERE CHAR_LENGTH(a)=2; -- CHAR_LENGTH",
        "target_query": "SELECT * FROM t1 WHERE char_length(a)=2; -- CHAR_LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CHAR_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in the string, not bytes.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "char_length(expr)",
                "description": "Returns the number of characters in a string (char_length and length are equivalent).",
                "examples": [
                    "SELECT char_length('abc');",
                    "SELECT char_length('\u4f60\u597d');",
                    "SELECT char_length('a\u4f60b\u597dc');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(0x3A), (0x3B), (0x3C), (0x3D), (0x3E), (0x3F), (0x40), (0x5B), (0x5C), (0x5D), (0x5E), (0x5F), (0x60), (0x7B), (0x7C), (0x7D), (0x7E);\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (b VARCHAR(2));\n",
            "INSERT INTO t1 VALUES ('0'),('1'),('2'),('3'),('4'),('5'),('6'),('7');\n",
            "INSERT INTO t1 VALUES ('8'),('9'),('A'),('B'),('C'),('D'),('E'),('F');\n",
            "DROP TABLE IF EXISTS head;\n",
            "DROP TABLE IF EXISTS tail;\n",
            "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT\n",
            "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT\n",
            "DROP TABLE head;\n",
            "DROP TABLE tail;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;\n",
            "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=2; -- OCTET_LENGTH\n",
            "SELECT * FROM t1 WHERE CHAR_LENGTH(a)=2; -- CHAR_LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(X'3A'), (X'3B'), (X'3C'), (X'3D'), (X'3E'), (X'3F'), (X'40'), (X'5B'), (X'5C'), (X'5D'), (X'5E'), (X'5F'), (X'60'), (X'7B'), (X'7C'), (X'7D'), (X'7E');\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT REPEAT('a', 4000) AS a;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (b VARCHAR(2));\n",
            "INSERT INTO t1 VALUES ('0'),('1'),('2'),('3'),('4'),('5'),('6'),('7');\n",
            "INSERT INTO t1 VALUES ('8'),('9'),('A'),('B'),('C'),('D'),('E'),('F');\n",
            "DROP TABLE IF EXISTS head;\n",
            "DROP TABLE IF EXISTS tail;\n",
            "CREATE TABLE head AS SELECT b1.b || b2.b AS head FROM t1 b1, t1 b2; -- CONCAT\n",
            "CREATE TABLE tail AS SELECT b1.b || b2.b AS tail FROM t1 b1, t1 b2; -- CONCAT\n",
            "DROP TABLE head;\n",
            "DROP TABLE tail;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;\n",
            "SELECT COUNT(*) FROM t1 WHERE a<>'' AND LENGTH(a)=2; -- OCTET_LENGTH (MonetDB uses LENGTH instead of OCTET_LENGTH)\n",
            "SELECT * FROM t1 WHERE char_length(a)=2; -- CHAR_LENGTH\n"
        ]
    },
    {
        "sql_id": "monetdb_6_21",
        "database_name": "monetdb_6_21",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=3; -- OCTET_LENGTH",
        "target_query": "SELECT COUNT(*) FROM t1 WHERE a<>'' AND LENGTH(a)=3; -- OCTET_LENGTH (MonetDB uses LENGTH instead of OCTET_LENGTH)",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "OCTET_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT LENGTH('Hello World');",
                    "SELECT LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(0x3A), (0x3B), (0x3C), (0x3D), (0x3E), (0x3F), (0x40), (0x5B), (0x5C), (0x5D), (0x5E), (0x5F), (0x60), (0x7B), (0x7C), (0x7D), (0x7E);\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 SELECT repeat('a',4000) a; -- REPEAT\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (b VARCHAR(2));\n",
            "INSERT INTO t1 VALUES ('0'),('1'),('2'),('3'),('4'),('5'),('6'),('7');\n",
            "INSERT INTO t1 VALUES ('8'),('9'),('A'),('B'),('C'),('D'),('E'),('F');\n",
            "DROP TABLE IF EXISTS head;\n",
            "DROP TABLE IF EXISTS tail;\n",
            "CREATE TABLE head AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2; -- CONCAT\n",
            "CREATE TABLE tail AS SELECT concat(b1.b, b2.b) AS tail FROM t1 b1, t1 b2; -- CONCAT\n",
            "DROP TABLE head;\n",
            "DROP TABLE tail;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;\n",
            "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=2; -- OCTET_LENGTH\n",
            "SELECT * FROM t1 WHERE CHAR_LENGTH(a)=2; -- CHAR_LENGTH\n",
            "SELECT COUNT(*) FROM t1 WHERE a<>'' AND OCTET_LENGTH(a)=3; -- OCTET_LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(c1 CHAR(4));\n",
            "INSERT INTO t1 VALUES(X'3A'), (X'3B'), (X'3C'), (X'3D'), (X'3E'), (X'3F'), (X'40'), (X'5B'), (X'5C'), (X'5D'), (X'5E'), (X'5F'), (X'60'), (X'7B'), (X'7C'), (X'7D'), (X'7E');\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT REPEAT('a', 4000) AS a;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (b VARCHAR(2));\n",
            "INSERT INTO t1 VALUES ('0'),('1'),('2'),('3'),('4'),('5'),('6'),('7');\n",
            "INSERT INTO t1 VALUES ('8'),('9'),('A'),('B'),('C'),('D'),('E'),('F');\n",
            "DROP TABLE IF EXISTS head;\n",
            "DROP TABLE IF EXISTS tail;\n",
            "CREATE TABLE head AS SELECT b1.b || b2.b AS head FROM t1 b1, t1 b2; -- CONCAT\n",
            "CREATE TABLE tail AS SELECT b1.b || b2.b AS tail FROM t1 b1, t1 b2; -- CONCAT\n",
            "DROP TABLE head;\n",
            "DROP TABLE tail;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 AS SELECT '111111' AS code, ' ' AS a LIMIT 1;\n",
            "SELECT COUNT(*) FROM t1 WHERE a<>'' AND LENGTH(a)=2; -- OCTET_LENGTH (MonetDB uses LENGTH instead of OCTET_LENGTH)\n",
            "SELECT * FROM t1 WHERE char_length(a)=2; -- CHAR_LENGTH\n",
            "SELECT COUNT(*) FROM t1 WHERE a<>'' AND LENGTH(a)=3; -- OCTET_LENGTH (MonetDB uses LENGTH instead of OCTET_LENGTH)\n"
        ]
    },
    {
        "sql_id": "monetdb_7_4",
        "database_name": "monetdb_7_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT c1, LENGTH(c1) FROM h; -- LENGTH",
        "target_query": "SELECT c1, octet_length(c1) FROM h; -- LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, LENGTH(c1) FROM h; -- LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, octet_length(c1) FROM h; -- LENGTH\n"
        ]
    },
    {
        "sql_id": "monetdb_7_5",
        "database_name": "monetdb_7_5",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD",
        "target_query": "SELECT c1, CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH(c1))), c1) FROM h;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, LENGTH(c1) FROM h; -- LENGTH\n",
            "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, octet_length(c1) FROM h; -- LENGTH\n",
            "SELECT c1, CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH(c1))), c1) FROM h;\n"
        ]
    },
    {
        "sql_id": "monetdb_7_6",
        "database_name": "monetdb_7_6",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD",
        "target_query": "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, LENGTH(c1) FROM h; -- LENGTH\n",
            "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, octet_length(c1) FROM h; -- LENGTH\n",
            "SELECT c1, CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH(c1))), c1) FROM h;\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n"
        ]
    },
    {
        "sql_id": "monetdb_7_9",
        "database_name": "monetdb_7_9",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT INSTR(c1, 'h') FROM h; -- INSTR",
        "target_query": "SELECT POSITION('h' in c1) FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "position(substr in str)",
                "description": "Returns the position of substr in str (1-based). Returns 0 if not found.",
                "examples": [
                    "SELECT position('bar' in 'foobar');   -- Returns 4",
                    "SELECT position('x' in 'abc');        -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, LENGTH(c1) FROM h; -- LENGTH\n",
            "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT INSTR(c1, 'h') FROM h; -- INSTR\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, octet_length(c1) FROM h; -- LENGTH\n",
            "SELECT c1, CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH(c1))), c1) FROM h;\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT POSITION('h' in c1) FROM h; -- INSTR\n"
        ]
    },
    {
        "sql_id": "monetdb_7_10",
        "database_name": "monetdb_7_10",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT INSTR(c1, '') FROM h; -- INSTR",
        "target_query": "SELECT POSITION('' in c1) FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "position(substr in str)",
                "description": "Returns the position of substr in str (1-based). Returns 0 if not found.",
                "examples": [
                    "SELECT position('bar' in 'foobar');   -- Returns 4",
                    "SELECT position('x' in 'abc');        -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, LENGTH(c1) FROM h; -- LENGTH\n",
            "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT INSTR(c1, 'h') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '') FROM h; -- INSTR\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, octet_length(c1) FROM h; -- LENGTH\n",
            "SELECT c1, CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH(c1))), c1) FROM h;\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT POSITION('h' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('' in c1) FROM h; -- INSTR\n"
        ]
    },
    {
        "sql_id": "monetdb_7_11",
        "database_name": "monetdb_7_11",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT INSTR(c1, '52') FROM h; -- INSTR",
        "target_query": "SELECT POSITION('52' in c1) FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "position(substr in str)",
                "description": "Returns the position of substr in str (1-based). Returns 0 if not found.",
                "examples": [
                    "SELECT position('bar' in 'foobar');   -- Returns 4",
                    "SELECT position('x' in 'abc');        -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, LENGTH(c1) FROM h; -- LENGTH\n",
            "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT INSTR(c1, 'h') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '52') FROM h; -- INSTR\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, octet_length(c1) FROM h; -- LENGTH\n",
            "SELECT c1, CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH(c1))), c1) FROM h;\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT POSITION('h' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('52' in c1) FROM h; -- INSTR\n"
        ]
    },
    {
        "sql_id": "monetdb_7_12",
        "database_name": "monetdb_7_12",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT INSTR(c1, '54') FROM h; -- INSTR",
        "target_query": "SELECT POSITION('54' in c1) FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "position(substr in str)",
                "description": "Returns the position of substr in str (1-based). Returns 0 if not found.",
                "examples": [
                    "SELECT position('bar' in 'foobar');   -- Returns 4",
                    "SELECT position('x' in 'abc');        -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, LENGTH(c1) FROM h; -- LENGTH\n",
            "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT INSTR(c1, 'h') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '52') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '54') FROM h; -- INSTR\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, octet_length(c1) FROM h; -- LENGTH\n",
            "SELECT c1, CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH(c1))), c1) FROM h;\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT POSITION('h' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('52' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('54' in c1) FROM h; -- INSTR\n"
        ]
    },
    {
        "sql_id": "monetdb_7_13",
        "database_name": "monetdb_7_13",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT INSTR(c1, '31') FROM h; -- INSTR",
        "target_query": "SELECT POSITION('31' in c1) FROM h; -- INSTR",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "INSTR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "INSTR(str, substr)",
                "description": "Returns the position of the first occurrence of substr in str, starting from 1. Returns 0 if not found. If substr is an empty string, returns 1. NULL if either argument is NULL.",
                "examples": [
                    "SELECT INSTR('foobar', 'bar');  -- Returns 4",
                    "SELECT INSTR('foobar', 'baz');  -- Returns 0",
                    "SELECT INSTR('foobar', '');     -- Returns 1",
                    "SELECT INSTR(NULL, 'bar');      -- Returns NULL"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "position(substr in str)",
                "description": "Returns the position of substr in str (1-based). Returns 0 if not found.",
                "examples": [
                    "SELECT position('bar' in 'foobar');   -- Returns 4",
                    "SELECT position('x' in 'abc');        -- Returns 0"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, LENGTH(c1) FROM h; -- LENGTH\n",
            "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT INSTR(c1, 'h') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '52') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '54') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '31') FROM h; -- INSTR\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, octet_length(c1) FROM h; -- LENGTH\n",
            "SELECT c1, CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH(c1))), c1) FROM h;\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT POSITION('h' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('52' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('54' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('31' in c1) FROM h; -- INSTR\n"
        ]
    },
    {
        "sql_id": "monetdb_7_23",
        "database_name": "monetdb_7_23",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT c1, TRIM(c1) FROM h; -- TRIM",
        "target_query": "SELECT c1, TRIM(c1) FROM h; -- TRIM",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "MonetDB's TRIM function operates the same way as in MySQL and other databases. It removes unwanted characters from the start and/or end of a string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, LENGTH(c1) FROM h; -- LENGTH\n",
            "SELECT c1, LPAD(c1, 20, ' ') FROM h; -- LPAD\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT INSTR(c1, 'h') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '52') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '54') FROM h; -- INSTR\n",
            "SELECT INSTR(c1, '31') FROM h; -- INSTR\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315253');\n",
            "INSERT INTO h VALUES ('h31525352');\n",
            "INSERT INTO h VALUES ('h3152535252');\n",
            "INSERT INTO h VALUES ('h315253525252');\n",
            "INSERT INTO h VALUES ('52h315253');\n",
            "INSERT INTO h VALUES ('5252h315253');\n",
            "INSERT INTO h VALUES ('525252h315253');\n",
            "INSERT INTO h VALUES ('   h315253   ');\n",
            "SELECT c1, TRIM(c1) FROM h; -- TRIM\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS h;\n",
            "CREATE TABLE h (c1 CHAR(20));\n",
            "INSERT INTO h VALUES ('12345678900987654321'), ('h\u04bc'), ('\u07f0'), ('\u02ae'), (''), ('50515253');\n",
            "INSERT INTO h VALUES ('31'), ('h31'), ('2805');\n",
            "SELECT c1, octet_length(c1) FROM h; -- LENGTH\n",
            "SELECT c1, CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH(c1))), c1) FROM h;\n",
            "SELECT c1, RPAD(c1, 20, '52') FROM h; -- RPAD\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315254');\n",
            "SELECT POSITION('h' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('52' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('54' in c1) FROM h; -- INSTR\n",
            "SELECT POSITION('31' in c1) FROM h; -- INSTR\n",
            "TRUNCATE h;\n",
            "INSERT INTO h VALUES ('h315253');\n",
            "INSERT INTO h VALUES ('h31525352');\n",
            "INSERT INTO h VALUES ('h3152535252');\n",
            "INSERT INTO h VALUES ('h315253525252');\n",
            "INSERT INTO h VALUES ('52h315253');\n",
            "INSERT INTO h VALUES ('5252h315253');\n",
            "INSERT INTO h VALUES ('525252h315253');\n",
            "INSERT INTO h VALUES ('   h315253   ');\n",
            "SELECT c1, TRIM(c1) FROM h; -- TRIM\n"
        ]
    },
    {
        "sql_id": "monetdb_71_0",
        "database_name": "monetdb_71_0",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select from_unixtime(123456789); -- FROM_UNIXTIME",
        "target_query": "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '123456789' SECOND;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '<seconds>' SECOND",
                "description": "Adds seconds to the UNIX epoch by using an INTERVAL expression with a string constant representing the number of seconds.",
                "examples": [
                    "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000' SECOND;",
                    "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000.987' SECOND;",
                    "SELECT CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000' SECOND AS STRING);"
                ]
            }
        ],
        "source_related_schemas": [
            "select from_unixtime(123456789); -- FROM_UNIXTIME\n"
        ],
        "target_related_schemas": [
            "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '123456789' SECOND;\n"
        ]
    },
    {
        "sql_id": "monetdb_71_1",
        "database_name": "monetdb_71_1",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select from_unixtime(234567890); -- FROM_UNIXTIME",
        "target_query": "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '234567890' SECOND;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '<seconds>' SECOND",
                "description": "Adds seconds to the UNIX epoch by using an INTERVAL expression with a string constant representing the number of seconds.",
                "examples": [
                    "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000' SECOND;",
                    "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000.987' SECOND;",
                    "SELECT CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000' SECOND AS STRING);"
                ]
            }
        ],
        "source_related_schemas": [
            "select from_unixtime(123456789); -- FROM_UNIXTIME\n",
            "select from_unixtime(234567890); -- FROM_UNIXTIME\n"
        ],
        "target_related_schemas": [
            "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '123456789' SECOND;\n",
            "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '234567890' SECOND;\n"
        ]
    },
    {
        "sql_id": "monetdb_71_2",
        "database_name": "monetdb_71_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select from_unixtime(1); -- FROM_UNIXTIME",
        "target_query": "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1' SECOND;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '<seconds>' SECOND",
                "description": "Adds seconds to the UNIX epoch by using an INTERVAL expression with a string constant representing the number of seconds.",
                "examples": [
                    "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000' SECOND;",
                    "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000.987' SECOND;",
                    "SELECT CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000' SECOND AS STRING);"
                ]
            }
        ],
        "source_related_schemas": [
            "select from_unixtime(123456789); -- FROM_UNIXTIME\n",
            "select from_unixtime(234567890); -- FROM_UNIXTIME\n",
            "select from_unixtime(1); -- FROM_UNIXTIME\n"
        ],
        "target_related_schemas": [
            "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '123456789' SECOND;\n",
            "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '234567890' SECOND;\n",
            "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1' SECOND;\n"
        ]
    },
    {
        "sql_id": "monetdb_72_4",
        "database_name": "monetdb_72_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "EXPLAIN SELECT * FROM t WHERE CONCAT(x,x) = 'XX'; -- CONCAT",
        "target_query": "EXPLAIN SELECT * FROM t WHERE x || x = 'XX';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates two or more strings using the || operator. If any operand is NULL, result is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT 'Year: ' || CAST(2025 AS STRING);",
                    "SELECT name || '_' || CAST(id AS STRING) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t;\n",
            "CREATE TABLE t(x VARCHAR(10));\n",
            "INSERT INTO t VALUES ('x');\n",
            "EXPLAIN SELECT * FROM t WHERE CONCAT(x,x) = 'XX'; -- CONCAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t;\n",
            "CREATE TABLE t(x VARCHAR(10));\n",
            "INSERT INTO t VALUES ('x');\n",
            "EXPLAIN SELECT * FROM t WHERE x || x = 'XX';\n"
        ]
    },
    {
        "sql_id": "monetdb_74_2",
        "database_name": "monetdb_74_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "insert into t1(f1) select if(max(f1) is null, '2000',max(f1)) from t1; -- IF, MAX",
        "target_query": "insert into t1(f1) select CASE WHEN max(f1) is null THEN '2000' ELSE max(f1) END from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "MAX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "MAX(expr)",
                "description": "Returns the maximum value of the expression in an aggregation context.",
                "examples": [
                    "SELECT MAX(10), MAX(5), MAX(20);",
                    "SELECT MAX('apple'), MAX('banana'), MAX('pear');",
                    "SELECT MAX(ABS(-5)), MAX(ABS(3));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "MonetDB does not support the `IF` function, but you can use the `CASE WHEN` expression to achieve similar functionality. It evaluates a condition and returns different values based on the truth value of the condition.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            },
            {
                "expression": "MAX(expr)",
                "description": "Aggregates the maximum value of the input expression.",
                "examples": [
                    "SELECT MAX(2), MAX(4), MAX(8);",
                    "SELECT MAX('lion'), MAX('tiger'), MAX('bear');",
                    "SELECT MAX(sqrt(16)), MAX(sqrt(25));"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1(f1 varchar(5));\n",
            "insert into t1(f1) select if(max(f1) is null, '2000',max(f1)) from t1; -- IF, MAX\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1(f1 varchar(5));\n",
            "insert into t1(f1) select CASE WHEN max(f1) is null THEN '2000' ELSE max(f1) END from t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_74_6",
        "database_name": "monetdb_74_6",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH",
        "target_query": "SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='13_characters') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1(f1 varchar(5));\n",
            "insert into t1(f1) select if(max(f1) is null, '2000',max(f1)) from t1; -- IF, MAX\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c VARCHAR(30));\n",
            "INSERT INTO t1 (c) VALUES ('7_chars'), ('13_characters');\n",
            "SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1(f1 varchar(5));\n",
            "insert into t1(f1) select CASE WHEN max(f1) is null THEN '2000' ELSE max(f1) END from t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c VARCHAR(30));\n",
            "INSERT INTO t1 (c) VALUES ('7_chars'), ('13_characters');\n",
            "SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='13_characters') FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_74_9",
        "database_name": "monetdb_74_9",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH",
        "target_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='13_characters') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1(f1 varchar(5));\n",
            "insert into t1(f1) select if(max(f1) is null, '2000',max(f1)) from t1; -- IF, MAX\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c VARCHAR(30));\n",
            "INSERT INTO t1 (c) VALUES ('7_chars'), ('13_characters');\n",
            "SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 (d VARCHAR(10));\n",
            "INSERT INTO t2 (d)SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1(f1 varchar(5));\n",
            "insert into t1(f1) select CASE WHEN max(f1) is null THEN '2000' ELSE max(f1) END from t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c VARCHAR(30));\n",
            "INSERT INTO t1 (c) VALUES ('7_chars'), ('13_characters');\n",
            "SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='13_characters') FROM t1;\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 (d VARCHAR(10));\n",
            "INSERT INTO t2 (d)SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='13_characters') FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_74_10",
        "database_name": "monetdb_74_10",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='7_chars') FROM t1; -- LENGTH",
        "target_query": "INSERT INTO t2 (d)SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='7_chars') FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1(f1 varchar(5));\n",
            "insert into t1(f1) select if(max(f1) is null, '2000',max(f1)) from t1; -- IF, MAX\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c VARCHAR(30));\n",
            "INSERT INTO t1 (c) VALUES ('7_chars'), ('13_characters');\n",
            "SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 (d VARCHAR(10));\n",
            "INSERT INTO t2 (d)SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='13_characters') FROM t1; -- LENGTH\n",
            "INSERT INTO t2 (d)SELECT (SELECT SUM(LENGTH(c)) FROM t1 WHERE c='7_chars') FROM t1; -- LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1(f1 varchar(5));\n",
            "insert into t1(f1) select CASE WHEN max(f1) is null THEN '2000' ELSE max(f1) END from t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c VARCHAR(30));\n",
            "INSERT INTO t1 (c) VALUES ('7_chars'), ('13_characters');\n",
            "SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='13_characters') FROM t1;\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 (d VARCHAR(10));\n",
            "INSERT INTO t2 (d)SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='13_characters') FROM t1;\n",
            "INSERT INTO t2 (d)SELECT (SELECT SUM(octet_length(c)) FROM t1 WHERE c='7_chars') FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_75_2",
        "database_name": "monetdb_75_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t1 VALUES('valid-string',1),(UNHEX('11'),2); -- UNHEX",
        "target_query": "INSERT INTO t1 VALUES('valid-string',1),(NULL,2);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UNHEX"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UNHEX(str)",
                "description": "Converts a hexadecimal string into a binary string. Returns NULL for invalid hex or NULL input.",
                "examples": [
                    "SELECT HEX(UNHEX('4D7953514C'));",
                    "SELECT UNHEX('48656C6C6F');",
                    "SELECT UNHEX(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "",
                "description": "",
                "examples": []
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (tx TEXT NULL,pk INTEGER PRIMARY KEY);\n",
            "INSERT INTO t1 VALUES('valid-string',1),(UNHEX('11'),2); -- UNHEX\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (tx TEXT NULL,pk INTEGER PRIMARY KEY);\n",
            "INSERT INTO t1 VALUES('valid-string',1),(NULL,2);\n"
        ]
    },
    {
        "sql_id": "monetdb_75_3",
        "database_name": "monetdb_75_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT pk,OCTET_LENGTH(tx),LENGTH(tx) FROM t1; -- OCTET_LENGTH, LENGTH",
        "target_query": "SELECT pk,LENGTH(tx),octet_length(tx) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "OCTET_LENGTH",
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "OCTET_LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT OCTET_LENGTH('Hello World');",
                    "SELECT OCTET_LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN OCTET_LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            },
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "LENGTH()",
                "description": "Returns the number of bytes in a string.",
                "examples": [
                    "SELECT LENGTH('Hello World');",
                    "SELECT LENGTH('Test String') = 11;",
                    "SELECT CASE WHEN LENGTH('Example') > 5 THEN 'Long' ELSE 'Short' END;"
                ]
            },
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (tx TEXT NULL,pk INTEGER PRIMARY KEY);\n",
            "INSERT INTO t1 VALUES('valid-string',1),(UNHEX('11'),2); -- UNHEX\n",
            "SELECT pk,OCTET_LENGTH(tx),LENGTH(tx) FROM t1; -- OCTET_LENGTH, LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (tx TEXT NULL,pk INTEGER PRIMARY KEY);\n",
            "INSERT INTO t1 VALUES('valid-string',1),(NULL,2);\n",
            "SELECT pk,LENGTH(tx),octet_length(tx) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_76_2",
        "database_name": "monetdb_76_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "insert ignore t1 values (1, repeat('a',110), repeat('b', 210)); -- REPEAT",
        "target_query": "insert into t1 values (1, repeat('a',110), repeat('b', 210));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns the string 'str' repeated 'count' times. Behavior on NULL matches MySQL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (i int, a char(200), b text, unique (a), unique (b(300)));\n",
            "insert ignore t1 values (1, repeat('a',110), repeat('b', 210)); -- REPEAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (i int, a char(200), b text, unique (a), unique (b));\n",
            "insert into t1 values (1, repeat('a',110), repeat('b', 210));\n"
        ]
    },
    {
        "sql_id": "monetdb_76_3",
        "database_name": "monetdb_76_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select i, length(a), length(b), char_length(a), char_length(b) from t1; -- LENGTH, CHAR_LENGTH",
        "target_query": "select i, octet_length(a), octet_length(b), char_length(a), char_length(b) from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH",
            "CHAR_LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "CHAR_LENGTH(expr)",
                "description": "Returns the number of characters in the string, not bytes.",
                "examples": [
                    "SELECT CHAR_LENGTH('abc');",
                    "SELECT CHAR_LENGTH('\u4f60\u597d');",
                    "SELECT CHAR_LENGTH('a\u4f60b\u597dc');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            },
            {
                "expression": "char_length(expr)",
                "description": "Returns the number of characters in a string (char_length and length are equivalent).",
                "examples": [
                    "SELECT char_length('abc');",
                    "SELECT char_length('\u4f60\u597d');",
                    "SELECT char_length('a\u4f60b\u597dc');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (i int, a char(200), b text, unique (a), unique (b(300)));\n",
            "insert ignore t1 values (1, repeat('a',110), repeat('b', 210)); -- REPEAT\n",
            "select i, length(a), length(b), char_length(a), char_length(b) from t1; -- LENGTH, CHAR_LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (i int, a char(200), b text, unique (a), unique (b));\n",
            "insert into t1 values (1, repeat('a',110), repeat('b', 210));\n",
            "select i, octet_length(a), octet_length(b), char_length(a), char_length(b) from t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_76_6",
        "database_name": "monetdb_76_6",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "insert into t1 values(1, 'a', 'a', NOW()), (1, 'b', 'b', NOW()); -- NOW",
        "target_query": "insert into t1 values(1, 'a', 'a', CURRENT_TIMESTAMP), (1, 'b', 'b', CURRENT_TIMESTAMP);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NOW"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NOW()",
                "description": "Returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.",
                "examples": [
                    "SELECT NOW();",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > NOW()) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (NOW());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CURRENT_TIMESTAMP",
                "description": "MonetDB uses CURRENT_TIMESTAMP to return the current date and time, similar to PostgreSQL's approach.",
                "examples": [
                    "SELECT CURRENT_TIMESTAMP;",
                    "CREATE TABLE t12 SELECT * FROM t1 WHERE b = 67 AND (c IS NULL OR c > CURRENT_TIMESTAMP) ORDER BY 3 DESC;",
                    "INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (i int, a char(200), b text, unique (a), unique (b(300)));\n",
            "insert ignore t1 values (1, repeat('a',110), repeat('b', 210)); -- REPEAT\n",
            "select i, length(a), length(b), char_length(a), char_length(b) from t1; -- LENGTH, CHAR_LENGTH\n",
            "DROP TABLE t1;\n",
            "create table t1 (c1 int,c2 char(12),c3 varchar(123),c4 timestamp NOT NULL);\n",
            "insert into t1 values(1, 'a', 'a', NOW()), (1, 'b', 'b', NOW()); -- NOW\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (i int, a char(200), b text, unique (a), unique (b));\n",
            "insert into t1 values (1, repeat('a',110), repeat('b', 210));\n",
            "select i, octet_length(a), octet_length(b), char_length(a), char_length(b) from t1;\n",
            "DROP TABLE t1;\n",
            "create table t1 (c1 int,c2 char(12),c3 varchar(123),c4 timestamp NOT NULL);\n",
            "insert into t1 values(1, 'a', 'a', CURRENT_TIMESTAMP), (1, 'b', 'b', CURRENT_TIMESTAMP);\n"
        ]
    },
    {
        "sql_id": "monetdb_77_3",
        "database_name": "monetdb_77_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select t1.time,t1.date,t1.timestamp,concat(date,\" \",time),t1.quarter+t1.week, t1.year+timestampadd,  timestampdiff from t1; -- CONCAT",
        "target_query": "select t1.\"time\",t1.\"date\",t1.\"timestamp\",\"date\" || ' ' || \"time\",t1.\"quarter\"+t1.\"week\", t1.\"year\"+\"timestampadd\",  timestampdiff from t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates two or more strings using the || operator. If any operand is NULL, result is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT 'Year: ' || CAST(2025 AS STRING);",
                    "SELECT name || '_' || CAST(id AS STRING) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (time time, date date, timestamp timestamp,quarter int, week int, year int, timestampadd int, timestampdiff int);\n",
            "insert into t1 values (\"12:22:22\",\"1997-01-01\",\"1997-01-02\",1,2,3,4,5);\n",
            "select t1.time,t1.date,t1.timestamp,concat(date,\" \",time),t1.quarter+t1.week, t1.year+timestampadd,  timestampdiff from t1; -- CONCAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (\"time\" time, \"date\" date, \"timestamp\" timestamp,\"quarter\" int, \"week\" int, \"year\" int, \"timestampadd\" int, \"timestampdiff\" int);\n",
            "insert into t1 values ('12:22:22','1997-01-01','1997-01-02',1,2,3,4,5);\n",
            "select t1.\"time\",t1.\"date\",t1.\"timestamp\",\"date\" || ' ' || \"time\",t1.\"quarter\"+t1.\"week\", t1.\"year\"+\"timestampadd\",  timestampdiff from t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_78_2",
        "database_name": "monetdb_78_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select concat('|',a,'|'), concat('|',b,'|') from t1; -- CONCAT",
        "target_query": "SELECT '|' || a || '|' AS a, '|' || b || '|' AS b FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates two or more strings using the || operator. If any operand is NULL, result is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT 'Year: ' || CAST(2025 AS STRING);",
                    "SELECT name || '_' || CAST(id AS STRING) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (a text, b text);\n",
            "select concat('|',a,'|'), concat('|',b,'|') from t1; -- CONCAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a TEXT, b TEXT);\n",
            "SELECT '|' || a || '|' AS a, '|' || b || '|' AS b FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_79_3",
        "database_name": "monetdb_79_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT a, date_format(a,'%a') as abday, dayname(a) as day FROM t1 ORDER BY a; -- DATE_FORMAT, DAYNAME",
        "target_query": "SELECT a, sys.timestamp_to_str(a, 'DY') as abday, dayname(a) as \"day\" FROM t1 ORDER BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT",
            "DAYNAME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            },
            {
                "expression": "DAYNAME(date)",
                "description": "Returns the full name of the day for a given date.",
                "examples": [
                    "SELECT DAYNAME('2023-11-25');",
                    "SELECT DAYNAME('2022-01-01');",
                    "SELECT DAYNAME('1999-03-14');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "sys.timestamp_to_str(timestamp_expr, format_str)",
                "description": "Formats a timestamp using MonetDB's internal formatting function. Format specifiers follow standard SQL/Oracle-style.",
                "examples": [
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2023-07-14 15:30:00', 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2022-01-01 08:45:30', 'HH24:MI:SS DD-MM-YYYY');"
                ]
            },
            {
                "expression": "dayname(date)",
                "description": "MonetDB has a built-in function `dayname` that returns the full name of the day for a given date.",
                "examples": [
                    "SELECT dayname(CAST('2023-11-25' AS DATE));",
                    "SELECT dayname(CAST('2022-01-01' AS DATE));",
                    "SELECT dayname(CAST('1999-03-14' AS DATE));"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-01-02'),('2006-01-03'),('2006-01-04'),('2006-01-05'),('2006-01-06'),('2006-01-07');\n",
            "SELECT a, date_format(a,'%a') as abday, dayname(a) as day FROM t1 ORDER BY a; -- DATE_FORMAT, DAYNAME\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-01-02'),('2006-01-03'),('2006-01-04'),('2006-01-05'),('2006-01-06'),('2006-01-07');\n",
            "SELECT a, sys.timestamp_to_str(a, 'DY') as abday, dayname(a) as \"day\" FROM t1 ORDER BY a;\n"
        ]
    },
    {
        "sql_id": "monetdb_79_7",
        "database_name": "monetdb_79_7",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT a, date_format(a,'%b') as abmon, monthname(a) as mon FROM t1 ORDER BY a; -- DATE_FORMAT, MONTHNAME",
        "target_query": "SELECT a, sys.timestamp_to_str(a, 'MON') as abmon, monthname(a) as mon FROM t1 ORDER BY a;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT",
            "MONTHNAME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            },
            {
                "expression": "MONTHNAME(date)",
                "description": "Returns the full English name of the month for a given date.",
                "examples": [
                    "SELECT MONTHNAME(DATE '2023-05-01') AS mon1;",
                    "SELECT MONTHNAME(STR_TO_DATE('2024-12-31', '%Y-%m-%d')) AS mon2;",
                    "SELECT MONTHNAME(NOW()) AS current_month;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "sys.timestamp_to_str(timestamp_expr, format_str)",
                "description": "Formats a timestamp using MonetDB's internal formatting function. Format specifiers follow standard SQL/Oracle-style.",
                "examples": [
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2023-07-14 15:30:00', 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2022-01-01 08:45:30', 'HH24:MI:SS DD-MM-YYYY');"
                ]
            },
            {
                "expression": "monthName(date)",
                "description": "Returns the full English name of the month for a given date.",
                "examples": [
                    "SELECT monthName(DATE '2023-05-01') AS mon1;",
                    "SELECT monthName(DATE '2024-12-31') AS mon2;",
                    "SELECT monthName(now()) AS current_month"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-01-02'),('2006-01-03'),('2006-01-04'),('2006-01-05'),('2006-01-06'),('2006-01-07');\n",
            "SELECT a, date_format(a,'%a') as abday, dayname(a) as day FROM t1 ORDER BY a; -- DATE_FORMAT, DAYNAME\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-02-01'),('2006-03-01'),('2006-04-01'),('2006-05-01'),('2006-06-01'),('2006-07-01'),('2006-08-01'),('2006-09-01'),('2006-10-01'),('2006-11-01'),('2006-12-01');\n",
            "SELECT a, date_format(a,'%b') as abmon, monthname(a) as mon FROM t1 ORDER BY a; -- DATE_FORMAT, MONTHNAME\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-01-02'),('2006-01-03'),('2006-01-04'),('2006-01-05'),('2006-01-06'),('2006-01-07');\n",
            "SELECT a, sys.timestamp_to_str(a, 'DY') as abday, dayname(a) as \"day\" FROM t1 ORDER BY a;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-02-01'),('2006-03-01'),('2006-04-01'),('2006-05-01'),('2006-06-01'),('2006-07-01'),('2006-08-01'),('2006-09-01'),('2006-10-01'),('2006-11-01'),('2006-12-01');\n",
            "SELECT a, sys.timestamp_to_str(a, 'MON') as abmon, monthname(a) as mon FROM t1 ORDER BY a;\n"
        ]
    },
    {
        "sql_id": "monetdb_79_9",
        "database_name": "monetdb_79_9",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT DATE_FORMAT('2001-01-01', '%w %a %W'); -- DATE_FORMAT",
        "target_query": "SELECT sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'D DY WW');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "sys.timestamp_to_str(timestamp_expr, format_str)",
                "description": "Formats a timestamp using MonetDB's internal formatting function. Format specifiers follow standard SQL/Oracle-style.",
                "examples": [
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2023-07-14 15:30:00', 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2022-01-01 08:45:30', 'HH24:MI:SS DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-01-02'),('2006-01-03'),('2006-01-04'),('2006-01-05'),('2006-01-06'),('2006-01-07');\n",
            "SELECT a, date_format(a,'%a') as abday, dayname(a) as day FROM t1 ORDER BY a; -- DATE_FORMAT, DAYNAME\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-02-01'),('2006-03-01'),('2006-04-01'),('2006-05-01'),('2006-06-01'),('2006-07-01'),('2006-08-01'),('2006-09-01'),('2006-10-01'),('2006-11-01'),('2006-12-01');\n",
            "SELECT a, date_format(a,'%b') as abmon, monthname(a) as mon FROM t1 ORDER BY a; -- DATE_FORMAT, MONTHNAME\n",
            "DROP TABLE t1;\n",
            "SELECT DATE_FORMAT('2001-01-01', '%w %a %W'); -- DATE_FORMAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-01-02'),('2006-01-03'),('2006-01-04'),('2006-01-05'),('2006-01-06'),('2006-01-07');\n",
            "SELECT a, sys.timestamp_to_str(a, 'DY') as abday, dayname(a) as \"day\" FROM t1 ORDER BY a;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-02-01'),('2006-03-01'),('2006-04-01'),('2006-05-01'),('2006-06-01'),('2006-07-01'),('2006-08-01'),('2006-09-01'),('2006-10-01'),('2006-11-01'),('2006-12-01');\n",
            "SELECT a, sys.timestamp_to_str(a, 'MON') as abmon, monthname(a) as mon FROM t1 ORDER BY a;\n",
            "DROP TABLE t1;\n",
            "SELECT sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'D DY WW');\n"
        ]
    },
    {
        "sql_id": "monetdb_79_10",
        "database_name": "monetdb_79_10",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT DATE_FORMAT('2001-01-01', '%c %b %M'); -- DATE_FORMAT",
        "target_query": "SELECT sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'MM MON MONTH');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "sys.timestamp_to_str(timestamp_expr, format_str)",
                "description": "Formats a timestamp using MonetDB's internal formatting function. Format specifiers follow standard SQL/Oracle-style.",
                "examples": [
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2023-07-14 15:30:00', 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2022-01-01 08:45:30', 'HH24:MI:SS DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-01-02'),('2006-01-03'),('2006-01-04'),('2006-01-05'),('2006-01-06'),('2006-01-07');\n",
            "SELECT a, date_format(a,'%a') as abday, dayname(a) as day FROM t1 ORDER BY a; -- DATE_FORMAT, DAYNAME\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-02-01'),('2006-03-01'),('2006-04-01'),('2006-05-01'),('2006-06-01'),('2006-07-01'),('2006-08-01'),('2006-09-01'),('2006-10-01'),('2006-11-01'),('2006-12-01');\n",
            "SELECT a, date_format(a,'%b') as abmon, monthname(a) as mon FROM t1 ORDER BY a; -- DATE_FORMAT, MONTHNAME\n",
            "DROP TABLE t1;\n",
            "SELECT DATE_FORMAT('2001-01-01', '%w %a %W'); -- DATE_FORMAT\n",
            "SELECT DATE_FORMAT('2001-01-01', '%c %b %M'); -- DATE_FORMAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-01-02'),('2006-01-03'),('2006-01-04'),('2006-01-05'),('2006-01-06'),('2006-01-07');\n",
            "SELECT a, sys.timestamp_to_str(a, 'DY') as abday, dayname(a) as \"day\" FROM t1 ORDER BY a;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-02-01'),('2006-03-01'),('2006-04-01'),('2006-05-01'),('2006-06-01'),('2006-07-01'),('2006-08-01'),('2006-09-01'),('2006-10-01'),('2006-11-01'),('2006-12-01');\n",
            "SELECT a, sys.timestamp_to_str(a, 'MON') as abmon, monthname(a) as mon FROM t1 ORDER BY a;\n",
            "DROP TABLE t1;\n",
            "SELECT sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'D DY WW');\n",
            "SELECT sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'MM MON MONTH');\n"
        ]
    },
    {
        "sql_id": "monetdb_79_11",
        "database_name": "monetdb_79_11",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT DATE_FORMAT('2010-03-23 11:00:00','%h %p'); -- DATE_FORMAT",
        "target_query": "SELECT sys.timestamp_to_str(TIMESTAMP '2010-03-23 11:00:00', 'HH12 AM');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "sys.timestamp_to_str(timestamp_expr, format_str)",
                "description": "Formats a timestamp using MonetDB's internal formatting function. Format specifiers follow standard SQL/Oracle-style.",
                "examples": [
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2023-07-14 15:30:00', 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2022-01-01 08:45:30', 'HH24:MI:SS DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-01-02'),('2006-01-03'),('2006-01-04'),('2006-01-05'),('2006-01-06'),('2006-01-07');\n",
            "SELECT a, date_format(a,'%a') as abday, dayname(a) as day FROM t1 ORDER BY a; -- DATE_FORMAT, DAYNAME\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-02-01'),('2006-03-01'),('2006-04-01'),('2006-05-01'),('2006-06-01'),('2006-07-01'),('2006-08-01'),('2006-09-01'),('2006-10-01'),('2006-11-01'),('2006-12-01');\n",
            "SELECT a, date_format(a,'%b') as abmon, monthname(a) as mon FROM t1 ORDER BY a; -- DATE_FORMAT, MONTHNAME\n",
            "DROP TABLE t1;\n",
            "SELECT DATE_FORMAT('2001-01-01', '%w %a %W'); -- DATE_FORMAT\n",
            "SELECT DATE_FORMAT('2001-01-01', '%c %b %M'); -- DATE_FORMAT\n",
            "SELECT DATE_FORMAT('2010-03-23 11:00:00','%h %p'); -- DATE_FORMAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-01-02'),('2006-01-03'),('2006-01-04'),('2006-01-05'),('2006-01-06'),('2006-01-07');\n",
            "SELECT a, sys.timestamp_to_str(a, 'DY') as abday, dayname(a) as \"day\" FROM t1 ORDER BY a;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (a DATE);\n",
            "INSERT INTO t1 VALUES('2006-01-01'),('2006-02-01'),('2006-03-01'),('2006-04-01'),('2006-05-01'),('2006-06-01'),('2006-07-01'),('2006-08-01'),('2006-09-01'),('2006-10-01'),('2006-11-01'),('2006-12-01');\n",
            "SELECT a, sys.timestamp_to_str(a, 'MON') as abmon, monthname(a) as mon FROM t1 ORDER BY a;\n",
            "DROP TABLE t1;\n",
            "SELECT sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'D DY WW');\n",
            "SELECT sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'MM MON MONTH');\n",
            "SELECT sys.timestamp_to_str(TIMESTAMP '2010-03-23 11:00:00', 'HH12 AM');\n"
        ]
    },
    {
        "sql_id": "monetdb_8_0",
        "database_name": "monetdb_8_0",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP",
        "target_query": "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "MonetDB does not have a direct STRCMP function. This behavior can be simulated using a CASE statement to compare two strings lexicographically.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [
            "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;\n"
        ]
    },
    {
        "sql_id": "monetdb_8_1",
        "database_name": "monetdb_8_1",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP",
        "target_query": "SELECT CASE WHEN 'ss' = '' THEN 0 WHEN 'ss' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'ss' THEN 0 WHEN '' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 's' = 'sss' THEN 0 WHEN 's' < 'sss' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'ssq' THEN 0 WHEN 'q' < 'ssq' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "MonetDB does not have a direct STRCMP function. This behavior can be simulated using a CASE statement to compare two strings lexicographically.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [
            "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP\n",
            "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = '' THEN 0 WHEN 'ss' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'ss' THEN 0 WHEN '' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 's' = 'sss' THEN 0 WHEN 's' < 'sss' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'ssq' THEN 0 WHEN 'q' < 'ssq' THEN -1 ELSE 1 END;\n"
        ]
    },
    {
        "sql_id": "monetdb_8_2",
        "database_name": "monetdb_8_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP",
        "target_query": "SELECT CASE WHEN '' = 'af' THEN 0 WHEN '' < 'af' THEN -1 ELSE 1 END, CASE WHEN 'a' = '' THEN 0 WHEN 'a' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeq' THEN 0 WHEN '' < 'aeq' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeaeq' THEN 0 WHEN '' < 'aeaeq' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "MonetDB does not have a direct STRCMP function. This behavior can be simulated using a CASE statement to compare two strings lexicographically.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [
            "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP\n",
            "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP\n",
            "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = '' THEN 0 WHEN 'ss' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'ss' THEN 0 WHEN '' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 's' = 'sss' THEN 0 WHEN 's' < 'sss' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'ssq' THEN 0 WHEN 'q' < 'ssq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'af' THEN 0 WHEN '' < 'af' THEN -1 ELSE 1 END, CASE WHEN 'a' = '' THEN 0 WHEN 'a' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeq' THEN 0 WHEN '' < 'aeq' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeaeq' THEN 0 WHEN '' < 'aeaeq' THEN -1 ELSE 1 END;\n"
        ]
    },
    {
        "sql_id": "monetdb_8_3",
        "database_name": "monetdb_8_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP",
        "target_query": "SELECT CASE WHEN 'ss' = 'a' THEN 0 WHEN 'ss' < 'a' THEN -1 ELSE 1 END, CASE WHEN '' = 'ssa' THEN 0 WHEN '' < 'ssa' THEN -1 ELSE 1 END, CASE WHEN 'sa' = 'sssb' THEN 0 WHEN 'sa' < 'sssb' THEN -1 ELSE 1 END, CASE WHEN 's' = '' THEN 0 WHEN 's' < '' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "MonetDB does not have a direct STRCMP function. This behavior can be simulated using a CASE statement to compare two strings lexicographically.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [
            "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP\n",
            "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP\n",
            "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP\n",
            "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = '' THEN 0 WHEN 'ss' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'ss' THEN 0 WHEN '' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 's' = 'sss' THEN 0 WHEN 's' < 'sss' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'ssq' THEN 0 WHEN 'q' < 'ssq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'af' THEN 0 WHEN '' < 'af' THEN -1 ELSE 1 END, CASE WHEN 'a' = '' THEN 0 WHEN 'a' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeq' THEN 0 WHEN '' < 'aeq' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeaeq' THEN 0 WHEN '' < 'aeaeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = 'a' THEN 0 WHEN 'ss' < 'a' THEN -1 ELSE 1 END, CASE WHEN '' = 'ssa' THEN 0 WHEN '' < 'ssa' THEN -1 ELSE 1 END, CASE WHEN 'sa' = 'sssb' THEN 0 WHEN 'sa' < 'sssb' THEN -1 ELSE 1 END, CASE WHEN 's' = '' THEN 0 WHEN 's' < '' THEN -1 ELSE 1 END;\n"
        ]
    },
    {
        "sql_id": "monetdb_8_4",
        "database_name": "monetdb_8_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP",
        "target_query": "SELECT CASE WHEN '' = 'o' THEN 0 WHEN '' < 'o' THEN -1 ELSE 1 END, CASE WHEN '' = 'u' THEN 0 WHEN '' < 'u' THEN -1 ELSE 1 END, CASE WHEN '' = 'oeb' THEN 0 WHEN '' < 'oeb' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "MonetDB does not have a direct STRCMP function. This behavior can be simulated using a CASE statement to compare two strings lexicographically.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [
            "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP\n",
            "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP\n",
            "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP\n",
            "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP\n",
            "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = '' THEN 0 WHEN 'ss' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'ss' THEN 0 WHEN '' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 's' = 'sss' THEN 0 WHEN 's' < 'sss' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'ssq' THEN 0 WHEN 'q' < 'ssq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'af' THEN 0 WHEN '' < 'af' THEN -1 ELSE 1 END, CASE WHEN 'a' = '' THEN 0 WHEN 'a' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeq' THEN 0 WHEN '' < 'aeq' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeaeq' THEN 0 WHEN '' < 'aeaeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = 'a' THEN 0 WHEN 'ss' < 'a' THEN -1 ELSE 1 END, CASE WHEN '' = 'ssa' THEN 0 WHEN '' < 'ssa' THEN -1 ELSE 1 END, CASE WHEN 'sa' = 'sssb' THEN 0 WHEN 'sa' < 'sssb' THEN -1 ELSE 1 END, CASE WHEN 's' = '' THEN 0 WHEN 's' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'o' THEN 0 WHEN '' < 'o' THEN -1 ELSE 1 END, CASE WHEN '' = 'u' THEN 0 WHEN '' < 'u' THEN -1 ELSE 1 END, CASE WHEN '' = 'oeb' THEN 0 WHEN '' < 'oeb' THEN -1 ELSE 1 END;\n"
        ]
    },
    {
        "sql_id": "monetdb_8_5",
        "database_name": "monetdb_8_5",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcmp('aeaeq',''); -- STRCMP",
        "target_query": "SELECT CASE WHEN 'af' = '' THEN 0 WHEN 'af' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'a' THEN 0 WHEN '' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = '' THEN 0 WHEN 'aeq' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeaeq' = '' THEN 0 WHEN 'aeaeq' < '' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "MonetDB does not have a direct STRCMP function. This behavior can be simulated using a CASE statement to compare two strings lexicographically.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [
            "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP\n",
            "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP\n",
            "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP\n",
            "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP\n",
            "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP\n",
            "select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcmp('aeaeq',''); -- STRCMP\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = '' THEN 0 WHEN 'ss' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'ss' THEN 0 WHEN '' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 's' = 'sss' THEN 0 WHEN 's' < 'sss' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'ssq' THEN 0 WHEN 'q' < 'ssq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'af' THEN 0 WHEN '' < 'af' THEN -1 ELSE 1 END, CASE WHEN 'a' = '' THEN 0 WHEN 'a' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeq' THEN 0 WHEN '' < 'aeq' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeaeq' THEN 0 WHEN '' < 'aeaeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = 'a' THEN 0 WHEN 'ss' < 'a' THEN -1 ELSE 1 END, CASE WHEN '' = 'ssa' THEN 0 WHEN '' < 'ssa' THEN -1 ELSE 1 END, CASE WHEN 'sa' = 'sssb' THEN 0 WHEN 'sa' < 'sssb' THEN -1 ELSE 1 END, CASE WHEN 's' = '' THEN 0 WHEN 's' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'o' THEN 0 WHEN '' < 'o' THEN -1 ELSE 1 END, CASE WHEN '' = 'u' THEN 0 WHEN '' < 'u' THEN -1 ELSE 1 END, CASE WHEN '' = 'oeb' THEN 0 WHEN '' < 'oeb' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'af' = '' THEN 0 WHEN 'af' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'a' THEN 0 WHEN '' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = '' THEN 0 WHEN 'aeq' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeaeq' = '' THEN 0 WHEN 'aeaeq' < '' THEN -1 ELSE 1 END;\n"
        ]
    },
    {
        "sql_id": "monetdb_8_6",
        "database_name": "monetdb_8_6",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select strcmp('a','ss'),strcmp('ssa',''),strcmp('sssb','sa'),strcmp('','s'); -- STRCMP",
        "target_query": "SELECT CASE WHEN 'a' = 'ss' THEN 0 WHEN 'a' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 'ssa' = '' THEN 0 WHEN 'ssa' < '' THEN -1 ELSE 1 END, CASE WHEN 'sssb' = 'sa' THEN 0 WHEN 'sssb' < 'sa' THEN -1 ELSE 1 END, CASE WHEN '' = 's' THEN 0 WHEN '' < 's' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "MonetDB does not have a direct STRCMP function. This behavior can be simulated using a CASE statement to compare two strings lexicographically.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [
            "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP\n",
            "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP\n",
            "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP\n",
            "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP\n",
            "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP\n",
            "select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcmp('aeaeq',''); -- STRCMP\n",
            "select strcmp('a','ss'),strcmp('ssa',''),strcmp('sssb','sa'),strcmp('','s'); -- STRCMP\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = '' THEN 0 WHEN 'ss' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'ss' THEN 0 WHEN '' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 's' = 'sss' THEN 0 WHEN 's' < 'sss' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'ssq' THEN 0 WHEN 'q' < 'ssq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'af' THEN 0 WHEN '' < 'af' THEN -1 ELSE 1 END, CASE WHEN 'a' = '' THEN 0 WHEN 'a' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeq' THEN 0 WHEN '' < 'aeq' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeaeq' THEN 0 WHEN '' < 'aeaeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = 'a' THEN 0 WHEN 'ss' < 'a' THEN -1 ELSE 1 END, CASE WHEN '' = 'ssa' THEN 0 WHEN '' < 'ssa' THEN -1 ELSE 1 END, CASE WHEN 'sa' = 'sssb' THEN 0 WHEN 'sa' < 'sssb' THEN -1 ELSE 1 END, CASE WHEN 's' = '' THEN 0 WHEN 's' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'o' THEN 0 WHEN '' < 'o' THEN -1 ELSE 1 END, CASE WHEN '' = 'u' THEN 0 WHEN '' < 'u' THEN -1 ELSE 1 END, CASE WHEN '' = 'oeb' THEN 0 WHEN '' < 'oeb' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'af' = '' THEN 0 WHEN 'af' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'a' THEN 0 WHEN '' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = '' THEN 0 WHEN 'aeq' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeaeq' = '' THEN 0 WHEN 'aeaeq' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'a' = 'ss' THEN 0 WHEN 'a' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 'ssa' = '' THEN 0 WHEN 'ssa' < '' THEN -1 ELSE 1 END, CASE WHEN 'sssb' = 'sa' THEN 0 WHEN 'sssb' < 'sa' THEN -1 ELSE 1 END, CASE WHEN '' = 's' THEN 0 WHEN '' < 's' THEN -1 ELSE 1 END;\n"
        ]
    },
    {
        "sql_id": "monetdb_8_7",
        "database_name": "monetdb_8_7",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select strcmp('u','a'),strcmp('u',''); -- STRCMP",
        "target_query": "SELECT CASE WHEN 'u' = 'a' THEN 0 WHEN 'u' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'u' = '' THEN 0 WHEN 'u' < '' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "MonetDB does not have a direct STRCMP function. This behavior can be simulated using a CASE statement to compare two strings lexicographically.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [
            "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP\n",
            "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP\n",
            "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP\n",
            "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP\n",
            "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP\n",
            "select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcmp('aeaeq',''); -- STRCMP\n",
            "select strcmp('a','ss'),strcmp('ssa',''),strcmp('sssb','sa'),strcmp('','s'); -- STRCMP\n",
            "select strcmp('u','a'),strcmp('u',''); -- STRCMP\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = '' THEN 0 WHEN 'ss' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'ss' THEN 0 WHEN '' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 's' = 'sss' THEN 0 WHEN 's' < 'sss' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'ssq' THEN 0 WHEN 'q' < 'ssq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'af' THEN 0 WHEN '' < 'af' THEN -1 ELSE 1 END, CASE WHEN 'a' = '' THEN 0 WHEN 'a' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeq' THEN 0 WHEN '' < 'aeq' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeaeq' THEN 0 WHEN '' < 'aeaeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = 'a' THEN 0 WHEN 'ss' < 'a' THEN -1 ELSE 1 END, CASE WHEN '' = 'ssa' THEN 0 WHEN '' < 'ssa' THEN -1 ELSE 1 END, CASE WHEN 'sa' = 'sssb' THEN 0 WHEN 'sa' < 'sssb' THEN -1 ELSE 1 END, CASE WHEN 's' = '' THEN 0 WHEN 's' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'o' THEN 0 WHEN '' < 'o' THEN -1 ELSE 1 END, CASE WHEN '' = 'u' THEN 0 WHEN '' < 'u' THEN -1 ELSE 1 END, CASE WHEN '' = 'oeb' THEN 0 WHEN '' < 'oeb' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'af' = '' THEN 0 WHEN 'af' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'a' THEN 0 WHEN '' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = '' THEN 0 WHEN 'aeq' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeaeq' = '' THEN 0 WHEN 'aeaeq' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'a' = 'ss' THEN 0 WHEN 'a' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 'ssa' = '' THEN 0 WHEN 'ssa' < '' THEN -1 ELSE 1 END, CASE WHEN 'sssb' = 'sa' THEN 0 WHEN 'sssb' < 'sa' THEN -1 ELSE 1 END, CASE WHEN '' = 's' THEN 0 WHEN '' < 's' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'u' = 'a' THEN 0 WHEN 'u' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'u' = '' THEN 0 WHEN 'u' < '' THEN -1 ELSE 1 END;\n"
        ]
    },
    {
        "sql_id": "monetdb_8_8",
        "database_name": "monetdb_8_8",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select strcmp('s', 'a'), strcmp('a', 'x'); -- STRCMP",
        "target_query": "SELECT CASE WHEN 's' = 'a' THEN 0 WHEN 's' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'a' = 'x' THEN 0 WHEN 'a' < 'x' THEN -1 ELSE 1 END;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "STRCMP"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "STRCMP(expr1, expr2)",
                "description": "Compares two strings lexicographically and returns 0 if they are equal, a negative number if the first string is smaller, and a positive number if the first string is larger.",
                "examples": [
                    "SELECT STRCMP('apple', 'banana');",
                    "SELECT STRCMP('grape', 'grape');",
                    "SELECT STRCMP('orange', 'apple');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN expr1 = expr2 THEN 0 WHEN expr1 < expr2 THEN -1 ELSE 1 END",
                "description": "MonetDB does not have a direct STRCMP function. This behavior can be simulated using a CASE statement to compare two strings lexicographically.",
                "examples": [
                    "SELECT CASE WHEN 'apple' = 'banana' THEN 0 WHEN 'apple' < 'banana' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'grape' = 'grape' THEN 0 WHEN 'grape' < 'grape' THEN -1 ELSE 1 END;",
                    "SELECT CASE WHEN 'orange' = 'apple' THEN 0 WHEN 'orange' < 'apple' THEN -1 ELSE 1 END;"
                ]
            }
        ],
        "source_related_schemas": [
            "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP\n",
            "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP\n",
            "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP\n",
            "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP\n",
            "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP\n",
            "select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcmp('aeaeq',''); -- STRCMP\n",
            "select strcmp('a','ss'),strcmp('ssa',''),strcmp('sssb','sa'),strcmp('','s'); -- STRCMP\n",
            "select strcmp('u','a'),strcmp('u',''); -- STRCMP\n",
            "select strcmp('s', 'a'), strcmp('a', 'x'); -- STRCMP\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = '' THEN 0 WHEN 'ss' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'ss' THEN 0 WHEN '' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 's' = 'sss' THEN 0 WHEN 's' < 'sss' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'ssq' THEN 0 WHEN 'q' < 'ssq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'af' THEN 0 WHEN '' < 'af' THEN -1 ELSE 1 END, CASE WHEN 'a' = '' THEN 0 WHEN 'a' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeq' THEN 0 WHEN '' < 'aeq' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeaeq' THEN 0 WHEN '' < 'aeaeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = 'a' THEN 0 WHEN 'ss' < 'a' THEN -1 ELSE 1 END, CASE WHEN '' = 'ssa' THEN 0 WHEN '' < 'ssa' THEN -1 ELSE 1 END, CASE WHEN 'sa' = 'sssb' THEN 0 WHEN 'sa' < 'sssb' THEN -1 ELSE 1 END, CASE WHEN 's' = '' THEN 0 WHEN 's' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'o' THEN 0 WHEN '' < 'o' THEN -1 ELSE 1 END, CASE WHEN '' = 'u' THEN 0 WHEN '' < 'u' THEN -1 ELSE 1 END, CASE WHEN '' = 'oeb' THEN 0 WHEN '' < 'oeb' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'af' = '' THEN 0 WHEN 'af' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'a' THEN 0 WHEN '' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = '' THEN 0 WHEN 'aeq' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeaeq' = '' THEN 0 WHEN 'aeaeq' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'a' = 'ss' THEN 0 WHEN 'a' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 'ssa' = '' THEN 0 WHEN 'ssa' < '' THEN -1 ELSE 1 END, CASE WHEN 'sssb' = 'sa' THEN 0 WHEN 'sssb' < 'sa' THEN -1 ELSE 1 END, CASE WHEN '' = 's' THEN 0 WHEN '' < 's' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'u' = 'a' THEN 0 WHEN 'u' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'u' = '' THEN 0 WHEN 'u' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 's' = 'a' THEN 0 WHEN 's' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'a' = 'x' THEN 0 WHEN 'a' < 'x' THEN -1 ELSE 1 END;\n"
        ]
    },
    {
        "sql_id": "monetdb_8_17",
        "database_name": "monetdb_8_17",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select * from t1 where length(s1)=2 and s1='oe'; -- LENGTH",
        "target_query": "select * from t1 where octet_length(s1)=2 and s1='oe'; -- LENGTH",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "select strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),strcmp('q','aeq'); -- STRCMP\n",
            "select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),strcmp('q','ssq'); -- STRCMP\n",
            "select strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcmp('','aeaeq'); -- STRCMP\n",
            "select strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb'),strcmp('s',''); -- STRCMP\n",
            "select strcmp('','o'),strcmp('','u'),strcmp('','oeb'); -- STRCMP\n",
            "select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcmp('aeaeq',''); -- STRCMP\n",
            "select strcmp('a','ss'),strcmp('ssa',''),strcmp('sssb','sa'),strcmp('','s'); -- STRCMP\n",
            "select strcmp('u','a'),strcmp('u',''); -- STRCMP\n",
            "select strcmp('s', 'a'), strcmp('a', 'x'); -- STRCMP\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (s1 CHAR(5));\n",
            "INSERT INTO t1 VALUES ('');\n",
            "INSERT INTO t1 VALUES ('ue');\n",
            "DROP TABLE t1;\n",
            "create table t1 (s1 char(5));\n",
            "insert into t1 values ('oe');\n",
            "select * from t1 where length(s1)=2 and s1='oe'; -- LENGTH\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN '' = 'ae' THEN 0 WHEN '' < 'ae' THEN -1 ELSE 1 END, CASE WHEN 'ae' = '' THEN 0 WHEN 'ae' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = 'q' THEN 0 WHEN 'aeq' < 'q' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'aeq' THEN 0 WHEN 'q' < 'aeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = '' THEN 0 WHEN 'ss' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'ss' THEN 0 WHEN '' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 's' = 'sss' THEN 0 WHEN 's' < 'sss' THEN -1 ELSE 1 END, CASE WHEN 'q' = 'ssq' THEN 0 WHEN 'q' < 'ssq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'af' THEN 0 WHEN '' < 'af' THEN -1 ELSE 1 END, CASE WHEN 'a' = '' THEN 0 WHEN 'a' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeq' THEN 0 WHEN '' < 'aeq' THEN -1 ELSE 1 END, CASE WHEN '' = 'aeaeq' THEN 0 WHEN '' < 'aeaeq' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'ss' = 'a' THEN 0 WHEN 'ss' < 'a' THEN -1 ELSE 1 END, CASE WHEN '' = 'ssa' THEN 0 WHEN '' < 'ssa' THEN -1 ELSE 1 END, CASE WHEN 'sa' = 'sssb' THEN 0 WHEN 'sa' < 'sssb' THEN -1 ELSE 1 END, CASE WHEN 's' = '' THEN 0 WHEN 's' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN '' = 'o' THEN 0 WHEN '' < 'o' THEN -1 ELSE 1 END, CASE WHEN '' = 'u' THEN 0 WHEN '' < 'u' THEN -1 ELSE 1 END, CASE WHEN '' = 'oeb' THEN 0 WHEN '' < 'oeb' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'af' = '' THEN 0 WHEN 'af' < '' THEN -1 ELSE 1 END, CASE WHEN '' = 'a' THEN 0 WHEN '' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'aeq' = '' THEN 0 WHEN 'aeq' < '' THEN -1 ELSE 1 END, CASE WHEN 'aeaeq' = '' THEN 0 WHEN 'aeaeq' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'a' = 'ss' THEN 0 WHEN 'a' < 'ss' THEN -1 ELSE 1 END, CASE WHEN 'ssa' = '' THEN 0 WHEN 'ssa' < '' THEN -1 ELSE 1 END, CASE WHEN 'sssb' = 'sa' THEN 0 WHEN 'sssb' < 'sa' THEN -1 ELSE 1 END, CASE WHEN '' = 's' THEN 0 WHEN '' < 's' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 'u' = 'a' THEN 0 WHEN 'u' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'u' = '' THEN 0 WHEN 'u' < '' THEN -1 ELSE 1 END;\n",
            "SELECT CASE WHEN 's' = 'a' THEN 0 WHEN 's' < 'a' THEN -1 ELSE 1 END, CASE WHEN 'a' = 'x' THEN 0 WHEN 'a' < 'x' THEN -1 ELSE 1 END;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (s1 CHAR(5));\n",
            "INSERT INTO t1 VALUES ('');\n",
            "INSERT INTO t1 VALUES ('ue');\n",
            "DROP TABLE t1;\n",
            "create table t1 (s1 char(5));\n",
            "insert into t1 values ('oe');\n",
            "select * from t1 where octet_length(s1)=2 and s1='oe'; -- LENGTH\n"
        ]
    },
    {
        "sql_id": "monetdb_80_0",
        "database_name": "monetdb_80_0",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_80_1",
        "database_name": "monetdb_80_1",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_80_2",
        "database_name": "monetdb_80_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_80_3",
        "database_name": "monetdb_80_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_80_4",
        "database_name": "monetdb_80_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_80_5",
        "database_name": "monetdb_80_5",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD('a', 5, NULL) AS result; -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 5, NULL) AS result; -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_80_6",
        "database_name": "monetdb_80_6",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_80_7",
        "database_name": "monetdb_80_7",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD('a', 0, 'x') AS result; -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, 'x') AS result; -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_80_8",
        "database_name": "monetdb_80_8",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD('a', 0, '') AS result; -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, '') AS result; -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_80_9",
        "database_name": "monetdb_80_9",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD('', 0, 'x') AS result; -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH(''))), '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, 'x') AS result; -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_80_10",
        "database_name": "monetdb_80_10",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD('', 0, '') AS result; -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH(''))), '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, '') AS result; -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_80_11",
        "database_name": "monetdb_80_11",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD('a', -1, 'x'); -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT('x', GREATEST(0, -1 - LENGTH('a'))), 'a');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('a', -1, 'x'); -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, -1 - LENGTH('a'))), 'a');\n"
        ]
    },
    {
        "sql_id": "monetdb_80_12",
        "database_name": "monetdb_80_12",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD('123', 5, 'x'); -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH('123'))), '123');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('a', -1, 'x'); -- LPAD\n",
            "SELECT LPAD('123', 5, 'x'); -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, -1 - LENGTH('a'))), 'a');\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH('123'))), '123');\n"
        ]
    },
    {
        "sql_id": "monetdb_80_13",
        "database_name": "monetdb_80_13",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD('a', 5, 'xy'); -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT('xy', GREATEST(0, 5 - LENGTH('a'))), 'a');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('a', -1, 'x'); -- LPAD\n",
            "SELECT LPAD('123', 5, 'x'); -- LPAD\n",
            "SELECT LPAD('a', 5, 'xy'); -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, -1 - LENGTH('a'))), 'a');\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH('123'))), '123');\n",
            "SELECT CONCAT(REPEAT('xy', GREATEST(0, 5 - LENGTH('a'))), 'a');\n"
        ]
    },
    {
        "sql_id": "monetdb_80_14",
        "database_name": "monetdb_80_14",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD(\"I LOVE SQL\", 20, \" \"); -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH('I LOVE SQL'))), 'I LOVE SQL');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('a', -1, 'x'); -- LPAD\n",
            "SELECT LPAD('123', 5, 'x'); -- LPAD\n",
            "SELECT LPAD('a', 5, 'xy'); -- LPAD\n",
            "SELECT LPAD(\"I LOVE SQL\", 20, \" \"); -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, -1 - LENGTH('a'))), 'a');\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH('123'))), '123');\n",
            "SELECT CONCAT(REPEAT('xy', GREATEST(0, 5 - LENGTH('a'))), 'a');\n",
            "SELECT CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH('I LOVE SQL'))), 'I LOVE SQL');\n"
        ]
    },
    {
        "sql_id": "monetdb_80_15",
        "database_name": "monetdb_80_15",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LPAD(\"I LOVE SQL in the morning\", 20, \" \"); -- LPAD",
        "target_query": "SELECT CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH('I LOVE SQL in the morning'))), 'I LOVE SQL in the morning');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LPAD(string, length, pad_string)",
                "description": "This function pads the left side of a string with a specified padding string until the desired length is reached.",
                "examples": [
                    "SELECT LPAD('hello', 10, 'x');",
                    "SELECT LPAD('abc', 6, '123');",
                    "SELECT LPAD('123', 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CONCAT(REPEAT(pad_string, GREATEST(0, length - LENGTH(string))), string)",
                "description": "MonetDB does not support LPAD directly, but it can be simulated using CONCAT, REPEAT, and LENGTH functions.",
                "examples": [
                    "SELECT CONCAT(REPEAT('x', GREATEST(0, 10 - LENGTH('hello'))), 'hello');",
                    "SELECT CONCAT(REPEAT('123', GREATEST(0, 6 - LENGTH('abc'))), 'abc');",
                    "SELECT CONCAT(REPEAT('0', GREATEST(0, 5 - LENGTH('123'))), '123');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT LPAD(NULL, 5, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD(NULL, NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', NULL, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD(NULL, 5, NULL) AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('a', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, 'x') AS result; -- LPAD\n",
            "SELECT LPAD('', 0, '') AS result; -- LPAD\n",
            "SELECT LPAD('a', -1, 'x'); -- LPAD\n",
            "SELECT LPAD('123', 5, 'x'); -- LPAD\n",
            "SELECT LPAD('a', 5, 'xy'); -- LPAD\n",
            "SELECT LPAD(\"I LOVE SQL\", 20, \" \"); -- LPAD\n",
            "SELECT LPAD(\"I LOVE SQL in the morning\", 20, \" \"); -- LPAD\n"
        ],
        "target_related_schemas": [
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, NULL - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT(NULL, GREATEST(0, 5 - LENGTH(NULL))), NULL) AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH('a'))), 'a') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n",
            "SELECT CONCAT(REPEAT('', GREATEST(0, 0 - LENGTH(''))), '') AS result;\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, -1 - LENGTH('a'))), 'a');\n",
            "SELECT CONCAT(REPEAT('x', GREATEST(0, 5 - LENGTH('123'))), '123');\n",
            "SELECT CONCAT(REPEAT('xy', GREATEST(0, 5 - LENGTH('a'))), 'a');\n",
            "SELECT CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH('I LOVE SQL'))), 'I LOVE SQL');\n",
            "SELECT CONCAT(REPEAT(' ', GREATEST(0, 20 - LENGTH('I LOVE SQL in the morning'))), 'I LOVE SQL in the morning');\n"
        ]
    },
    {
        "sql_id": "monetdb_81_2",
        "database_name": "monetdb_81_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns the string 'str' repeated 'count' times. Behavior on NULL matches MySQL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (f1 LONGTEXT , f2  INTEGER);\n",
            "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5); -- REPEAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (f1 TEXT , f2 INTEGER);\n",
            "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5);\n"
        ]
    },
    {
        "sql_id": "monetdb_81_15",
        "database_name": "monetdb_81_15",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT SUM(LENGTH(f1)) FROM t1; -- LENGTH",
        "target_query": "SELECT SUM(octet_length(f1)) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (f1 LONGTEXT , f2  INTEGER);\n",
            "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5); -- REPEAT\n",
            "INSERT INTO t1 SELECT f1, f2 + 6 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 12 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 24 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 48 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 96 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 192 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 384 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 768 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 1536 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 3072 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 6144 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 12288 FROM t1;\n",
            "SELECT SUM(LENGTH(f1)) FROM t1; -- LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (f1 TEXT , f2 INTEGER);\n",
            "INSERT INTO t1 VALUES(REPEAT('a', 1024), 0), (REPEAT('b', 1024), 1),(REPEAT('c', 1024), 2), (REPEAT('d', 1024), 3),(REPEAT('e', 1024), 4), (REPEAT('f', 1024), 5);\n",
            "INSERT INTO t1 SELECT f1, f2 + 6 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 12 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 24 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 48 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 96 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 192 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 384 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 768 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 1536 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 3072 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 6144 FROM t1;\n",
            "INSERT INTO t1 SELECT f1, f2 + 12288 FROM t1;\n",
            "SELECT SUM(octet_length(f1)) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_82_3",
        "database_name": "monetdb_82_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT COALESCE(d, d), IFNULL(d, d), IF(i, d, d),CASE i WHEN i THEN d ELSE d END, GREATEST(d, d), LEAST(d, d)FROM t1 ORDER BY RAND(); -- COALESCE, IFNULL, IF, GREATEST, LEAST",
        "target_query": "SELECT COALESCE(d, d), COALESCE(d, d), CASE WHEN i THEN d ELSE d END, CASE i WHEN i THEN d ELSE d END, GREATEST(d, d), CASE WHEN d <= d THEN d ELSE d END FROM t1 ORDER BY RAND();",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE",
            "IFNULL",
            "IF",
            "GREATEST",
            "LEAST"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            },
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            },
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            },
            {
                "expression": "LEAST(expr1, expr2, ...)",
                "description": "Returns the smallest value from the argument list. If any argument is NULL, the result is NULL regardless of other values. Implicit type conversion is applied before comparison.",
                "examples": [
                    "SELECT LEAST(5, 10, 3);",
                    "SELECT LEAST('2024-01-01', '2023-12-31');",
                    "SELECT LEAST(NULL, 2);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function is supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1;"
                ]
            },
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "MonetDB also uses COALESCE to return the first non-NULL value. This works the same way as IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            },
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "MonetDB does not support the `IF` function, but you can use the `CASE WHEN` expression to achieve similar functionality. It evaluates a condition and returns different values based on the truth value of the condition.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            },
            {
                "expression": "GREATEST(expr1, expr2, ..., exprN)",
                "description": "Returns the greatest value among the provided arguments, supporting numeric, string, and date types.",
                "examples": [
                    "SELECT GREATEST(3, 7, 2);",
                    "SELECT GREATEST(5.5, 7.2, 6.1) + 0.0;",
                    "SELECT GREATEST('2023-05-10', '2022-05-12') AS latest_date;"
                ]
            },
            {
                "expression": "CASE WHEN ... THEN ... END",
                "description": "MonetDB does not support a native LEAST function. Equivalent behavior can be emulated using nested CASE WHEN expressions to compare and return the smallest non-null value.",
                "examples": [
                    "SELECT CASE WHEN a IS NULL THEN b WHEN b IS NULL THEN a WHEN a <= b THEN a ELSE b END;",
                    "SELECT CASE WHEN a <= b AND a <= c THEN a WHEN b <= c THEN b ELSE c END;",
                    "SELECT CASE WHEN x IS NULL THEN y WHEN y IS NULL THEN x WHEN x < y THEN x ELSE y END;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (i INT, d DATE);\n",
            "INSERT INTO t1 VALUES (1, '2008-01-01'), (2, '2008-01-02'), (3, '2008-01-03');\n",
            "SELECT COALESCE(d, d), IFNULL(d, d), IF(i, d, d),CASE i WHEN i THEN d ELSE d END, GREATEST(d, d), LEAST(d, d)FROM t1 ORDER BY RAND(); -- COALESCE, IFNULL, IF, GREATEST, LEAST\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (i INT, d DATE);\n",
            "INSERT INTO t1 VALUES (1, '2008-01-01'), (2, '2008-01-02'), (3, '2008-01-03');\n",
            "SELECT COALESCE(d, d), COALESCE(d, d), CASE WHEN i THEN d ELSE d END, CASE i WHEN i THEN d ELSE d END, GREATEST(d, d), CASE WHEN d <= d THEN d ELSE d END FROM t1 ORDER BY RAND();\n"
        ]
    },
    {
        "sql_id": "monetdb_84_2",
        "database_name": "monetdb_84_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "insert into t5 values (1, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "insert into t5 values (1, sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'DAY'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "sys.timestamp_to_str(timestamp_expr, format_str)",
                "description": "Formats a timestamp using MonetDB's internal formatting function. Format specifiers follow standard SQL/Oracle-style.",
                "examples": [
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2023-07-14 15:30:00', 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2022-01-01 08:45:30', 'HH24:MI:SS DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t5;\n",
            "create table t5 (c1 int, c2 varchar(128) not null);\n",
            "insert into t5 values (1, date_format('2001-01-01','%W')); -- DATE_FORMAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t5;\n",
            "create table t5 (c1 int, c2 varchar(128) not null);\n",
            "insert into t5 values (1, sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'DAY'));\n"
        ]
    },
    {
        "sql_id": "monetdb_84_3",
        "database_name": "monetdb_84_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "insert into t5 values (2, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "insert into t5 values (2, sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'DAY'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "sys.timestamp_to_str(timestamp_expr, format_str)",
                "description": "Formats a timestamp using MonetDB's internal formatting function. Format specifiers follow standard SQL/Oracle-style.",
                "examples": [
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2023-07-14 15:30:00', 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2022-01-01 08:45:30', 'HH24:MI:SS DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t5;\n",
            "create table t5 (c1 int, c2 varchar(128) not null);\n",
            "insert into t5 values (1, date_format('2001-01-01','%W')); -- DATE_FORMAT\n",
            "insert into t5 values (2, date_format('2001-01-01','%W')); -- DATE_FORMAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t5;\n",
            "create table t5 (c1 int, c2 varchar(128) not null);\n",
            "insert into t5 values (1, sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'DAY'));\n",
            "insert into t5 values (2, sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'DAY'));\n"
        ]
    },
    {
        "sql_id": "monetdb_84_4",
        "database_name": "monetdb_84_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "insert into t5 values (3, date_format('2001-01-01','%W')); -- DATE_FORMAT",
        "target_query": "insert into t5 values (3, sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'DAY'));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "DATE_FORMAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "DATE_FORMAT(date_expr, format_str)",
                "description": "Formats a date/time expression according to the given format string using MySQL-specific format specifiers.",
                "examples": [
                    "SELECT DATE_FORMAT('2024-05-06 08:30:00', '%Y/%m/%d');",
                    "SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');",
                    "SELECT DATE_FORMAT('2023-01-15', '%d-%m-%Y');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "sys.timestamp_to_str(timestamp_expr, format_str)",
                "description": "Formats a timestamp using MonetDB's internal formatting function. Format specifiers follow standard SQL/Oracle-style.",
                "examples": [
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2024-05-06 08:30:00', 'YYYY/MM/DD');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2023-07-14 15:30:00', 'YYYY-MM-DD HH24:MI:SS');",
                    "SELECT sys.timestamp_to_str(TIMESTAMP '2022-01-01 08:45:30', 'HH24:MI:SS DD-MM-YYYY');"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t5;\n",
            "create table t5 (c1 int, c2 varchar(128) not null);\n",
            "insert into t5 values (1, date_format('2001-01-01','%W')); -- DATE_FORMAT\n",
            "insert into t5 values (2, date_format('2001-01-01','%W')); -- DATE_FORMAT\n",
            "insert into t5 values (3, date_format('2001-01-01','%W')); -- DATE_FORMAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t5;\n",
            "create table t5 (c1 int, c2 varchar(128) not null);\n",
            "insert into t5 values (1, sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'DAY'));\n",
            "insert into t5 values (2, sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'DAY'));\n",
            "insert into t5 values (3, sys.timestamp_to_str(TIMESTAMP '2001-01-01', 'DAY'));\n"
        ]
    },
    {
        "sql_id": "monetdb_85_2",
        "database_name": "monetdb_85_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns the string 'str' repeated 'count' times. Behavior on NULL matches MySQL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c1 LONGTEXT);\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123)); -- REPEAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c1 TEXT);\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123));\n"
        ]
    },
    {
        "sql_id": "monetdb_85_3",
        "database_name": "monetdb_85_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns the string 'str' repeated 'count' times. Behavior on NULL matches MySQL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c1 LONGTEXT);\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123)); -- REPEAT\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234)); -- REPEAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c1 TEXT);\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123));\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234));\n"
        ]
    },
    {
        "sql_id": "monetdb_85_4",
        "database_name": "monetdb_85_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns the string 'str' repeated 'count' times. Behavior on NULL matches MySQL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c1 LONGTEXT);\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123)); -- REPEAT\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234)); -- REPEAT\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345)); -- REPEAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c1 TEXT);\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123));\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234));\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345));\n"
        ]
    },
    {
        "sql_id": "monetdb_85_5",
        "database_name": "monetdb_85_5",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456)); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns the string 'str' repeated 'count' times. Behavior on NULL matches MySQL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c1 LONGTEXT);\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123)); -- REPEAT\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234)); -- REPEAT\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345)); -- REPEAT\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456)); -- REPEAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c1 TEXT);\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123));\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234));\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345));\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456));\n"
        ]
    },
    {
        "sql_id": "monetdb_85_6",
        "database_name": "monetdb_85_6",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LENGTH(c1) FROM t1; -- LENGTH",
        "target_query": "SELECT octet_length(c1) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c1 LONGTEXT);\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123)); -- REPEAT\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234)); -- REPEAT\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345)); -- REPEAT\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456)); -- REPEAT\n",
            "SELECT LENGTH(c1) FROM t1; -- LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c1 TEXT);\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 123));\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 234));\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 345));\n",
            "INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 456));\n",
            "SELECT octet_length(c1) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_86_1",
        "database_name": "monetdb_86_1",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select NULL=NULL,NULL<>NULL,IFNULL(NULL,1.1)+0,IFNULL(NULL,1) | 0; -- IFNULL",
        "target_query": "SELECT NULL = NULL, NULL <> NULL, COALESCE(NULL, 1.1) + 0, COALESCE(NULL, 1) | 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "MonetDB also uses COALESCE to return the first non-NULL value. This works the same way as IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "select NULL=NULL,NULL<>NULL,IFNULL(NULL,1.1)+0,IFNULL(NULL,1) | 0; -- IFNULL\n"
        ],
        "target_related_schemas": [
            "SELECT NULL = NULL, NULL <> NULL, COALESCE(NULL, 1.1) + 0, COALESCE(NULL, 1) | 0;\n"
        ]
    },
    {
        "sql_id": "monetdb_86_4",
        "database_name": "monetdb_86_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select field(NULL,\"a\",\"b\",\"c\"); -- FIELD",
        "target_query": "SELECT FIELD(NULL, 'a', 'b', 'c');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FIELD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found.",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "FIELD(val, val1, val2, ..., valN)",
                "description": "Returns the index (1-based) of the first value in the list that is equal to 'val'. Returns 0 if no match is found. This behaves the same as MySQL FIELD().",
                "examples": [
                    "SELECT FIELD('c', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('x', 'a', 'b', 'c') AS result;",
                    "SELECT FIELD('b', 'b', 'b', 'b') AS result;"
                ]
            }
        ],
        "source_related_schemas": [
            "select NULL=NULL,NULL<>NULL,IFNULL(NULL,1.1)+0,IFNULL(NULL,1) | 0; -- IFNULL\n",
            "select field(NULL,\"a\",\"b\",\"c\"); -- FIELD\n"
        ],
        "target_related_schemas": [
            "SELECT NULL = NULL, NULL <> NULL, COALESCE(NULL, 1.1) + 0, COALESCE(NULL, 1) | 0;\n",
            "SELECT FIELD(NULL, 'a', 'b', 'c');\n"
        ]
    },
    {
        "sql_id": "monetdb_86_9",
        "database_name": "monetdb_86_9",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(a, b) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 AS SELECT COALESCE(a, b) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "MonetDB also uses COALESCE to return the first non-NULL value. This works the same way as IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "select NULL=NULL,NULL<>NULL,IFNULL(NULL,1.1)+0,IFNULL(NULL,1) | 0; -- IFNULL\n",
            "select field(NULL,\"a\",\"b\",\"c\"); -- FIELD\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DECIMAL (1, 0), b DECIMAL (1, 0));\n",
            "INSERT INTO t1 (a, b) VALUES (0, 0);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 SELECT IFNULL(a, b) FROM t1; -- IFNULL\n"
        ],
        "target_related_schemas": [
            "SELECT NULL = NULL, NULL <> NULL, COALESCE(NULL, 1.1) + 0, COALESCE(NULL, 1) | 0;\n",
            "SELECT FIELD(NULL, 'a', 'b', 'c');\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DECIMAL(1, 0), b DECIMAL(1, 0));\n",
            "INSERT INTO t1 (a, b) VALUES (0, 0);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 AS SELECT COALESCE(a, b) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_86_11",
        "database_name": "monetdb_86_11",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(a, NULL) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 AS SELECT COALESCE(a, NULL) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "MonetDB also uses COALESCE to return the first non-NULL value. This works the same way as IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "select NULL=NULL,NULL<>NULL,IFNULL(NULL,1.1)+0,IFNULL(NULL,1) | 0; -- IFNULL\n",
            "select field(NULL,\"a\",\"b\",\"c\"); -- FIELD\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DECIMAL (1, 0), b DECIMAL (1, 0));\n",
            "INSERT INTO t1 (a, b) VALUES (0, 0);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 SELECT IFNULL(a, b) FROM t1; -- IFNULL\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t2 SELECT IFNULL(a, NULL) FROM t1; -- IFNULL\n"
        ],
        "target_related_schemas": [
            "SELECT NULL = NULL, NULL <> NULL, COALESCE(NULL, 1.1) + 0, COALESCE(NULL, 1) | 0;\n",
            "SELECT FIELD(NULL, 'a', 'b', 'c');\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DECIMAL(1, 0), b DECIMAL(1, 0));\n",
            "INSERT INTO t1 (a, b) VALUES (0, 0);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 AS SELECT COALESCE(a, b) FROM t1;\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t2 AS SELECT COALESCE(a, NULL) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_86_13",
        "database_name": "monetdb_86_13",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "CREATE TABLE t2 SELECT IFNULL(NULL, b) FROM t1; -- IFNULL",
        "target_query": "CREATE TABLE t2 AS SELECT COALESCE(NULL, b) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "MonetDB also uses COALESCE to return the first non-NULL value. This works the same way as IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "select NULL=NULL,NULL<>NULL,IFNULL(NULL,1.1)+0,IFNULL(NULL,1) | 0; -- IFNULL\n",
            "select field(NULL,\"a\",\"b\",\"c\"); -- FIELD\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DECIMAL (1, 0), b DECIMAL (1, 0));\n",
            "INSERT INTO t1 (a, b) VALUES (0, 0);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 SELECT IFNULL(a, b) FROM t1; -- IFNULL\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t2 SELECT IFNULL(a, NULL) FROM t1; -- IFNULL\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t2 SELECT IFNULL(NULL, b) FROM t1; -- IFNULL\n"
        ],
        "target_related_schemas": [
            "SELECT NULL = NULL, NULL <> NULL, COALESCE(NULL, 1.1) + 0, COALESCE(NULL, 1) | 0;\n",
            "SELECT FIELD(NULL, 'a', 'b', 'c');\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (a DECIMAL(1, 0), b DECIMAL(1, 0));\n",
            "INSERT INTO t1 (a, b) VALUES (0, 0);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 AS SELECT COALESCE(a, b) FROM t1;\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t2 AS SELECT COALESCE(a, NULL) FROM t1;\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t2 AS SELECT COALESCE(NULL, b) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_87_2",
        "database_name": "monetdb_87_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2); -- REPEAT",
        "target_query": "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns the string 'str' repeated 'count' times. Behavior on NULL matches MySQL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1( a VARCHAR( 10 ), b INT );\n",
            "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2); -- REPEAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1( a VARCHAR( 10 ), b INT );\n",
            "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2);\n"
        ]
    },
    {
        "sql_id": "monetdb_87_3",
        "database_name": "monetdb_87_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT GROUP_CONCAT(a) FROM t1; -- GROUP_CONCAT",
        "target_query": "SELECT GROUP_CONCAT(a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "GROUP_CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "group_concat(X)group_concat(X,Y)string_agg(X,Y)",
                "description": "The GROUP_CONCAT([DISTINCT] expr [,expr ...]  [ORDER BY {unsigned_integer | col_name | expr}  [ASC | DESC] [,col_name ...]]  [SEPARATOR str_val])\nfunction returns a string result with the concatenated non-NULL values from a group.\nDISTINGUISHED keyword can be used to eliminate duplicate values.\nORDER BY clause can be used to sort the values.\nSEPARATOR keyword specifies the separator between values, default is comma(,).\nThe maximum length of the result is controlled by group_concat_max_len system variable, default is 1024.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns a comma-separated list of names",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by '|'"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "group_concat(X) group_concat(X,Y)",
                "description": "The group_concat(X,Y) function returns a string which is the concatenation of all non-NULL values of X. If parameter Y is present, it is used as the separator between values. A comma (\",\") is used as the default separator if Y is omitted.\n\nThe order of concatenated elements is arbitrary unless an ORDER BY clause is explicitly used.",
                "examples": [
                    "SELECT group_concat(name) FROM students; -- Returns names separated by commas",
                    "SELECT group_concat(name, ' | ') FROM students; -- Returns names separated by ' | '",
                    "SELECT department, group_concat(name, '; ') FROM employees GROUP BY department; -- Groups names by department"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1( a VARCHAR( 10 ), b INT );\n",
            "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2); -- REPEAT\n",
            "SELECT GROUP_CONCAT(a) FROM t1; -- GROUP_CONCAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1( a VARCHAR( 10 ), b INT );\n",
            "INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),( repeat( 'b', 10 ), 2);\n",
            "SELECT GROUP_CONCAT(a) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_88_0",
        "database_name": "monetdb_88_0",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select repeat('a',2000); -- REPEAT",
        "target_query": "select repeat('a',2000);",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns the string 'str' repeated 'count' times. Behavior on NULL matches MySQL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "select repeat('a',2000); -- REPEAT\n"
        ],
        "target_related_schemas": [
            "select repeat('a',2000);\n"
        ]
    },
    {
        "sql_id": "monetdb_88_1",
        "database_name": "monetdb_88_1",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") as len; -- LENGTH",
        "target_query": "SELECT octet_length('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') as len;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "select repeat('a',2000); -- REPEAT\n",
            "SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") as len; -- LENGTH\n"
        ],
        "target_related_schemas": [
            "select repeat('a',2000);\n",
            "SELECT octet_length('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') as len;\n"
        ]
    },
    {
        "sql_id": "monetdb_88_2",
        "database_name": "monetdb_88_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select length(repeat('a',2000)); -- LENGTH, REPEAT",
        "target_query": "select octet_length(repeat('a',2000));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH",
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            },
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns the string 'str' repeated 'count' times. Behavior on NULL matches MySQL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "select repeat('a',2000); -- REPEAT\n",
            "SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") as len; -- LENGTH\n",
            "select length(repeat('a',2000)); -- LENGTH, REPEAT\n"
        ],
        "target_related_schemas": [
            "select repeat('a',2000);\n",
            "SELECT octet_length('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') as len;\n",
            "select octet_length(repeat('a',2000));\n"
        ]
    },
    {
        "sql_id": "monetdb_88_9",
        "database_name": "monetdb_88_9",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT c11, LENGTH(c12) FROM t1; -- LENGTH",
        "target_query": "SELECT c11, octet_length(c12) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "select repeat('a',2000); -- REPEAT\n",
            "SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") as len; -- LENGTH\n",
            "select length(repeat('a',2000)); -- LENGTH, REPEAT\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c11 INT NOT NULL, c12 LONGTEXT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 (c21 INT NOT NULL, c22 LONGTEXT);\n",
            "INSERT INTO t1 VALUES(100,'abcd');\n",
            "INSERT INTO t2 VALUES(100,'xyz');\n",
            "SELECT c11, LENGTH(c12) FROM t1; -- LENGTH\n"
        ],
        "target_related_schemas": [
            "select repeat('a',2000);\n",
            "SELECT octet_length('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') as len;\n",
            "select octet_length(repeat('a',2000));\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (c11 INT NOT NULL, c12 TEXT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2 (c21 INT NOT NULL, c22 TEXT);\n",
            "INSERT INTO t1 VALUES(100,'abcd');\n",
            "INSERT INTO t2 VALUES(100,'xyz');\n",
            "SELECT c11, octet_length(c12) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_89_8",
        "database_name": "monetdb_89_8",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "create table t1 as select to_seconds(null) as to_seconds; -- TO_SECONDS",
        "target_query": "create table t1 as select CASE WHEN NULL IS NULL THEN NULL ELSE EXTRACT(EPOCH FROM NULL) + 62167219200 END as to_seconds;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TO_SECONDS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TO_SECONDS(datetime_expr)",
                "description": "Returns the number of seconds since year 0 to the given datetime.",
                "examples": [
                    "SELECT TO_SECONDS('2000-01-01 00:00:00');",
                    "SELECT TO_SECONDS(NOW());",
                    "SELECT TO_SECONDS(NULL);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "EXTRACT(EPOCH FROM ts) + 62167219200",
                "description": "Converts timestamp to the number of seconds since the year 0 by extracting the Unix epoch and adding the seconds from year 0 to 1970.",
                "examples": [
                    "SELECT EXTRACT(EPOCH FROM TIMESTAMP '2020-12-31 12:00:00') + 62167219200;",
                    "SELECT EXTRACT(EPOCH FROM NOW()) + 62167219200;",
                    "SELECT CASE WHEN NULL IS NULL THEN NULL ELSE EXTRACT(EPOCH FROM NULL) + 62167219200 END;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (a varchar(50));\n",
            "insert into t1 values (0x00410000);\n",
            "drop table t1;\n",
            "create table t1 as select to_seconds(null) as to_seconds; -- TO_SECONDS\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "create table t1 (a varchar(50));\n",
            "insert into t1 values (X'00410000');\n",
            "drop table t1;\n",
            "create table t1 as select CASE WHEN NULL IS NULL THEN NULL ELSE EXTRACT(EPOCH FROM NULL) + 62167219200 END as to_seconds;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_0",
        "database_name": "monetdb_9_0",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF",
        "target_query": "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "MonetDB does not support the `IF` function, but you can use the `CASE WHEN` expression to achieve similar functionality. It evaluates a condition and returns different values based on the truth value of the condition.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_4",
        "database_name": "monetdb_9_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF",
        "target_query": "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "MonetDB does not support the `IF` function, but you can use the `CASE WHEN` expression to achieve similar functionality. It evaluates a condition and returns different values based on the truth value of the condition.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_5",
        "database_name": "monetdb_9_5",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF",
        "target_query": "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "MonetDB does not support the `IF` function, but you can use the `CASE WHEN` expression to achieve similar functionality. It evaluates a condition and returns different values based on the truth value of the condition.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_7",
        "database_name": "monetdb_9_7",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select nullif(u, 1) from t1; -- NULLIF",
        "target_query": "SELECT NULLIF(u, 1) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(EXTRACT(YEAR FROM DATE '2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "select nullif(u, 1) from t1; -- NULLIF\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT NULLIF(u, 1) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_8",
        "database_name": "monetdb_9_8",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "explain select nullif(u, 1) from t1; -- NULLIF",
        "target_query": "EXPLAIN SELECT NULLIF(u, 1) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(EXTRACT(YEAR FROM DATE '2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "select nullif(u, 1) from t1; -- NULLIF\n",
            "explain select nullif(u, 1) from t1; -- NULLIF\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT NULLIF(u, 1) FROM t1;\n",
            "EXPLAIN SELECT NULLIF(u, 1) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_12",
        "database_name": "monetdb_9_12",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select sum(if(num is null,0.00,num)) from t1; -- IF",
        "target_query": "SELECT SUM(CASE WHEN num IS NULL THEN 0.00 ELSE num END) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "MonetDB does not support the `IF` function, but you can use the `CASE WHEN` expression to achieve similar functionality. It evaluates a condition and returns different values based on the truth value of the condition.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "select nullif(u, 1) from t1; -- NULLIF\n",
            "explain select nullif(u, 1) from t1; -- NULLIF\n",
            "drop table t1;\n",
            "create table t1 (num  double(12,2));\n",
            "insert into t1 values (144.54);\n",
            "select sum(if(num is null,0.00,num)) from t1; -- IF\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT NULLIF(u, 1) FROM t1;\n",
            "EXPLAIN SELECT NULLIF(u, 1) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (num decimal(12,2));\n",
            "INSERT INTO t1 VALUES (144.54);\n",
            "SELECT SUM(CASE WHEN num IS NULL THEN 0.00 ELSE num END) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_16",
        "database_name": "monetdb_9_16",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF",
        "target_query": "SELECT MIN(CASE WHEN y - x > 5 THEN y ELSE NULL END), MAX(CASE WHEN y - x > 5 THEN y ELSE NULL END) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "MonetDB does not support the `IF` function, but you can use the `CASE WHEN` expression to achieve similar functionality. It evaluates a condition and returns different values based on the truth value of the condition.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "select nullif(u, 1) from t1; -- NULLIF\n",
            "explain select nullif(u, 1) from t1; -- NULLIF\n",
            "drop table t1;\n",
            "create table t1 (num  double(12,2));\n",
            "insert into t1 values (144.54);\n",
            "select sum(if(num is null,0.00,num)) from t1; -- IF\n",
            "drop table t1;\n",
            "create table t1 (x int, y int);\n",
            "insert into t1 values (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT NULLIF(u, 1) FROM t1;\n",
            "EXPLAIN SELECT NULLIF(u, 1) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (num decimal(12,2));\n",
            "INSERT INTO t1 VALUES (144.54);\n",
            "SELECT SUM(CASE WHEN num IS NULL THEN 0.00 ELSE num END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (x int, y int);\n",
            "INSERT INTO t1 VALUES (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "SELECT MIN(CASE WHEN y - x > 5 THEN y ELSE NULL END), MAX(CASE WHEN y - x > 5 THEN y ELSE NULL END) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_18",
        "database_name": "monetdb_9_18",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF",
        "target_query": "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(EXTRACT(YEAR FROM DATE '2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "select nullif(u, 1) from t1; -- NULLIF\n",
            "explain select nullif(u, 1) from t1; -- NULLIF\n",
            "drop table t1;\n",
            "create table t1 (num  double(12,2));\n",
            "insert into t1 values (144.54);\n",
            "select sum(if(num is null,0.00,num)) from t1; -- IF\n",
            "drop table t1;\n",
            "create table t1 (x int, y int);\n",
            "insert into t1 values (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF\n",
            "drop table t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT NULLIF(u, 1) FROM t1;\n",
            "EXPLAIN SELECT NULLIF(u, 1) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (num decimal(12,2));\n",
            "INSERT INTO t1 VALUES (144.54);\n",
            "SELECT SUM(CASE WHEN num IS NULL THEN 0.00 ELSE num END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (x int, y int);\n",
            "INSERT INTO t1 VALUES (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "SELECT MIN(CASE WHEN y - x > 5 THEN y ELSE NULL END), MAX(CASE WHEN y - x > 5 THEN y ELSE NULL END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_21",
        "database_name": "monetdb_9_21",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord ASC; -- IF, FROM_UNIXTIME",
        "target_query": "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1110000000' SECOND AS STRING) END AS date_ord, text FROM t1 ORDER BY date_ord ASC;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "MonetDB does not support the `IF` function, but you can use the `CASE WHEN` expression to achieve similar functionality. It evaluates a condition and returns different values based on the truth value of the condition.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            },
            {
                "expression": "TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '<seconds>' SECOND",
                "description": "Adds seconds to the UNIX epoch by using an INTERVAL expression with a string constant representing the number of seconds.",
                "examples": [
                    "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000' SECOND;",
                    "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000.987' SECOND;",
                    "SELECT CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000' SECOND AS STRING);"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "select nullif(u, 1) from t1; -- NULLIF\n",
            "explain select nullif(u, 1) from t1; -- NULLIF\n",
            "drop table t1;\n",
            "create table t1 (num  double(12,2));\n",
            "insert into t1 values (144.54);\n",
            "select sum(if(num is null,0.00,num)) from t1; -- IF\n",
            "drop table t1;\n",
            "create table t1 (x int, y int);\n",
            "insert into t1 values (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF\n",
            "drop table t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF\n",
            "CREATE TABLE `t1` (`id` int(11) NOT NULL ,`date` int(10) default NULL,`text` varchar(32) NOT NULL);\n",
            "INSERT INTO t1 VALUES (1,1110000000,'Day 1'),(2,1111000000,'Day 2'),(3,1112000000,'Day 3');\n",
            "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord ASC; -- IF, FROM_UNIXTIME\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT NULLIF(u, 1) FROM t1;\n",
            "EXPLAIN SELECT NULLIF(u, 1) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (num decimal(12,2));\n",
            "INSERT INTO t1 VALUES (144.54);\n",
            "SELECT SUM(CASE WHEN num IS NULL THEN 0.00 ELSE num END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (x int, y int);\n",
            "INSERT INTO t1 VALUES (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "SELECT MIN(CASE WHEN y - x > 5 THEN y ELSE NULL END), MAX(CASE WHEN y - x > 5 THEN y ELSE NULL END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL;\n",
            "CREATE TABLE t1 (id int NOT NULL, date int DEFAULT NULL, text varchar(32) NOT NULL);\n",
            "INSERT INTO t1 VALUES (1,1110000000,'Day 1'),(2,1111000000,'Day 2'),(3,1112000000,'Day 3');\n",
            "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1110000000' SECOND AS STRING) END AS date_ord, text FROM t1 ORDER BY date_ord ASC;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_22",
        "database_name": "monetdb_9_22",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord DESC; -- IF, FROM_UNIXTIME",
        "target_query": "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1110000000' SECOND AS STRING) END AS date_ord, text FROM t1 ORDER BY date_ord DESC;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF",
            "FROM_UNIXTIME"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            },
            {
                "expression": "FROM_UNIXTIME(unix_timestamp [, format])",
                "description": "Converts a Unix timestamp to a datetime value. An optional format string can be used to format the output.",
                "examples": [
                    "SELECT FROM_UNIXTIME(1672531200);",
                    "SELECT FROM_UNIXTIME(1672531200, '%Y-%m-%d %H:%i:%s');",
                    "SELECT id, IF(created IS NULL, '-', FROM_UNIXTIME(created, '%d-%m-%Y')) AS created_fmt FROM logs;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "MonetDB does not support the `IF` function, but you can use the `CASE WHEN` expression to achieve similar functionality. It evaluates a condition and returns different values based on the truth value of the condition.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            },
            {
                "expression": "TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '<seconds>' SECOND",
                "description": "Adds seconds to the UNIX epoch by using an INTERVAL expression with a string constant representing the number of seconds.",
                "examples": [
                    "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000' SECOND;",
                    "SELECT TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000.987' SECOND;",
                    "SELECT CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1700000000' SECOND AS STRING);"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "select nullif(u, 1) from t1; -- NULLIF\n",
            "explain select nullif(u, 1) from t1; -- NULLIF\n",
            "drop table t1;\n",
            "create table t1 (num  double(12,2));\n",
            "insert into t1 values (144.54);\n",
            "select sum(if(num is null,0.00,num)) from t1; -- IF\n",
            "drop table t1;\n",
            "create table t1 (x int, y int);\n",
            "insert into t1 values (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF\n",
            "drop table t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF\n",
            "CREATE TABLE `t1` (`id` int(11) NOT NULL ,`date` int(10) default NULL,`text` varchar(32) NOT NULL);\n",
            "INSERT INTO t1 VALUES (1,1110000000,'Day 1'),(2,1111000000,'Day 2'),(3,1112000000,'Day 3');\n",
            "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord ASC; -- IF, FROM_UNIXTIME\n",
            "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord DESC; -- IF, FROM_UNIXTIME\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT NULLIF(u, 1) FROM t1;\n",
            "EXPLAIN SELECT NULLIF(u, 1) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (num decimal(12,2));\n",
            "INSERT INTO t1 VALUES (144.54);\n",
            "SELECT SUM(CASE WHEN num IS NULL THEN 0.00 ELSE num END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (x int, y int);\n",
            "INSERT INTO t1 VALUES (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "SELECT MIN(CASE WHEN y - x > 5 THEN y ELSE NULL END), MAX(CASE WHEN y - x > 5 THEN y ELSE NULL END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL;\n",
            "CREATE TABLE t1 (id int NOT NULL, date int DEFAULT NULL, text varchar(32) NOT NULL);\n",
            "INSERT INTO t1 VALUES (1,1110000000,'Day 1'),(2,1111000000,'Day 2'),(3,1112000000,'Day 3');\n",
            "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1110000000' SECOND AS STRING) END AS date_ord, text FROM t1 ORDER BY date_ord ASC;\n",
            "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1110000000' SECOND AS STRING) END AS date_ord, text FROM t1 ORDER BY date_ord DESC;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_26",
        "database_name": "monetdb_9_26",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT * FROM (SELECT MAX(IF(1, CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IF",
        "target_query": "SELECT * FROM (SELECT MAX(CASE WHEN 1 THEN CAST(c AS BIGINT) ELSE 0 END) FROM t1) AS te;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IF"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IF(condition, true_value, false_value)",
                "description": "In MySQL, `IF` is a conditional expression that checks if the condition is true. If the condition is true, it returns the `true_value`; otherwise, it returns the `false_value`.",
                "examples": [
                    "SELECT IF(LENGTH('hello') > 3, 'long', 'short') AS string_length_status;",
                    "SELECT IF(2 + 2 = 5, 'true', 'false') AS math_check;",
                    "SELECT IF(LOWER('ABC') = 'abc', 'match', 'no match') AS case_check;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "CASE WHEN condition THEN true_value ELSE false_value END",
                "description": "MonetDB does not support the `IF` function, but you can use the `CASE WHEN` expression to achieve similar functionality. It evaluates a condition and returns different values based on the truth value of the condition.",
                "examples": [
                    "SELECT CASE WHEN LENGTH('hello') > 3 THEN 'long' ELSE 'short' END AS string_length_status;",
                    "SELECT CASE WHEN 2 + 2 = 5 THEN 'true' ELSE 'false' END AS math_check;",
                    "SELECT CASE WHEN LOWER('ABC') = 'abc' THEN 'match' ELSE 'no match' END AS case_check;"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "select nullif(u, 1) from t1; -- NULLIF\n",
            "explain select nullif(u, 1) from t1; -- NULLIF\n",
            "drop table t1;\n",
            "create table t1 (num  double(12,2));\n",
            "insert into t1 values (144.54);\n",
            "select sum(if(num is null,0.00,num)) from t1; -- IF\n",
            "drop table t1;\n",
            "create table t1 (x int, y int);\n",
            "insert into t1 values (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF\n",
            "drop table t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF\n",
            "CREATE TABLE `t1` (`id` int(11) NOT NULL ,`date` int(10) default NULL,`text` varchar(32) NOT NULL);\n",
            "INSERT INTO t1 VALUES (1,1110000000,'Day 1'),(2,1111000000,'Day 2'),(3,1112000000,'Day 3');\n",
            "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord ASC; -- IF, FROM_UNIXTIME\n",
            "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord DESC; -- IF, FROM_UNIXTIME\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c LONGTEXT);\n",
            "INSERT INTO t1 VALUES(1), (2), (3), (4), ('1234567890123456789');\n",
            "SELECT * FROM (SELECT MAX(IF(1, CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IF\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT NULLIF(u, 1) FROM t1;\n",
            "EXPLAIN SELECT NULLIF(u, 1) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (num decimal(12,2));\n",
            "INSERT INTO t1 VALUES (144.54);\n",
            "SELECT SUM(CASE WHEN num IS NULL THEN 0.00 ELSE num END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (x int, y int);\n",
            "INSERT INTO t1 VALUES (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "SELECT MIN(CASE WHEN y - x > 5 THEN y ELSE NULL END), MAX(CASE WHEN y - x > 5 THEN y ELSE NULL END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL;\n",
            "CREATE TABLE t1 (id int NOT NULL, date int DEFAULT NULL, text varchar(32) NOT NULL);\n",
            "INSERT INTO t1 VALUES (1,1110000000,'Day 1'),(2,1111000000,'Day 2'),(3,1112000000,'Day 3');\n",
            "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1110000000' SECOND AS STRING) END AS date_ord, text FROM t1 ORDER BY date_ord ASC;\n",
            "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1110000000' SECOND AS STRING) END AS date_ord, text FROM t1 ORDER BY date_ord DESC;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c clob);  -- MonetDB \u4e0d\u652f\u6301 LONGTEXT\uff0c\u7528 clob \u8868\u793a\n",
            "INSERT INTO t1 VALUES(1), (2), (3), (4), ('1234567890123456789');\n",
            "SELECT * FROM (SELECT MAX(CASE WHEN 1 THEN CAST(c AS BIGINT) ELSE 0 END) FROM t1) AS te;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_27",
        "database_name": "monetdb_9_27",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT * FROM (SELECT MAX(IFNULL(CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IFNULL",
        "target_query": "SELECT * FROM (SELECT MAX(COALESCE(CAST(c AS BIGINT), 0)) FROM t1) AS te;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "MonetDB also uses COALESCE to return the first non-NULL value. This works the same way as IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "select nullif(u, 1) from t1; -- NULLIF\n",
            "explain select nullif(u, 1) from t1; -- NULLIF\n",
            "drop table t1;\n",
            "create table t1 (num  double(12,2));\n",
            "insert into t1 values (144.54);\n",
            "select sum(if(num is null,0.00,num)) from t1; -- IF\n",
            "drop table t1;\n",
            "create table t1 (x int, y int);\n",
            "insert into t1 values (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF\n",
            "drop table t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF\n",
            "CREATE TABLE `t1` (`id` int(11) NOT NULL ,`date` int(10) default NULL,`text` varchar(32) NOT NULL);\n",
            "INSERT INTO t1 VALUES (1,1110000000,'Day 1'),(2,1111000000,'Day 2'),(3,1112000000,'Day 3');\n",
            "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord ASC; -- IF, FROM_UNIXTIME\n",
            "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord DESC; -- IF, FROM_UNIXTIME\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c LONGTEXT);\n",
            "INSERT INTO t1 VALUES(1), (2), (3), (4), ('1234567890123456789');\n",
            "SELECT * FROM (SELECT MAX(IF(1, CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IF\n",
            "SELECT * FROM (SELECT MAX(IFNULL(CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IFNULL\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT NULLIF(u, 1) FROM t1;\n",
            "EXPLAIN SELECT NULLIF(u, 1) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (num decimal(12,2));\n",
            "INSERT INTO t1 VALUES (144.54);\n",
            "SELECT SUM(CASE WHEN num IS NULL THEN 0.00 ELSE num END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (x int, y int);\n",
            "INSERT INTO t1 VALUES (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "SELECT MIN(CASE WHEN y - x > 5 THEN y ELSE NULL END), MAX(CASE WHEN y - x > 5 THEN y ELSE NULL END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL;\n",
            "CREATE TABLE t1 (id int NOT NULL, date int DEFAULT NULL, text varchar(32) NOT NULL);\n",
            "INSERT INTO t1 VALUES (1,1110000000,'Day 1'),(2,1111000000,'Day 2'),(3,1112000000,'Day 3');\n",
            "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1110000000' SECOND AS STRING) END AS date_ord, text FROM t1 ORDER BY date_ord ASC;\n",
            "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1110000000' SECOND AS STRING) END AS date_ord, text FROM t1 ORDER BY date_ord DESC;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c clob);  -- MonetDB \u4e0d\u652f\u6301 LONGTEXT\uff0c\u7528 clob \u8868\u793a\n",
            "INSERT INTO t1 VALUES(1), (2), (3), (4), ('1234567890123456789');\n",
            "SELECT * FROM (SELECT MAX(CASE WHEN 1 THEN CAST(c AS BIGINT) ELSE 0 END) FROM t1) AS te;\n",
            "SELECT * FROM (SELECT MAX(COALESCE(CAST(c AS BIGINT), 0)) FROM t1) AS te;\n"
        ]
    },
    {
        "sql_id": "monetdb_9_29",
        "database_name": "monetdb_9_29",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT AVG(NULLIF(YEAR('2001-01-01'),10)); -- NULLIF, YEAR",
        "target_query": "SELECT AVG(NULLIF(EXTRACT(YEAR FROM DATE '2001-01-01'), 10));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "NULLIF",
            "YEAR"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(YEAR('2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            },
            {
                "expression": "YEAR(date)",
                "description": "Extracts the year from a date or datetime and returns it as an integer.",
                "examples": [
                    "SELECT YEAR('2023-04-10');",
                    "SELECT YEAR(NOW());",
                    "SELECT YEAR('2022-03-15');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "NULLIF(a, b)",
                "description": "The NULLIF function returns NULL if the two arguments are equal. Otherwise, it returns the first argument.",
                "examples": [
                    "SELECT NULLIF(5, 5) IS NULL AS result_1, NULLIF(5, 10) IS NOT NULL AS result_2;",
                    "SELECT NULLIF(EXTRACT(YEAR FROM DATE '2021-01-01'), 2021) AS year_check;",
                    "SELECT NULLIF(10.5, 10.5) AS result_3, NULLIF(10.5, 12.0) AS result_4;"
                ]
            },
            {
                "expression": "EXTRACT(YEAR FROM date)",
                "description": "Extracts the year from a date or datetime and returns it as an integer.",
                "examples": [
                    "SELECT EXTRACT(YEAR FROM DATE '2023-04-10');",
                    "SELECT EXTRACT(YEAR FROM CURRENT_DATE);",
                    "SELECT EXTRACT(YEAR FROM DATE '2022-03-15');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT IF(0,\"ERROR\",\"this\"),IF(1,\"is\",\"ERROR\"),IF(NULL,\"ERROR\",\"a\"),IF(1,2,3),IF(1,2.0,3.0)+0; -- IF\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT IF(1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "SELECT IF(u=1,st,st) s FROM t1 ORDER BY s; -- IF\n",
            "select nullif(u, 1) from t1; -- NULLIF\n",
            "explain select nullif(u, 1) from t1; -- NULLIF\n",
            "drop table t1;\n",
            "create table t1 (num  double(12,2));\n",
            "insert into t1 values (144.54);\n",
            "select sum(if(num is null,0.00,num)) from t1; -- IF\n",
            "drop table t1;\n",
            "create table t1 (x int, y int);\n",
            "insert into t1 values (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "select min(if(y -x > 5,y,NULL)), max(if(y - x > 5,y,NULL)) from t1; -- IF\n",
            "drop table t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL; -- NULLIF\n",
            "CREATE TABLE `t1` (`id` int(11) NOT NULL ,`date` int(10) default NULL,`text` varchar(32) NOT NULL);\n",
            "INSERT INTO t1 VALUES (1,1110000000,'Day 1'),(2,1111000000,'Day 2'),(3,1112000000,'Day 3');\n",
            "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord ASC; -- IF, FROM_UNIXTIME\n",
            "SELECT id, IF(date IS NULL, '-', FROM_UNIXTIME(date, '%d-%m-%Y')) AS date_ord, text FROM t1 ORDER BY date_ord DESC; -- IF, FROM_UNIXTIME\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c LONGTEXT);\n",
            "INSERT INTO t1 VALUES(1), (2), (3), (4), ('1234567890123456789');\n",
            "SELECT * FROM (SELECT MAX(IF(1, CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IF\n",
            "SELECT * FROM (SELECT MAX(IFNULL(CAST(c AS UNSIGNED), 0)) FROM t1) AS te; -- IFNULL\n",
            "DROP TABLE t1;\n",
            "SELECT AVG(NULLIF(YEAR('2001-01-01'),10)); -- NULLIF, YEAR\n"
        ],
        "target_related_schemas": [
            "SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END, CASE WHEN 1 THEN 'is' ELSE 'ERROR' END, CASE WHEN NULL THEN 'ERROR' ELSE 'a' END, CASE WHEN 1 THEN 2 ELSE 3 END, CASE WHEN 1 THEN 2.0 ELSE 3.0 END + 0;\n",
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1 (st varchar(255) NOT NULL, u int NOT NULL);\n",
            "INSERT INTO t1 VALUES ('a',1),('A',1),('aa',1),('AA',1),('a',1),('aaa',0),('BBB',0);\n",
            "SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT CASE WHEN u=1 THEN st ELSE st END AS s FROM t1 ORDER BY s;\n",
            "SELECT NULLIF(u, 1) FROM t1;\n",
            "EXPLAIN SELECT NULLIF(u, 1) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (num decimal(12,2));\n",
            "INSERT INTO t1 VALUES (144.54);\n",
            "SELECT SUM(CASE WHEN num IS NULL THEN 0.00 ELSE num END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (x int, y int);\n",
            "INSERT INTO t1 VALUES (0,6),(10,16),(20,26),(30,10),(40,46),(50,56);\n",
            "SELECT MIN(CASE WHEN y - x > 5 THEN y ELSE NULL END), MAX(CASE WHEN y - x > 5 THEN y ELSE NULL END) FROM t1;\n",
            "DROP TABLE t1;\n",
            "SELECT NULLIF(5,5) IS NULL, NULLIF(5,5) IS NOT NULL;\n",
            "CREATE TABLE t1 (id int NOT NULL, date int DEFAULT NULL, text varchar(32) NOT NULL);\n",
            "INSERT INTO t1 VALUES (1,1110000000,'Day 1'),(2,1111000000,'Day 2'),(3,1112000000,'Day 3');\n",
            "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1110000000' SECOND AS STRING) END AS date_ord, text FROM t1 ORDER BY date_ord ASC;\n",
            "SELECT id, CASE WHEN date IS NULL THEN '-' ELSE CAST(TIMESTAMP '1970-01-01 00:00:00' + INTERVAL '1110000000' SECOND AS STRING) END AS date_ord, text FROM t1 ORDER BY date_ord DESC;\n",
            "DROP TABLE t1;\n",
            "CREATE TABLE t1 (c clob);  -- MonetDB \u4e0d\u652f\u6301 LONGTEXT\uff0c\u7528 clob \u8868\u793a\n",
            "INSERT INTO t1 VALUES(1), (2), (3), (4), ('1234567890123456789');\n",
            "SELECT * FROM (SELECT MAX(CASE WHEN 1 THEN CAST(c AS BIGINT) ELSE 0 END) FROM t1) AS te;\n",
            "SELECT * FROM (SELECT MAX(COALESCE(CAST(c AS BIGINT), 0)) FROM t1) AS te;\n",
            "DROP TABLE t1;\n",
            "SELECT AVG(NULLIF(EXTRACT(YEAR FROM DATE '2001-01-01'), 10));\n"
        ]
    },
    {
        "sql_id": "monetdb_90_0",
        "database_name": "monetdb_90_0",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT FROM_DAYS(3652499), FROM_DAYS(3652500), FROM_DAYS(3652501); -- FROM_DAYS",
        "target_query": "SELECT sql_add(DATE '0000-01-01', INTERVAL '3652499' DAY), sql_add(DATE '0000-01-01', INTERVAL '3652500' DAY), sql_add(DATE '0000-01-01', INTERVAL '3652501' DAY); -- FROM_DAYS",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_DAYS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": " INTERVAL 'n' DAY)",
                "description": "Adds n days to the base date '0000-01-01' using sql_add to simulate FROM_DAYS.",
                "examples": [
                    "SELECT sql_add(DATE '0000-01-01', INTERVAL '1' DAY);",
                    "SELECT sql_add(DATE '0000-01-01', INTERVAL '730000' DAY);",
                    "SELECT 'Date is: ' || sql_add(DATE '0000-01-01', INTERVAL '738000' DAY);"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT FROM_DAYS(3652499), FROM_DAYS(3652500), FROM_DAYS(3652501); -- FROM_DAYS\n"
        ],
        "target_related_schemas": [
            "SELECT sql_add(DATE '0000-01-01', INTERVAL '3652499' DAY), sql_add(DATE '0000-01-01', INTERVAL '3652500' DAY), sql_add(DATE '0000-01-01', INTERVAL '3652501' DAY); -- FROM_DAYS\n"
        ]
    },
    {
        "sql_id": "monetdb_90_1",
        "database_name": "monetdb_90_1",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT FROM_DAYS(42949670), FROM_DAYS(42949671), FROM_DAYS(42949673); -- FROM_DAYS",
        "target_query": "SELECT sql_add(DATE '0000-01-01', INTERVAL '42949670' DAY), sql_add(DATE '0000-01-01', INTERVAL '42949671' DAY), sql_add(DATE '0000-01-01', INTERVAL '42949673' DAY); -- FROM_DAYS",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "FROM_DAYS"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "FROM_DAYS(n)",
                "description": "Returns a date corresponding to the number of days since year 0.",
                "examples": [
                    "SELECT FROM_DAYS(1);",
                    "SELECT FROM_DAYS(730000);",
                    "SELECT CONCAT('Date is: ', FROM_DAYS(738000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": " INTERVAL 'n' DAY)",
                "description": "Adds n days to the base date '0000-01-01' using sql_add to simulate FROM_DAYS.",
                "examples": [
                    "SELECT sql_add(DATE '0000-01-01', INTERVAL '1' DAY);",
                    "SELECT sql_add(DATE '0000-01-01', INTERVAL '730000' DAY);",
                    "SELECT 'Date is: ' || sql_add(DATE '0000-01-01', INTERVAL '738000' DAY);"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT FROM_DAYS(3652499), FROM_DAYS(3652500), FROM_DAYS(3652501); -- FROM_DAYS\n",
            "SELECT FROM_DAYS(42949670), FROM_DAYS(42949671), FROM_DAYS(42949673); -- FROM_DAYS\n"
        ],
        "target_related_schemas": [
            "SELECT sql_add(DATE '0000-01-01', INTERVAL '3652499' DAY), sql_add(DATE '0000-01-01', INTERVAL '3652500' DAY), sql_add(DATE '0000-01-01', INTERVAL '3652501' DAY); -- FROM_DAYS\n",
            "SELECT sql_add(DATE '0000-01-01', INTERVAL '42949670' DAY), sql_add(DATE '0000-01-01', INTERVAL '42949671' DAY), sql_add(DATE '0000-01-01', INTERVAL '42949673' DAY); -- FROM_DAYS\n"
        ]
    },
    {
        "sql_id": "monetdb_91_2",
        "database_name": "monetdb_91_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000)); -- REPEAT",
        "target_query": "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000));",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "REPEAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns a string consisting of the string 'str' repeated 'count' times. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "REPEAT(str, count)",
                "description": "Returns the string 'str' repeated 'count' times. Behavior on NULL matches MySQL.",
                "examples": [
                    "SELECT REPEAT('x', 5);",
                    "SELECT REPEAT('ab', 3);",
                    "SELECT REPEAT('*', 0);",
                    "SELECT REPEAT(name, 2) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t;\n",
            "CREATE TABLE t(i int, b LONGTEXT);\n",
            "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000)); -- REPEAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t;\n",
            "CREATE TABLE t(i int, b TEXT);\n",
            "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000));\n"
        ]
    },
    {
        "sql_id": "monetdb_91_4",
        "database_name": "monetdb_91_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT LENGTH(b) FROM (SELECT * FROM t INTERSECT SELECT * FROM t) derived; -- LENGTH",
        "target_query": "SELECT octet_length(b) FROM (SELECT * FROM t INTERSECT SELECT * FROM t) derived;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "LENGTH"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "LENGTH(str)",
                "description": "Returns the number of bytes in the string. For multi-byte characters (e.g., UTF-8), the byte length may differ from character count.",
                "examples": [
                    "SELECT LENGTH('abc');",
                    "SELECT LENGTH('\u4f60\u597d');",
                    "SELECT LENGTH(REPEAT('a', 1000));"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "octet_length(str)",
                "description": "Returns the byte size of a string. Matches MySQL's LENGTH().",
                "examples": [
                    "SELECT octet_length('abc');",
                    "SELECT octet_length('\u4f60\u597d');",
                    "SELECT octet_length(repeat('a', 1000));"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t;\n",
            "CREATE TABLE t(i int, b LONGTEXT);\n",
            "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000)); -- REPEAT\n",
            "SELECT LENGTH(b) FROM (SELECT * FROM t INTERSECT SELECT * FROM t) derived; -- LENGTH\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t;\n",
            "CREATE TABLE t(i int, b TEXT);\n",
            "INSERT INTO t VALUES (0, REPEAT('x', 120000)), (1, REPEAT('z', 12000));\n",
            "SELECT octet_length(b) FROM (SELECT * FROM t INTERSECT SELECT * FROM t) derived;\n"
        ]
    },
    {
        "sql_id": "monetdb_92_2",
        "database_name": "monetdb_92_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT argument FROM test_log WHERE argument LIKE CONCAT('%azun','dris%'); -- CONCAT",
        "target_query": "SELECT argument FROM test_log WHERE argument LIKE '%azun' || 'dris%';",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "CONCAT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "CONCAT(str1, str2, ..., strN)",
                "description": "Concatenates two or more string values into a single string. Returns NULL if any argument is NULL.",
                "examples": [
                    "SELECT CONCAT('Hello', ' ', 'World');",
                    "SELECT CONCAT('Year: ', 2025);",
                    "SELECT CONCAT(name, '_', id) FROM users;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "str1 || str2 || ...",
                "description": "Concatenates two or more strings using the || operator. If any operand is NULL, result is NULL.",
                "examples": [
                    "SELECT 'Hello' || ' ' || 'World';",
                    "SELECT 'Year: ' || CAST(2025 AS STRING);",
                    "SELECT name || '_' || CAST(id AS STRING) FROM users;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS test_log;\n",
            "CREATE TABLE test_log (argument TEXT);\n",
            "SELECT argument FROM test_log WHERE argument LIKE CONCAT('%azun','dris%'); -- CONCAT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS test_log;\n",
            "CREATE TABLE test_log (argument TEXT);\n",
            "SELECT argument FROM test_log WHERE argument LIKE '%azun' || 'dris%';\n"
        ]
    },
    {
        "sql_id": "monetdb_96_0",
        "database_name": "monetdb_96_0",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, 5, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_96_1",
        "database_name": "monetdb_96_1",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_96_2",
        "database_name": "monetdb_96_2",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_96_3",
        "database_name": "monetdb_96_3",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', NULL, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_96_4",
        "database_name": "monetdb_96_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', NULL, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_96_5",
        "database_name": "monetdb_96_5",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD('a', 5, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 5, NULL) AS result; -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n",
            "SELECT RPAD('a', 5, NULL) AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_96_6",
        "database_name": "monetdb_96_6",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD",
        "target_query": "SELECT RPAD(NULL, 5, NULL) AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n",
            "SELECT RPAD('a', 5, NULL) AS result;\n",
            "SELECT RPAD(NULL, 5, NULL) AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_96_7",
        "database_name": "monetdb_96_7",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD('a', 0, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, 'x') AS result; -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n",
            "SELECT RPAD('a', 5, NULL) AS result;\n",
            "SELECT RPAD(NULL, 5, NULL) AS result;\n",
            "SELECT RPAD('a', 0, 'x') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_96_8",
        "database_name": "monetdb_96_8",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD('a', 0, '') AS result; -- RPAD",
        "target_query": "SELECT RPAD('a', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, '') AS result; -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n",
            "SELECT RPAD('a', 5, NULL) AS result;\n",
            "SELECT RPAD(NULL, 5, NULL) AS result;\n",
            "SELECT RPAD('a', 0, 'x') AS result;\n",
            "SELECT RPAD('a', 0, '') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_96_9",
        "database_name": "monetdb_96_9",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD('', 0, 'x') AS result; -- RPAD",
        "target_query": "SELECT RPAD('', 0, 'x') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, 'x') AS result; -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n",
            "SELECT RPAD('a', 5, NULL) AS result;\n",
            "SELECT RPAD(NULL, 5, NULL) AS result;\n",
            "SELECT RPAD('a', 0, 'x') AS result;\n",
            "SELECT RPAD('a', 0, '') AS result;\n",
            "SELECT RPAD('', 0, 'x') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_96_10",
        "database_name": "monetdb_96_10",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD('', 0, '') AS result; -- RPAD",
        "target_query": "SELECT RPAD('', 0, '') AS result;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, '') AS result; -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n",
            "SELECT RPAD('a', 5, NULL) AS result;\n",
            "SELECT RPAD(NULL, 5, NULL) AS result;\n",
            "SELECT RPAD('a', 0, 'x') AS result;\n",
            "SELECT RPAD('a', 0, '') AS result;\n",
            "SELECT RPAD('', 0, 'x') AS result;\n",
            "SELECT RPAD('', 0, '') AS result;\n"
        ]
    },
    {
        "sql_id": "monetdb_96_11",
        "database_name": "monetdb_96_11",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD('a', -1, 'x'); -- RPAD",
        "target_query": "SELECT RPAD('a', -1, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('a', -1, 'x'); -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n",
            "SELECT RPAD('a', 5, NULL) AS result;\n",
            "SELECT RPAD(NULL, 5, NULL) AS result;\n",
            "SELECT RPAD('a', 0, 'x') AS result;\n",
            "SELECT RPAD('a', 0, '') AS result;\n",
            "SELECT RPAD('', 0, 'x') AS result;\n",
            "SELECT RPAD('', 0, '') AS result;\n",
            "SELECT RPAD('a', -1, 'x');\n"
        ]
    },
    {
        "sql_id": "monetdb_96_12",
        "database_name": "monetdb_96_12",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD('123456787890', 1, 'x'); -- RPAD",
        "target_query": "SELECT RPAD('123456787890', 1, 'x');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('a', -1, 'x'); -- RPAD\n",
            "SELECT RPAD('123456787890', 1, 'x'); -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n",
            "SELECT RPAD('a', 5, NULL) AS result;\n",
            "SELECT RPAD(NULL, 5, NULL) AS result;\n",
            "SELECT RPAD('a', 0, 'x') AS result;\n",
            "SELECT RPAD('a', 0, '') AS result;\n",
            "SELECT RPAD('', 0, 'x') AS result;\n",
            "SELECT RPAD('', 0, '') AS result;\n",
            "SELECT RPAD('a', -1, 'x');\n",
            "SELECT RPAD('123456787890', 1, 'x');\n"
        ]
    },
    {
        "sql_id": "monetdb_96_13",
        "database_name": "monetdb_96_13",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD('a', 5, 'xy'); -- RPAD",
        "target_query": "SELECT RPAD('a', 5, 'xy');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('a', -1, 'x'); -- RPAD\n",
            "SELECT RPAD('123456787890', 1, 'x'); -- RPAD\n",
            "SELECT RPAD('a', 5, 'xy'); -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n",
            "SELECT RPAD('a', 5, NULL) AS result;\n",
            "SELECT RPAD(NULL, 5, NULL) AS result;\n",
            "SELECT RPAD('a', 0, 'x') AS result;\n",
            "SELECT RPAD('a', 0, '') AS result;\n",
            "SELECT RPAD('', 0, 'x') AS result;\n",
            "SELECT RPAD('', 0, '') AS result;\n",
            "SELECT RPAD('a', -1, 'x');\n",
            "SELECT RPAD('123456787890', 1, 'x');\n",
            "SELECT RPAD('a', 5, 'xy');\n"
        ]
    },
    {
        "sql_id": "monetdb_96_14",
        "database_name": "monetdb_96_14",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD(\"I LOVE SQL\", 20, \" \"); -- RPAD",
        "target_query": "SELECT RPAD('I LOVE SQL', 20, ' ');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('a', -1, 'x'); -- RPAD\n",
            "SELECT RPAD('123456787890', 1, 'x'); -- RPAD\n",
            "SELECT RPAD('a', 5, 'xy'); -- RPAD\n",
            "SELECT RPAD(\"I LOVE SQL\", 20, \" \"); -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n",
            "SELECT RPAD('a', 5, NULL) AS result;\n",
            "SELECT RPAD(NULL, 5, NULL) AS result;\n",
            "SELECT RPAD('a', 0, 'x') AS result;\n",
            "SELECT RPAD('a', 0, '') AS result;\n",
            "SELECT RPAD('', 0, 'x') AS result;\n",
            "SELECT RPAD('', 0, '') AS result;\n",
            "SELECT RPAD('a', -1, 'x');\n",
            "SELECT RPAD('123456787890', 1, 'x');\n",
            "SELECT RPAD('a', 5, 'xy');\n",
            "SELECT RPAD('I LOVE SQL', 20, ' ');\n"
        ]
    },
    {
        "sql_id": "monetdb_96_15",
        "database_name": "monetdb_96_15",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT RPAD(\"I LOVE SQL in the morning\", 20, \" \"); -- RPAD",
        "target_query": "SELECT RPAD('I LOVE SQL in the morning', 20, ' ');",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "RPAD"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "Pads the string to the right with a specified character.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "RPAD(expression, length, pad_string)",
                "description": "MonetDB can simulate RPAD by concatenating strings.",
                "examples": [
                    "SELECT RPAD('hello', 10, ' ');",
                    "SELECT RPAD('abc', 6, 'x');",
                    "SELECT RPAD(123, 5, '0');"
                ]
            }
        ],
        "source_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', NULL, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD(NULL, 5, NULL) AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('a', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, 'x') AS result; -- RPAD\n",
            "SELECT RPAD('', 0, '') AS result; -- RPAD\n",
            "SELECT RPAD('a', -1, 'x'); -- RPAD\n",
            "SELECT RPAD('123456787890', 1, 'x'); -- RPAD\n",
            "SELECT RPAD('a', 5, 'xy'); -- RPAD\n",
            "SELECT RPAD(\"I LOVE SQL\", 20, \" \"); -- RPAD\n",
            "SELECT RPAD(\"I LOVE SQL in the morning\", 20, \" \"); -- RPAD\n"
        ],
        "target_related_schemas": [
            "SELECT RPAD(NULL, 5, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, 'x') AS result;\n",
            "SELECT RPAD(NULL, NULL, NULL) AS result;\n",
            "SELECT RPAD('a', NULL, 'x') AS result;\n",
            "SELECT RPAD('a', NULL, NULL) AS result;\n",
            "SELECT RPAD('a', 5, NULL) AS result;\n",
            "SELECT RPAD(NULL, 5, NULL) AS result;\n",
            "SELECT RPAD('a', 0, 'x') AS result;\n",
            "SELECT RPAD('a', 0, '') AS result;\n",
            "SELECT RPAD('', 0, 'x') AS result;\n",
            "SELECT RPAD('', 0, '') AS result;\n",
            "SELECT RPAD('a', -1, 'x');\n",
            "SELECT RPAD('123456787890', 1, 'x');\n",
            "SELECT RPAD('a', 5, 'xy');\n",
            "SELECT RPAD('I LOVE SQL', 20, ' ');\n",
            "SELECT RPAD('I LOVE SQL in the morning', 20, ' ');\n"
        ]
    },
    {
        "sql_id": "monetdb_97_6",
        "database_name": "monetdb_97_6",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3)); -- ISNULL",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS NULL;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ISNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "expr IS NULL",
                "description": "Standard SQL construct for detecting NULL values.",
                "examples": [
                    "SELECT NULL IS NULL;",
                    "SELECT (5 * NULL) IS NULL;",
                    "SELECT CASE WHEN balance IS NULL THEN 0 ELSE balance END FROM accounts;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(a INT, b INT);\n",
            "INSERT INTO t1 VALUES(1,1),(2,2),(3,3);\n",
            "EXPLAIN SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3)); -- ISNULL\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(a INT, b INT);\n",
            "INSERT INTO t1 VALUES(1,1),(2,2),(3,3);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS NULL;\n"
        ]
    },
    {
        "sql_id": "monetdb_97_7",
        "database_name": "monetdb_97_7",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3)); -- ISNULL",
        "target_query": "SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS NULL;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "ISNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "ISNULL(expr)",
                "description": "Returns 1 if the expression is NULL, otherwise returns 0.",
                "examples": [
                    "SELECT ISNULL(NULL);",
                    "SELECT ISNULL(5 + NULL);",
                    "SELECT IF(ISNULL(score), 'N/A', score) FROM students;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "expr IS NULL",
                "description": "Standard SQL construct for detecting NULL values.",
                "examples": [
                    "SELECT NULL IS NULL;",
                    "SELECT (5 * NULL) IS NULL;",
                    "SELECT CASE WHEN balance IS NULL THEN 0 ELSE balance END FROM accounts;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(a INT, b INT);\n",
            "INSERT INTO t1 VALUES(1,1),(2,2),(3,3);\n",
            "EXPLAIN SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3)); -- ISNULL\n",
            "SELECT * FROM t1 WHERE ISNULL(t1.a IN (SELECT t3.a FROM t1 t3)); -- ISNULL\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(a INT, b INT);\n",
            "INSERT INTO t1 VALUES(1,1),(2,2),(3,3);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS NULL;\n",
            "SELECT * FROM t1 WHERE (t1.a IN (SELECT t3.a FROM t1 t3)) IS NULL;\n"
        ]
    },
    {
        "sql_id": "monetdb_98_4",
        "database_name": "monetdb_98_4",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS CHAR) = CAST(t2.a AS CHAR)) > 0; -- UUID",
        "target_query": "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS TEXT) = CAST(t2.a AS TEXT) ) > 0;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "UUID"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "UUID()",
                "description": "In MySQL, the UUID() function generates a unique 128-bit identifier, typically represented as a string containing numbers and letters, in the standard UUID format.",
                "examples": [
                    "SELECT UUID();",
                    "SELECT CONCAT(UUID(), 'some_random_string');",
                    "SELECT UPPER(UUID());"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "UUID()",
                "description": "MonetDB supports the UUID() function, which generates a UUID in the standard format.",
                "examples": [
                    "SELECT UUID();",
                    "SELECT CONCAT(UUID(), 'some_random_string');",
                    "SELECT UPPER(UUID());"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(x INT, y INT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2(a INT, b INT);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS CHAR) = CAST(t2.a AS CHAR)) > 0; -- UUID\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(x INT, y INT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2(a INT, b INT);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS TEXT) = CAST(t2.a AS TEXT) ) > 0;\n"
        ]
    },
    {
        "sql_id": "monetdb_98_14",
        "database_name": "monetdb_98_14",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE",
        "target_query": "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function is supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(x INT, y INT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2(a INT, b INT);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS CHAR) = CAST(t2.a AS CHAR)) > 0; -- UUID\n",
            "DROP TABLE t1;\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t1(a INT);\n",
            "DROP TABLE IF EXISTS t3;\n",
            "CREATE TABLE t3(a INT, b INT);\n",
            "INSERT INTO t1 VALUES (1), (2), (3), (4);\n",
            "INSERT INTO t3 VALUES (5,5), (6,6);\n",
            "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(x INT, y INT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2(a INT, b INT);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS TEXT) = CAST(t2.a AS TEXT) ) > 0;\n",
            "DROP TABLE t1;\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t1(a INT);\n",
            "DROP TABLE IF EXISTS t3;\n",
            "CREATE TABLE t3(a INT, b INT);\n",
            "INSERT INTO t1 VALUES (1), (2), (3), (4);\n",
            "INSERT INTO t3 VALUES (5,5), (6,6);\n",
            "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_98_15",
        "database_name": "monetdb_98_15",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE",
        "target_query": "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "COALESCE"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...) or ALTER TABLE table_name COALESCE PARTITION N",
                "description": "Returns the first non-NULL value, or merges table partitions.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1 GROUP BY 1;",
                    "ALTER TABLE t1 COALESCE PARTITION 2;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2, ...)",
                "description": "Standard SQL COALESCE function is supported.",
                "examples": [
                    "SELECT COALESCE(a, '') FROM t1;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(x INT, y INT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2(a INT, b INT);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS CHAR) = CAST(t2.a AS CHAR)) > 0; -- UUID\n",
            "DROP TABLE t1;\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t1(a INT);\n",
            "DROP TABLE IF EXISTS t3;\n",
            "CREATE TABLE t3(a INT, b INT);\n",
            "INSERT INTO t1 VALUES (1), (2), (3), (4);\n",
            "INSERT INTO t3 VALUES (5,5), (6,6);\n",
            "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE\n",
            "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(x INT, y INT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2(a INT, b INT);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS TEXT) = CAST(t2.a AS TEXT) ) > 0;\n",
            "DROP TABLE t1;\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t1(a INT);\n",
            "DROP TABLE IF EXISTS t3;\n",
            "CREATE TABLE t3(a INT, b INT);\n",
            "INSERT INTO t1 VALUES (1), (2), (3), (4);\n",
            "INSERT INTO t3 VALUES (5,5), (6,6);\n",
            "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;\n",
            "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_98_16",
        "database_name": "monetdb_98_16",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- IFNULL",
        "target_query": "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "MonetDB also uses COALESCE to return the first non-NULL value. This works the same way as IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(x INT, y INT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2(a INT, b INT);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS CHAR) = CAST(t2.a AS CHAR)) > 0; -- UUID\n",
            "DROP TABLE t1;\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t1(a INT);\n",
            "DROP TABLE IF EXISTS t3;\n",
            "CREATE TABLE t3(a INT, b INT);\n",
            "INSERT INTO t1 VALUES (1), (2), (3), (4);\n",
            "INSERT INTO t3 VALUES (5,5), (6,6);\n",
            "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE\n",
            "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE\n",
            "SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- IFNULL\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(x INT, y INT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2(a INT, b INT);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS TEXT) = CAST(t2.a AS TEXT) ) > 0;\n",
            "DROP TABLE t1;\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t1(a INT);\n",
            "DROP TABLE IF EXISTS t3;\n",
            "CREATE TABLE t3(a INT, b INT);\n",
            "INSERT INTO t1 VALUES (1), (2), (3), (4);\n",
            "INSERT INTO t3 VALUES (5,5), (6,6);\n",
            "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;\n",
            "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;\n",
            "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_98_17",
        "database_name": "monetdb_98_17",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "EXPLAIN SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- IFNULL",
        "target_query": "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "IFNULL"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "IFNULL(expr1, expr2)",
                "description": "The IFNULL function checks if the first argument is NULL; if it is, the second argument is returned; otherwise, the first argument is returned.",
                "examples": [
                    "SELECT IFNULL(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT IFNULL(CAST('01-01-01' AS DATETIME), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = IFNULL(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "COALESCE(expr1, expr2)",
                "description": "MonetDB also uses COALESCE to return the first non-NULL value. This works the same way as IFNULL in MySQL.",
                "examples": [
                    "SELECT COALESCE(NULL, NULL);",
                    "CREATE TABLE t13 AS SELECT COALESCE(CAST('01-01-01' AS TIMESTAMP), CAST('01-01-01' AS DATE)) AS f4 FROM t1;",
                    "EXPLAIN SELECT (SELECT 1 FROM t2 WHERE d = COALESCE(c, NULL)) AS RESULT FROM t1 GROUP BY c;"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(x INT, y INT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2(a INT, b INT);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS CHAR) = CAST(t2.a AS CHAR)) > 0; -- UUID\n",
            "DROP TABLE t1;\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t1(a INT);\n",
            "DROP TABLE IF EXISTS t3;\n",
            "CREATE TABLE t3(a INT, b INT);\n",
            "INSERT INTO t1 VALUES (1), (2), (3), (4);\n",
            "INSERT INTO t3 VALUES (5,5), (6,6);\n",
            "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE\n",
            "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- COALESCE\n",
            "SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- IFNULL\n",
            "EXPLAIN SELECT (SELECT IFNULL(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1 ; -- IFNULL\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS t1;\n",
            "CREATE TABLE t1(x INT, y INT);\n",
            "DROP TABLE IF EXISTS t2;\n",
            "CREATE TABLE t2(a INT, b INT);\n",
            "EXPLAIN SELECT * FROM t1 WHERE (SELECT b FROM t2 WHERE CAST(UUID() AS TEXT) = CAST(t2.a AS TEXT) ) > 0;\n",
            "DROP TABLE t1;\n",
            "DROP TABLE t2;\n",
            "CREATE TABLE t1(a INT);\n",
            "DROP TABLE IF EXISTS t3;\n",
            "CREATE TABLE t3(a INT, b INT);\n",
            "INSERT INTO t1 VALUES (1), (2), (3), (4);\n",
            "INSERT INTO t3 VALUES (5,5), (6,6);\n",
            "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;\n",
            "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;\n",
            "SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;\n",
            "EXPLAIN SELECT (SELECT COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a=t3.a) FROM t1;\n"
        ]
    },
    {
        "sql_id": "monetdb_99_6",
        "database_name": "monetdb_99_6",
        "source_dialect": "mysql",
        "target_dialect": "monetdb",
        "source_query": "SELECT TRIM(f1), COUNT(*) FROM table_varchar_pad_space GROUP BY f1; -- TRIM, COUNT",
        "target_query": "SELECT TRIM(f1), COUNT(*) FROM table_varchar_pad_space GROUP BY f1;",
        "semantic_equivalent_type": "exact_equivalence",
        "dialect_tokens": [
            "TRIM",
            "COUNT"
        ],
        "source_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "The TRIM function removes unwanted characters from the beginning and/or end of a string. If no character is specified, it removes spaces by default. You can specify 'BOTH', 'LEADING', or 'TRAILING' to trim characters from both ends, the start, or the end, respectively.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            },
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN FORMAT=TREE SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            }
        ],
        "target_dialect_knowledge": [
            {
                "expression": "TRIM([BOTH | LEADING | TRAILING] 'char' FROM str)",
                "description": "MonetDB's TRIM function operates the same way as in MySQL and other databases. It removes unwanted characters from the start and/or end of a string.",
                "examples": [
                    "SELECT TRIM('x' FROM 'xxabcx');",
                    "SELECT TRIM(BOTH ' ' FROM '  hello world  ');",
                    "SELECT TRIM(LEADING '0' FROM '000123');"
                ]
            },
            {
                "expression": "COUNT()",
                "description": "Returns the number of rows or non-NULL values in a column, with support for DISTINCT.",
                "examples": [
                    "EXPLAIN SELECT COUNT(DISTINCT a) FROM t1 HAVING COUNT(DISTINCT c) < 10;",
                    "SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);",
                    "SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);"
                ]
            }
        ],
        "source_related_schemas": [
            "DROP TABLE IF EXISTS table_varchar_pad_space;\n",
            "CREATE TABLE table_varchar_pad_space (f1 VARCHAR(20));\n",
            "INSERT INTO table_varchar_pad_space VALUES ('ABC  ');\n",
            "INSERT INTO table_varchar_pad_space VALUES ('XYZ');\n",
            "INSERT INTO table_varchar_pad_space VALUES ('XYZ ');\n",
            "INSERT INTO table_varchar_pad_space VALUES ('ABC ');\n",
            "SELECT TRIM(f1), COUNT(*) FROM table_varchar_pad_space GROUP BY f1; -- TRIM, COUNT\n"
        ],
        "target_related_schemas": [
            "DROP TABLE IF EXISTS table_varchar_pad_space;\n",
            "CREATE TABLE table_varchar_pad_space (f1 VARCHAR(20));\n",
            "INSERT INTO table_varchar_pad_space VALUES ('ABC  ');\n",
            "INSERT INTO table_varchar_pad_space VALUES ('XYZ');\n",
            "INSERT INTO table_varchar_pad_space VALUES ('XYZ ');\n",
            "INSERT INTO table_varchar_pad_space VALUES ('ABC ');\n",
            "SELECT TRIM(f1), COUNT(*) FROM table_varchar_pad_space GROUP BY f1;\n"
        ]
    }
]